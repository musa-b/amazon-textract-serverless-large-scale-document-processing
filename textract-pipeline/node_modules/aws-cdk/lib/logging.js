"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const colors = require("colors/safe");
const util = require("util");
// tslint:disable:no-console the whole point of those methods is precisely to output to the console...
exports.isVerbose = false;
function setVerbose(enabled = true) {
    exports.isVerbose = enabled;
}
exports.setVerbose = setVerbose;
function error(fmt, ...args) {
    console.error(colors.red(util.format(fmt, ...args)));
}
exports.error = error;
function debug(fmt, ...args) {
    if (exports.isVerbose) {
        console.error(colors.gray(util.format(fmt, ...args)));
    }
}
exports.debug = debug;
function highlight(fmt, ...args) {
    console.error(colors.bold(colors.white(util.format(fmt, ...args))));
}
exports.highlight = highlight;
function success(fmt, ...args) {
    console.error(colors.green(util.format(fmt, ...args)));
}
exports.success = success;
function warning(fmt, ...args) {
    console.error(colors.yellow(util.format(fmt, ...args)));
}
exports.warning = warning;
function print(fmt, ...args) {
    console.error(colors.white(util.format(fmt, ...args)));
}
exports.print = print;
function data(fmt, ...args) {
    console.log(util.format(fmt, ...args));
}
exports.data = data;
/**
 * Create a logger output that features a constant prefix string.
 *
 * @param prefixString the prefix string to be appended before any log entry.
 * @param fn   the logger function to be used (typically one of the other functions in this module)
 *
 * @returns a new LoggerFunction.
 */
function prefix(prefixString, fn) {
    return (fmt, ...args) => fn(`%s ${fmt}`, prefixString, ...args);
}
exports.prefix = prefix;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2luZy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImxvZ2dpbmcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxzQ0FBc0M7QUFDdEMsNkJBQTZCO0FBRTdCLHNHQUFzRztBQUUzRixRQUFBLFNBQVMsR0FBRyxLQUFLLENBQUM7QUFFN0IsU0FBZ0IsVUFBVSxDQUFDLE9BQU8sR0FBRyxJQUFJO0lBQ3ZDLGlCQUFTLEdBQUcsT0FBTyxDQUFDO0FBQ3RCLENBQUM7QUFGRCxnQ0FFQztBQUVELFNBQWdCLEtBQUssQ0FBQyxHQUFXLEVBQUUsR0FBRyxJQUFXO0lBQy9DLE9BQU8sQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN2RCxDQUFDO0FBRkQsc0JBRUM7QUFFRCxTQUFnQixLQUFLLENBQUMsR0FBVyxFQUFFLEdBQUcsSUFBVztJQUMvQyxJQUFJLGlCQUFTLEVBQUU7UUFDYixPQUFPLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDdkQ7QUFDSCxDQUFDO0FBSkQsc0JBSUM7QUFFRCxTQUFnQixTQUFTLENBQUMsR0FBVyxFQUFFLEdBQUcsSUFBVztJQUNuRCxPQUFPLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3RFLENBQUM7QUFGRCw4QkFFQztBQUVELFNBQWdCLE9BQU8sQ0FBQyxHQUFXLEVBQUUsR0FBRyxJQUFXO0lBQ2pELE9BQU8sQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN6RCxDQUFDO0FBRkQsMEJBRUM7QUFFRCxTQUFnQixPQUFPLENBQUMsR0FBVyxFQUFFLEdBQUcsSUFBVztJQUNqRCxPQUFPLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDMUQsQ0FBQztBQUZELDBCQUVDO0FBRUQsU0FBZ0IsS0FBSyxDQUFDLEdBQVcsRUFBRSxHQUFHLElBQVc7SUFDL0MsT0FBTyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3pELENBQUM7QUFGRCxzQkFFQztBQUVELFNBQWdCLElBQUksQ0FBQyxHQUFXLEVBQUUsR0FBRyxJQUFXO0lBQzlDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ3pDLENBQUM7QUFGRCxvQkFFQztBQUlEOzs7Ozs7O0dBT0c7QUFDSCxTQUFnQixNQUFNLENBQUMsWUFBb0IsRUFBRSxFQUFrQjtJQUM3RCxPQUFPLENBQUMsR0FBVyxFQUFFLEdBQUcsSUFBVyxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsTUFBTSxHQUFHLEVBQUUsRUFBRSxZQUFZLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQztBQUNqRixDQUFDO0FBRkQsd0JBRUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBjb2xvcnMgZnJvbSAnY29sb3JzL3NhZmUnO1xuaW1wb3J0ICogYXMgdXRpbCBmcm9tICd1dGlsJztcblxuLy8gdHNsaW50OmRpc2FibGU6bm8tY29uc29sZSB0aGUgd2hvbGUgcG9pbnQgb2YgdGhvc2UgbWV0aG9kcyBpcyBwcmVjaXNlbHkgdG8gb3V0cHV0IHRvIHRoZSBjb25zb2xlLi4uXG5cbmV4cG9ydCBsZXQgaXNWZXJib3NlID0gZmFsc2U7XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXRWZXJib3NlKGVuYWJsZWQgPSB0cnVlKSB7XG4gIGlzVmVyYm9zZSA9IGVuYWJsZWQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBlcnJvcihmbXQ6IHN0cmluZywgLi4uYXJnczogYW55W10pIHtcbiAgY29uc29sZS5lcnJvcihjb2xvcnMucmVkKHV0aWwuZm9ybWF0KGZtdCwgLi4uYXJncykpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRlYnVnKGZtdDogc3RyaW5nLCAuLi5hcmdzOiBhbnlbXSkge1xuICBpZiAoaXNWZXJib3NlKSB7XG4gICAgY29uc29sZS5lcnJvcihjb2xvcnMuZ3JheSh1dGlsLmZvcm1hdChmbXQsIC4uLmFyZ3MpKSk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhpZ2hsaWdodChmbXQ6IHN0cmluZywgLi4uYXJnczogYW55W10pIHtcbiAgY29uc29sZS5lcnJvcihjb2xvcnMuYm9sZChjb2xvcnMud2hpdGUodXRpbC5mb3JtYXQoZm10LCAuLi5hcmdzKSkpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHN1Y2Nlc3MoZm10OiBzdHJpbmcsIC4uLmFyZ3M6IGFueVtdKSB7XG4gIGNvbnNvbGUuZXJyb3IoY29sb3JzLmdyZWVuKHV0aWwuZm9ybWF0KGZtdCwgLi4uYXJncykpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHdhcm5pbmcoZm10OiBzdHJpbmcsIC4uLmFyZ3M6IGFueVtdKSB7XG4gIGNvbnNvbGUuZXJyb3IoY29sb3JzLnllbGxvdyh1dGlsLmZvcm1hdChmbXQsIC4uLmFyZ3MpKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwcmludChmbXQ6IHN0cmluZywgLi4uYXJnczogYW55W10pIHtcbiAgY29uc29sZS5lcnJvcihjb2xvcnMud2hpdGUodXRpbC5mb3JtYXQoZm10LCAuLi5hcmdzKSkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGF0YShmbXQ6IHN0cmluZywgLi4uYXJnczogYW55W10pIHtcbiAgY29uc29sZS5sb2codXRpbC5mb3JtYXQoZm10LCAuLi5hcmdzKSk7XG59XG5cbmV4cG9ydCB0eXBlIExvZ2dlckZ1bmN0aW9uID0gKGZtdDogc3RyaW5nLCAuLi5hcmdzOiBhbnlbXSkgPT4gdm9pZDtcblxuLyoqXG4gKiBDcmVhdGUgYSBsb2dnZXIgb3V0cHV0IHRoYXQgZmVhdHVyZXMgYSBjb25zdGFudCBwcmVmaXggc3RyaW5nLlxuICpcbiAqIEBwYXJhbSBwcmVmaXhTdHJpbmcgdGhlIHByZWZpeCBzdHJpbmcgdG8gYmUgYXBwZW5kZWQgYmVmb3JlIGFueSBsb2cgZW50cnkuXG4gKiBAcGFyYW0gZm4gICB0aGUgbG9nZ2VyIGZ1bmN0aW9uIHRvIGJlIHVzZWQgKHR5cGljYWxseSBvbmUgb2YgdGhlIG90aGVyIGZ1bmN0aW9ucyBpbiB0aGlzIG1vZHVsZSlcbiAqXG4gKiBAcmV0dXJucyBhIG5ldyBMb2dnZXJGdW5jdGlvbi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHByZWZpeChwcmVmaXhTdHJpbmc6IHN0cmluZywgZm46IExvZ2dlckZ1bmN0aW9uKTogTG9nZ2VyRnVuY3Rpb24ge1xuICByZXR1cm4gKGZtdDogc3RyaW5nLCAuLi5hcmdzOiBhbnlbXSkgPT4gZm4oYCVzICR7Zm10fWAsIHByZWZpeFN0cmluZywgLi4uYXJncyk7XG59XG4iXX0=