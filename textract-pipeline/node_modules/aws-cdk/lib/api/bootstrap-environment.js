"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const deploy_stack_1 = require("./deploy-stack");
// tslint:disable:max-line-length
exports.BUCKET_NAME_OUTPUT = 'BucketName';
exports.BUCKET_DOMAIN_NAME_OUTPUT = 'BucketDomainName';
async function bootstrapEnvironment(environment, aws, toolkitStackName, roleArn) {
    const synthesizedStack = {
        environment,
        metadata: {},
        template: {
            Description: "The CDK Toolkit Stack. It was created by `cdk bootstrap` and manages resources necessary for managing your Cloud Applications with AWS CDK.",
            Resources: {
                StagingBucket: {
                    Type: "AWS::S3::Bucket",
                    Properties: {
                        AccessControl: "Private",
                        BucketEncryption: { ServerSideEncryptionConfiguration: [{ ServerSideEncryptionByDefault: { SSEAlgorithm: "aws:kms" } }] }
                    }
                }
            },
            Outputs: {
                [exports.BUCKET_NAME_OUTPUT]: {
                    Description: "The name of the S3 bucket owned by the CDK toolkit stack",
                    Value: { Ref: "StagingBucket" }
                },
                [exports.BUCKET_DOMAIN_NAME_OUTPUT]: {
                    Description: "The domain name of the S3 bucket owned by the CDK toolkit stack",
                    Value: { "Fn::GetAtt": ["StagingBucket", "DomainName"] }
                }
            }
        },
        name: toolkitStackName,
    };
    return await deploy_stack_1.deployStack({ stack: synthesizedStack, sdk: aws, roleArn });
}
exports.bootstrapEnvironment = bootstrapEnvironment;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYm9vdHN0cmFwLWVudmlyb25tZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYm9vdHN0cmFwLWVudmlyb25tZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0EsaURBQWdFO0FBR2hFLGlDQUFpQztBQUVwQixRQUFBLGtCQUFrQixHQUFHLFlBQVksQ0FBQztBQUNsQyxRQUFBLHlCQUF5QixHQUFHLGtCQUFrQixDQUFDO0FBRXJELEtBQUssVUFBVSxvQkFBb0IsQ0FBQyxXQUF3QixFQUFFLEdBQVEsRUFBRSxnQkFBd0IsRUFBRSxPQUEyQjtJQUNsSSxNQUFNLGdCQUFnQixHQUFxQjtRQUN6QyxXQUFXO1FBQ1gsUUFBUSxFQUFFLEVBQUU7UUFDWixRQUFRLEVBQUU7WUFDUixXQUFXLEVBQUUsNklBQTZJO1lBQzFKLFNBQVMsRUFBRTtnQkFDVCxhQUFhLEVBQUU7b0JBQ2IsSUFBSSxFQUFFLGlCQUFpQjtvQkFDdkIsVUFBVSxFQUFFO3dCQUNWLGFBQWEsRUFBRSxTQUFTO3dCQUN4QixnQkFBZ0IsRUFBRSxFQUFFLGlDQUFpQyxFQUFFLENBQUMsRUFBRSw2QkFBNkIsRUFBRSxFQUFFLFlBQVksRUFBRSxTQUFTLEVBQUUsRUFBRSxDQUFDLEVBQUU7cUJBQzFIO2lCQUNGO2FBQ0Y7WUFDRCxPQUFPLEVBQUU7Z0JBQ1AsQ0FBQywwQkFBa0IsQ0FBQyxFQUFFO29CQUNwQixXQUFXLEVBQUUsMERBQTBEO29CQUN2RSxLQUFLLEVBQUUsRUFBRSxHQUFHLEVBQUUsZUFBZSxFQUFFO2lCQUNoQztnQkFDRCxDQUFDLGlDQUF5QixDQUFDLEVBQUU7b0JBQzNCLFdBQVcsRUFBRSxpRUFBaUU7b0JBQzlFLEtBQUssRUFBRSxFQUFFLFlBQVksRUFBRSxDQUFDLGVBQWUsRUFBRSxZQUFZLENBQUMsRUFBRTtpQkFDekQ7YUFDRjtTQUNGO1FBQ0QsSUFBSSxFQUFFLGdCQUFnQjtLQUN2QixDQUFDO0lBQ0YsT0FBTyxNQUFNLDBCQUFXLENBQUMsRUFBRSxLQUFLLEVBQUUsZ0JBQWdCLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDO0FBQzNFLENBQUM7QUE3QkQsb0RBNkJDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRW52aXJvbm1lbnQsIFN5bnRoZXNpemVkU3RhY2sgfSBmcm9tICdAYXdzLWNkay9jeC1hcGknO1xuaW1wb3J0IHsgZGVwbG95U3RhY2ssIERlcGxveVN0YWNrUmVzdWx0IH0gZnJvbSAnLi9kZXBsb3ktc3RhY2snO1xuaW1wb3J0IHsgU0RLIH0gZnJvbSAnLi91dGlsL3Nkayc7XG5cbi8vIHRzbGludDpkaXNhYmxlOm1heC1saW5lLWxlbmd0aFxuXG5leHBvcnQgY29uc3QgQlVDS0VUX05BTUVfT1VUUFVUID0gJ0J1Y2tldE5hbWUnO1xuZXhwb3J0IGNvbnN0IEJVQ0tFVF9ET01BSU5fTkFNRV9PVVRQVVQgPSAnQnVja2V0RG9tYWluTmFtZSc7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBib290c3RyYXBFbnZpcm9ubWVudChlbnZpcm9ubWVudDogRW52aXJvbm1lbnQsIGF3czogU0RLLCB0b29sa2l0U3RhY2tOYW1lOiBzdHJpbmcsIHJvbGVBcm46IHN0cmluZyB8IHVuZGVmaW5lZCk6IFByb21pc2U8RGVwbG95U3RhY2tSZXN1bHQ+IHtcbiAgY29uc3Qgc3ludGhlc2l6ZWRTdGFjazogU3ludGhlc2l6ZWRTdGFjayA9IHtcbiAgICBlbnZpcm9ubWVudCxcbiAgICBtZXRhZGF0YToge30sXG4gICAgdGVtcGxhdGU6IHtcbiAgICAgIERlc2NyaXB0aW9uOiBcIlRoZSBDREsgVG9vbGtpdCBTdGFjay4gSXQgd2FzIGNyZWF0ZWQgYnkgYGNkayBib290c3RyYXBgIGFuZCBtYW5hZ2VzIHJlc291cmNlcyBuZWNlc3NhcnkgZm9yIG1hbmFnaW5nIHlvdXIgQ2xvdWQgQXBwbGljYXRpb25zIHdpdGggQVdTIENESy5cIixcbiAgICAgIFJlc291cmNlczoge1xuICAgICAgICBTdGFnaW5nQnVja2V0OiB7XG4gICAgICAgICAgVHlwZTogXCJBV1M6OlMzOjpCdWNrZXRcIixcbiAgICAgICAgICBQcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICBBY2Nlc3NDb250cm9sOiBcIlByaXZhdGVcIixcbiAgICAgICAgICAgIEJ1Y2tldEVuY3J5cHRpb246IHsgU2VydmVyU2lkZUVuY3J5cHRpb25Db25maWd1cmF0aW9uOiBbeyBTZXJ2ZXJTaWRlRW5jcnlwdGlvbkJ5RGVmYXVsdDogeyBTU0VBbGdvcml0aG06IFwiYXdzOmttc1wiIH0gfV0gfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIE91dHB1dHM6IHtcbiAgICAgICAgW0JVQ0tFVF9OQU1FX09VVFBVVF06IHtcbiAgICAgICAgICBEZXNjcmlwdGlvbjogXCJUaGUgbmFtZSBvZiB0aGUgUzMgYnVja2V0IG93bmVkIGJ5IHRoZSBDREsgdG9vbGtpdCBzdGFja1wiLFxuICAgICAgICAgIFZhbHVlOiB7IFJlZjogXCJTdGFnaW5nQnVja2V0XCIgfVxuICAgICAgICB9LFxuICAgICAgICBbQlVDS0VUX0RPTUFJTl9OQU1FX09VVFBVVF06IHtcbiAgICAgICAgICBEZXNjcmlwdGlvbjogXCJUaGUgZG9tYWluIG5hbWUgb2YgdGhlIFMzIGJ1Y2tldCBvd25lZCBieSB0aGUgQ0RLIHRvb2xraXQgc3RhY2tcIixcbiAgICAgICAgICBWYWx1ZTogeyBcIkZuOjpHZXRBdHRcIjogW1wiU3RhZ2luZ0J1Y2tldFwiLCBcIkRvbWFpbk5hbWVcIl0gfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBuYW1lOiB0b29sa2l0U3RhY2tOYW1lLFxuICB9O1xuICByZXR1cm4gYXdhaXQgZGVwbG95U3RhY2soeyBzdGFjazogc3ludGhlc2l6ZWRTdGFjaywgc2RrOiBhd3MsIHJvbGVBcm4gfSk7XG59XG4iXX0=