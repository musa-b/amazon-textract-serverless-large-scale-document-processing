"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cxapi = require("@aws-cdk/cx-api");
const logging_1 = require("../logging");
const availability_zones_1 = require("./availability-zones");
const hosted_zones_1 = require("./hosted-zones");
const ssm_parameters_1 = require("./ssm-parameters");
const vpcs_1 = require("./vpcs");
/**
 * Iterate over the list of missing context values and invoke the appropriate providers from the map to retrieve them
 */
async function provideContextValues(missingValues, context, sdk) {
    for (const key of Object.keys(missingValues)) {
        const missingContext = missingValues[key];
        const constructor = availableContextProviders[missingContext.provider];
        if (!constructor) {
            // tslint:disable-next-line:max-line-length
            throw new Error(`Unrecognized context provider name: ${missingContext.provider}. You might need to update the toolkit to match the version of the construct library.`);
        }
        const provider = new constructor(sdk);
        const value = await provider.getValue(missingContext.props);
        context.set(key, value);
        logging_1.debug(`Setting "${key}" context to ${JSON.stringify(value)}`);
    }
}
exports.provideContextValues = provideContextValues;
const availableContextProviders = {
    [cxapi.AVAILABILITY_ZONE_PROVIDER]: availability_zones_1.AZContextProviderPlugin,
    [cxapi.SSM_PARAMETER_PROVIDER]: ssm_parameters_1.SSMContextProviderPlugin,
    [cxapi.HOSTED_ZONE_PROVIDER]: hosted_zones_1.HostedZoneContextProviderPlugin,
    [cxapi.VPC_PROVIDER]: vpcs_1.VpcNetworkContextProviderPlugin,
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHlDQUEwQztBQUUxQyx3Q0FBbUM7QUFFbkMsNkRBQStEO0FBQy9ELGlEQUFpRTtBQUVqRSxxREFBNEQ7QUFDNUQsaUNBQXlEO0FBS3pEOztHQUVHO0FBQ0ksS0FBSyxVQUFVLG9CQUFvQixDQUN4QyxhQUFzRCxFQUN0RCxPQUFnQixFQUNoQixHQUFRO0lBQ1IsS0FBSyxNQUFNLEdBQUcsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxFQUFFO1FBQzVDLE1BQU0sY0FBYyxHQUFHLGFBQWEsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUUxQyxNQUFNLFdBQVcsR0FBRyx5QkFBeUIsQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDdkUsSUFBSSxDQUFDLFdBQVcsRUFBRTtZQUNoQiwyQ0FBMkM7WUFDM0MsTUFBTSxJQUFJLEtBQUssQ0FBQyx1Q0FBdUMsY0FBYyxDQUFDLFFBQVEsdUZBQXVGLENBQUMsQ0FBQztTQUN4SztRQUVELE1BQU0sUUFBUSxHQUFHLElBQUksV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRXRDLE1BQU0sS0FBSyxHQUFHLE1BQU0sUUFBUSxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDNUQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDeEIsZUFBSyxDQUFDLFlBQVksR0FBRyxnQkFBZ0IsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDL0Q7QUFDSCxDQUFDO0FBbkJELG9EQW1CQztBQUVELE1BQU0seUJBQXlCLEdBQWdCO0lBQzdDLENBQUMsS0FBSyxDQUFDLDBCQUEwQixDQUFDLEVBQUUsNENBQXVCO0lBQzNELENBQUMsS0FBSyxDQUFDLHNCQUFzQixDQUFDLEVBQUUseUNBQXdCO0lBQ3hELENBQUMsS0FBSyxDQUFDLG9CQUFvQixDQUFDLEVBQUUsOENBQStCO0lBQzdELENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxFQUFFLHNDQUErQjtDQUN0RCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGN4YXBpID0gcmVxdWlyZSgnQGF3cy1jZGsvY3gtYXBpJyk7XG5pbXBvcnQgeyBTREsgfSBmcm9tICcuLi9hcGkvdXRpbC9zZGsnO1xuaW1wb3J0IHsgZGVidWcgfSBmcm9tICcuLi9sb2dnaW5nJztcbmltcG9ydCB7IENvbnRleHQgfSBmcm9tICcuLi9zZXR0aW5ncyc7XG5pbXBvcnQgeyBBWkNvbnRleHRQcm92aWRlclBsdWdpbiB9IGZyb20gJy4vYXZhaWxhYmlsaXR5LXpvbmVzJztcbmltcG9ydCB7IEhvc3RlZFpvbmVDb250ZXh0UHJvdmlkZXJQbHVnaW4gfSBmcm9tICcuL2hvc3RlZC16b25lcyc7XG5pbXBvcnQgeyBDb250ZXh0UHJvdmlkZXJQbHVnaW4gfSBmcm9tICcuL3Byb3ZpZGVyJztcbmltcG9ydCB7IFNTTUNvbnRleHRQcm92aWRlclBsdWdpbiB9IGZyb20gJy4vc3NtLXBhcmFtZXRlcnMnO1xuaW1wb3J0IHsgVnBjTmV0d29ya0NvbnRleHRQcm92aWRlclBsdWdpbiB9IGZyb20gJy4vdnBjcyc7XG5cbnR5cGUgUHJvdmlkZXJDb25zdHJ1Y3RvciA9ICAobmV3IChzZGs6IFNESykgPT4gQ29udGV4dFByb3ZpZGVyUGx1Z2luKTtcbmV4cG9ydCB0eXBlIFByb3ZpZGVyTWFwID0ge1tuYW1lOiBzdHJpbmddOiBQcm92aWRlckNvbnN0cnVjdG9yfTtcblxuLyoqXG4gKiBJdGVyYXRlIG92ZXIgdGhlIGxpc3Qgb2YgbWlzc2luZyBjb250ZXh0IHZhbHVlcyBhbmQgaW52b2tlIHRoZSBhcHByb3ByaWF0ZSBwcm92aWRlcnMgZnJvbSB0aGUgbWFwIHRvIHJldHJpZXZlIHRoZW1cbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHByb3ZpZGVDb250ZXh0VmFsdWVzKFxuICBtaXNzaW5nVmFsdWVzOiB7IFtrZXk6IHN0cmluZ106IGN4YXBpLk1pc3NpbmdDb250ZXh0IH0sXG4gIGNvbnRleHQ6IENvbnRleHQsXG4gIHNkazogU0RLKSB7XG4gIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKG1pc3NpbmdWYWx1ZXMpKSB7XG4gICAgY29uc3QgbWlzc2luZ0NvbnRleHQgPSBtaXNzaW5nVmFsdWVzW2tleV07XG5cbiAgICBjb25zdCBjb25zdHJ1Y3RvciA9IGF2YWlsYWJsZUNvbnRleHRQcm92aWRlcnNbbWlzc2luZ0NvbnRleHQucHJvdmlkZXJdO1xuICAgIGlmICghY29uc3RydWN0b3IpIHtcbiAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTptYXgtbGluZS1sZW5ndGhcbiAgICAgIHRocm93IG5ldyBFcnJvcihgVW5yZWNvZ25pemVkIGNvbnRleHQgcHJvdmlkZXIgbmFtZTogJHttaXNzaW5nQ29udGV4dC5wcm92aWRlcn0uIFlvdSBtaWdodCBuZWVkIHRvIHVwZGF0ZSB0aGUgdG9vbGtpdCB0byBtYXRjaCB0aGUgdmVyc2lvbiBvZiB0aGUgY29uc3RydWN0IGxpYnJhcnkuYCk7XG4gICAgfVxuXG4gICAgY29uc3QgcHJvdmlkZXIgPSBuZXcgY29uc3RydWN0b3Ioc2RrKTtcblxuICAgIGNvbnN0IHZhbHVlID0gYXdhaXQgcHJvdmlkZXIuZ2V0VmFsdWUobWlzc2luZ0NvbnRleHQucHJvcHMpO1xuICAgIGNvbnRleHQuc2V0KGtleSwgdmFsdWUpO1xuICAgIGRlYnVnKGBTZXR0aW5nIFwiJHtrZXl9XCIgY29udGV4dCB0byAke0pTT04uc3RyaW5naWZ5KHZhbHVlKX1gKTtcbiAgfVxufVxuXG5jb25zdCBhdmFpbGFibGVDb250ZXh0UHJvdmlkZXJzOiBQcm92aWRlck1hcCA9IHtcbiAgW2N4YXBpLkFWQUlMQUJJTElUWV9aT05FX1BST1ZJREVSXTogQVpDb250ZXh0UHJvdmlkZXJQbHVnaW4sXG4gIFtjeGFwaS5TU01fUEFSQU1FVEVSX1BST1ZJREVSXTogU1NNQ29udGV4dFByb3ZpZGVyUGx1Z2luLFxuICBbY3hhcGkuSE9TVEVEX1pPTkVfUFJPVklERVJdOiBIb3N0ZWRab25lQ29udGV4dFByb3ZpZGVyUGx1Z2luLFxuICBbY3hhcGkuVlBDX1BST1ZJREVSXTogVnBjTmV0d29ya0NvbnRleHRQcm92aWRlclBsdWdpbixcbn07XG4iXX0=