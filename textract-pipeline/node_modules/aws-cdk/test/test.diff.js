"use strict";
const stream_1 = require("stream");
const string_decoder_1 = require("string_decoder");
const stacks_1 = require("../lib/api/cxapp/stacks");
const sdk_1 = require("../lib/api/util/sdk");
const cdk_toolkit_1 = require("../lib/cdk-toolkit");
const settings_1 = require("../lib/settings");
const FIXED_RESULT = {
    version: '1',
    stacks: [
        {
            name: 'A',
            template: { resource: 'A' },
            environment: { name: 'dev', account: '12345', region: 'here' },
            metadata: {},
        },
        {
            name: 'B',
            template: { resource: 'B' },
            environment: { name: 'dev', account: '12345', region: 'here' },
            metadata: {},
            dependsOn: ['A'],
        }
    ]
};
const appStacks = new stacks_1.AppStacks({
    configuration: new settings_1.Configuration(),
    aws: new sdk_1.SDK(),
    synthesizer: async () => FIXED_RESULT,
});
class StringWritable extends stream_1.Writable {
    constructor(options = {}) {
        super(options);
        this._decoder = new string_decoder_1.StringDecoder(options && options.defaultEncoding);
        this.data = '';
    }
    _write(chunk, encoding, callback) {
        if (encoding === 'buffer') {
            chunk = this._decoder.write(chunk);
        }
        this.data += chunk;
        callback();
    }
    _final(callback) {
        this.data += this._decoder.end();
        callback();
    }
}
module.exports = {
    async 'diff can diff multiple stacks'(test) {
        // GIVEN
        const provisioner = {
            async readCurrentTemplate(_stack) {
                return {};
            },
            async deployStack(_options) {
                return { noOp: true, outputs: {}, stackArn: '' };
            }
        };
        const toolkit = new cdk_toolkit_1.CdkToolkit({ appStacks, provisioner });
        const buffer = new StringWritable();
        // WHEN
        const exitCode = await toolkit.diff({
            stackNames: ['B'],
            stream: buffer
        });
        // THEN
        const plainTextOutput = buffer.data.replace(/\x1B\[[0-?]*[ -/]*[@-~]/g, '');
        test.ok(plainTextOutput.indexOf('Stack A') > -1, `Did not contain "Stack A": ${plainTextOutput}`);
        test.ok(plainTextOutput.indexOf('Stack B') > -1, `Did not contain "Stack B": ${plainTextOutput}`);
        test.equals(1, exitCode);
        test.done();
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC5kaWZmLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidGVzdC5kaWZmLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFFQSxtQ0FBa0M7QUFDbEMsbURBQW1FO0FBRW5FLG9EQUFvRDtBQUVwRCw2Q0FBMEM7QUFDMUMsb0RBQWdEO0FBQ2hELDhDQUFnRDtBQUVoRCxNQUFNLFlBQVksR0FBNkI7SUFDN0MsT0FBTyxFQUFFLEdBQUc7SUFDWixNQUFNLEVBQUU7UUFDTjtZQUNFLElBQUksRUFBRSxHQUFHO1lBQ1QsUUFBUSxFQUFFLEVBQUUsUUFBUSxFQUFFLEdBQUcsRUFBRTtZQUMzQixXQUFXLEVBQUUsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRTtZQUM5RCxRQUFRLEVBQUUsRUFBRTtTQUNiO1FBQ0Q7WUFDRSxJQUFJLEVBQUUsR0FBRztZQUNULFFBQVEsRUFBRSxFQUFFLFFBQVEsRUFBRSxHQUFHLEVBQUU7WUFDM0IsV0FBVyxFQUFFLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUU7WUFDOUQsUUFBUSxFQUFFLEVBQUU7WUFDWixTQUFTLEVBQUUsQ0FBQyxHQUFHLENBQUM7U0FDakI7S0FDRjtDQUNGLENBQUM7QUFFRixNQUFNLFNBQVMsR0FBRyxJQUFJLGtCQUFTLENBQUM7SUFDOUIsYUFBYSxFQUFFLElBQUksd0JBQWEsRUFBRTtJQUNsQyxHQUFHLEVBQUUsSUFBSSxTQUFHLEVBQUU7SUFDZCxXQUFXLEVBQUUsS0FBSyxJQUFJLEVBQUUsQ0FBQyxZQUFZO0NBQ3RDLENBQUMsQ0FBQztBQWlDSCxNQUFNLGNBQWUsU0FBUSxpQkFBUTtJQUluQyxZQUFZLFVBQWUsRUFBRTtRQUMzQixLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDZixJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksOEJBQWEsQ0FBQyxPQUFPLElBQUksT0FBTyxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBQ3RFLElBQUksQ0FBQyxJQUFJLEdBQUcsRUFBRSxDQUFDO0lBQ2pCLENBQUM7SUFFTSxNQUFNLENBQUMsS0FBVSxFQUFFLFFBQWdCLEVBQUUsUUFBNkM7UUFDdkYsSUFBSSxRQUFRLEtBQUssUUFBUSxFQUFFO1lBQ3pCLEtBQUssR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUNwQztRQUNELElBQUksQ0FBQyxJQUFJLElBQUksS0FBSyxDQUFDO1FBQ25CLFFBQVEsRUFBRSxDQUFDO0lBQ2IsQ0FBQztJQUVNLE1BQU0sQ0FBQyxRQUF3QztRQUNwRCxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDakMsUUFBUSxFQUFFLENBQUM7SUFDYixDQUFDO0NBQ0Y7QUFyREQsaUJBQVM7SUFDUCxLQUFLLENBQUMsK0JBQStCLENBQUMsSUFBVTtRQUM5QyxRQUFRO1FBQ1IsTUFBTSxXQUFXLEdBQXNCO1lBQ3JDLEtBQUssQ0FBQyxtQkFBbUIsQ0FBQyxNQUE4QjtnQkFDdEQsT0FBTyxFQUFFLENBQUM7WUFDWixDQUFDO1lBQ0QsS0FBSyxDQUFDLFdBQVcsQ0FBQyxRQUE0QjtnQkFDNUMsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLEVBQUUsRUFBRSxRQUFRLEVBQUUsRUFBRSxFQUFDLENBQUM7WUFDbEQsQ0FBQztTQUNGLENBQUM7UUFDRixNQUFNLE9BQU8sR0FBRyxJQUFJLHdCQUFVLENBQUMsRUFBRSxTQUFTLEVBQUUsV0FBVyxFQUFFLENBQUMsQ0FBQztRQUMzRCxNQUFNLE1BQU0sR0FBRyxJQUFJLGNBQWMsRUFBRSxDQUFDO1FBRXBDLE9BQU87UUFDUCxNQUFNLFFBQVEsR0FBRyxNQUFNLE9BQU8sQ0FBQyxJQUFJLENBQUM7WUFDbEMsVUFBVSxFQUFFLENBQUMsR0FBRyxDQUFDO1lBQ2pCLE1BQU0sRUFBRSxNQUFNO1NBQ2YsQ0FBQyxDQUFDO1FBRUgsT0FBTztRQUNQLE1BQU0sZUFBZSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLDBCQUEwQixFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQzVFLElBQUksQ0FBQyxFQUFFLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSw4QkFBOEIsZUFBZSxFQUFFLENBQUMsQ0FBQztRQUNsRyxJQUFJLENBQUMsRUFBRSxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsOEJBQThCLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFFbEcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFFekIsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ2QsQ0FBQztDQUNGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY3hhcGkgPSByZXF1aXJlKCdAYXdzLWNkay9jeC1hcGknKTtcbmltcG9ydCB7IFRlc3QgfSBmcm9tICdub2RldW5pdCc7XG5pbXBvcnQgeyBXcml0YWJsZSB9IGZyb20gJ3N0cmVhbSc7XG5pbXBvcnQgeyBOb2RlU3RyaW5nRGVjb2RlciwgU3RyaW5nRGVjb2RlciAgfSBmcm9tICdzdHJpbmdfZGVjb2Rlcic7XG5pbXBvcnQgeyBEZXBsb3lTdGFja09wdGlvbnMsIERlcGxveVN0YWNrUmVzdWx0IH0gZnJvbSAnLi4vbGliJztcbmltcG9ydCB7IEFwcFN0YWNrcyB9IGZyb20gJy4uL2xpYi9hcGkvY3hhcHAvc3RhY2tzJztcbmltcG9ydCB7IElEZXBsb3ltZW50VGFyZ2V0LCBUZW1wbGF0ZSB9IGZyb20gJy4uL2xpYi9hcGkvZGVwbG95bWVudC10YXJnZXQnO1xuaW1wb3J0IHsgU0RLIH0gZnJvbSAnLi4vbGliL2FwaS91dGlsL3Nkayc7XG5pbXBvcnQgeyBDZGtUb29sa2l0IH0gZnJvbSAnLi4vbGliL2Nkay10b29sa2l0JztcbmltcG9ydCB7IENvbmZpZ3VyYXRpb24gfSBmcm9tICcuLi9saWIvc2V0dGluZ3MnO1xuXG5jb25zdCBGSVhFRF9SRVNVTFQ6IGN4YXBpLlN5bnRoZXNpemVSZXNwb25zZSA9IHtcbiAgdmVyc2lvbjogJzEnLFxuICBzdGFja3M6IFtcbiAgICB7XG4gICAgICBuYW1lOiAnQScsXG4gICAgICB0ZW1wbGF0ZTogeyByZXNvdXJjZTogJ0EnIH0sXG4gICAgICBlbnZpcm9ubWVudDogeyBuYW1lOiAnZGV2JywgYWNjb3VudDogJzEyMzQ1JywgcmVnaW9uOiAnaGVyZScgfSxcbiAgICAgIG1ldGFkYXRhOiB7fSxcbiAgICB9LFxuICAgIHtcbiAgICAgIG5hbWU6ICdCJyxcbiAgICAgIHRlbXBsYXRlOiB7IHJlc291cmNlOiAnQicgfSxcbiAgICAgIGVudmlyb25tZW50OiB7IG5hbWU6ICdkZXYnLCBhY2NvdW50OiAnMTIzNDUnLCByZWdpb246ICdoZXJlJyB9LFxuICAgICAgbWV0YWRhdGE6IHt9LFxuICAgICAgZGVwZW5kc09uOiBbJ0EnXSxcbiAgICB9XG4gIF1cbn07XG5cbmNvbnN0IGFwcFN0YWNrcyA9IG5ldyBBcHBTdGFja3Moe1xuICBjb25maWd1cmF0aW9uOiBuZXcgQ29uZmlndXJhdGlvbigpLFxuICBhd3M6IG5ldyBTREsoKSxcbiAgc3ludGhlc2l6ZXI6IGFzeW5jICgpID0+IEZJWEVEX1JFU1VMVCxcbn0pO1xuXG5leHBvcnQgPSB7XG4gIGFzeW5jICdkaWZmIGNhbiBkaWZmIG11bHRpcGxlIHN0YWNrcycodGVzdDogVGVzdCkge1xuICAgIC8vIEdJVkVOXG4gICAgY29uc3QgcHJvdmlzaW9uZXI6IElEZXBsb3ltZW50VGFyZ2V0ID0ge1xuICAgICAgYXN5bmMgcmVhZEN1cnJlbnRUZW1wbGF0ZShfc3RhY2s6IGN4YXBpLlN5bnRoZXNpemVkU3RhY2spOiBQcm9taXNlPFRlbXBsYXRlPiB7XG4gICAgICAgIHJldHVybiB7fTtcbiAgICAgIH0sXG4gICAgICBhc3luYyBkZXBsb3lTdGFjayhfb3B0aW9uczogRGVwbG95U3RhY2tPcHRpb25zKTogUHJvbWlzZTxEZXBsb3lTdGFja1Jlc3VsdD4ge1xuICAgICAgICByZXR1cm4geyBub09wOiB0cnVlLCBvdXRwdXRzOiB7fSwgc3RhY2tBcm46ICcnfTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IHRvb2xraXQgPSBuZXcgQ2RrVG9vbGtpdCh7IGFwcFN0YWNrcywgcHJvdmlzaW9uZXIgfSk7XG4gICAgY29uc3QgYnVmZmVyID0gbmV3IFN0cmluZ1dyaXRhYmxlKCk7XG5cbiAgICAvLyBXSEVOXG4gICAgY29uc3QgZXhpdENvZGUgPSBhd2FpdCB0b29sa2l0LmRpZmYoe1xuICAgICAgc3RhY2tOYW1lczogWydCJ10sXG4gICAgICBzdHJlYW06IGJ1ZmZlclxuICAgIH0pO1xuXG4gICAgLy8gVEhFTlxuICAgIGNvbnN0IHBsYWluVGV4dE91dHB1dCA9IGJ1ZmZlci5kYXRhLnJlcGxhY2UoL1xceDFCXFxbWzAtP10qWyAtL10qW0Atfl0vZywgJycpO1xuICAgIHRlc3Qub2socGxhaW5UZXh0T3V0cHV0LmluZGV4T2YoJ1N0YWNrIEEnKSA+IC0xLCBgRGlkIG5vdCBjb250YWluIFwiU3RhY2sgQVwiOiAke3BsYWluVGV4dE91dHB1dH1gKTtcbiAgICB0ZXN0Lm9rKHBsYWluVGV4dE91dHB1dC5pbmRleE9mKCdTdGFjayBCJykgPiAtMSwgYERpZCBub3QgY29udGFpbiBcIlN0YWNrIEJcIjogJHtwbGFpblRleHRPdXRwdXR9YCk7XG5cbiAgICB0ZXN0LmVxdWFscygxLCBleGl0Q29kZSk7XG5cbiAgICB0ZXN0LmRvbmUoKTtcbiAgfSxcbn07XG5cbmNsYXNzIFN0cmluZ1dyaXRhYmxlIGV4dGVuZHMgV3JpdGFibGUge1xuICBwdWJsaWMgZGF0YTogc3RyaW5nO1xuICBwcml2YXRlIHJlYWRvbmx5IF9kZWNvZGVyOiBOb2RlU3RyaW5nRGVjb2RlcjtcblxuICBjb25zdHJ1Y3RvcihvcHRpb25zOiBhbnkgPSB7fSkge1xuICAgIHN1cGVyKG9wdGlvbnMpO1xuICAgIHRoaXMuX2RlY29kZXIgPSBuZXcgU3RyaW5nRGVjb2RlcihvcHRpb25zICYmIG9wdGlvbnMuZGVmYXVsdEVuY29kaW5nKTtcbiAgICB0aGlzLmRhdGEgPSAnJztcbiAgfVxuXG4gIHB1YmxpYyBfd3JpdGUoY2h1bms6IGFueSwgZW5jb2Rpbmc6IHN0cmluZywgY2FsbGJhY2s6IChlcnJvcj86IEVycm9yIHwgdW5kZWZpbmVkKSA9PiB2b2lkKSB7XG4gICAgaWYgKGVuY29kaW5nID09PSAnYnVmZmVyJykge1xuICAgICAgY2h1bmsgPSB0aGlzLl9kZWNvZGVyLndyaXRlKGNodW5rKTtcbiAgICB9XG4gICAgdGhpcy5kYXRhICs9IGNodW5rO1xuICAgIGNhbGxiYWNrKCk7XG4gIH1cblxuICBwdWJsaWMgX2ZpbmFsKGNhbGxiYWNrOiAoZXJyb3I/OiBFcnJvciB8IG51bGwpID0+IHZvaWQpIHtcbiAgICB0aGlzLmRhdGEgKz0gdGhpcy5fZGVjb2Rlci5lbmQoKTtcbiAgICBjYWxsYmFjaygpO1xuICB9XG59XG4iXX0=