"use strict";
const assets_1 = require("../lib/assets");
class FakeToolkit {
    constructor() {
        this.bucketUrl = 'https://bucket';
        this.bucketName = 'bucket';
    }
    async uploadIfChanged(_data, props) {
        const filename = `12345${props.s3KeySuffix}`;
        return {
            filename,
            changed: true,
            key: `${props.s3KeyPrefix}${filename}`
        };
    }
}
module.exports = {
    async 'prepare assets'(test) {
        // GIVEN
        const stack = {
            name: 'SomeStack',
            environment: {
                name: 'myenv',
                account: 'myaccount',
                region: 'myregion'
            },
            metadata: {
                '/SomeStack/SomeResource': [{
                        type: 'aws:cdk:asset',
                        data: {
                            path: __filename,
                            id: 'SomeStackSomeResource4567',
                            packaging: 'file',
                            s3BucketParameter: 'BucketParameter',
                            s3KeyParameter: 'KeyParameter'
                        },
                        trace: []
                    }]
            },
            template: {
                Resources: {
                    SomeResource: {
                        Type: 'AWS::Something::Something'
                    }
                }
            }
        };
        const toolkit = new FakeToolkit();
        // WHEN
        const params = await assets_1.prepareAssets(stack, toolkit);
        // THEN
        test.deepEqual(params, [
            { ParameterKey: 'BucketParameter', ParameterValue: 'bucket' },
            { ParameterKey: 'KeyParameter', ParameterValue: 'assets/SomeStackSomeResource4567/||12345.js' },
        ]);
        test.done();
    },
    async 'prepare assets with reuse'(test) {
        // GIVEN
        const stack = {
            name: 'SomeStack',
            environment: {
                name: 'myenv',
                account: 'myaccount',
                region: 'myregion'
            },
            metadata: {
                '/SomeStack/SomeResource': [{
                        type: 'aws:cdk:asset',
                        data: {
                            path: __filename,
                            id: 'SomeStackSomeResource4567',
                            packaging: 'file',
                            s3BucketParameter: 'BucketParameter',
                            s3KeyParameter: 'KeyParameter'
                        },
                        trace: []
                    }]
            },
            template: {
                Resources: {
                    SomeResource: {
                        Type: 'AWS::Something::Something'
                    }
                }
            }
        };
        const toolkit = new FakeToolkit();
        // WHEN
        const params = await assets_1.prepareAssets(stack, toolkit, undefined, ['SomeStackSomeResource4567']);
        // THEN
        test.deepEqual(params, [
            { ParameterKey: 'BucketParameter', UsePreviousValue: true },
            { ParameterKey: 'KeyParameter', UsePreviousValue: true },
        ]);
        test.done();
    },
    async 'prepare container asset with reuse'(test) {
        // GIVEN
        const stack = {
            name: 'SomeStack',
            environment: { name: 'myenv', account: 'myaccount', region: 'myregion' },
            metadata: {
                '/SomeStack/SomeResource': [{
                        type: 'aws:cdk:asset',
                        data: {
                            path: __dirname,
                            id: 'SomeStackSomeResource4567',
                            packaging: 'container-image',
                            imageNameParameter: 'asdf'
                        },
                        trace: []
                    }]
            },
            template: {
                Resources: {
                    SomeResource: {
                        Type: 'AWS::Something::Something'
                    }
                }
            }
        };
        const toolkit = new FakeToolkit();
        // WHEN
        const params = await assets_1.prepareAssets(stack, toolkit, undefined, ['SomeStackSomeResource4567']);
        // THEN
        test.deepEqual(params, [
            { ParameterKey: 'asdf', UsePreviousValue: true },
        ]);
        test.done();
    }
};
//# sourceMappingURL=data:application/json;base64,