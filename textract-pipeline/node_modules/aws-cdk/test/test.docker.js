"use strict";
const lib_1 = require("../lib");
const docker_1 = require("../lib/docker");
const mock_sdk_1 = require("./util/mock-sdk");
module.exports = {
    async 'creates repository with given name'(test) {
        // GIVEN
        let createdName;
        const sdk = new mock_sdk_1.MockSDK();
        sdk.stubEcr({
            describeRepositories() {
                return { repositories: [] };
            },
            createRepository(req) {
                createdName = req.repositoryName;
                // Stop the test so that we don't actually docker build
                throw new Error('STOPTEST');
            },
        });
        const toolkit = new lib_1.ToolkitInfo({
            sdk,
            bucketName: 'BUCKET_NAME',
            bucketEndpoint: 'BUCKET_ENDPOINT',
            environment: { name: 'env', account: '1234', region: 'abc' }
        });
        // WHEN
        const asset = {
            id: 'assetId',
            imageNameParameter: 'MyParameter',
            packaging: 'container-image',
            path: '/foo',
            repositoryName: 'some-name',
        };
        try {
            await docker_1.prepareContainerAsset(asset, toolkit, false);
        }
        catch (e) {
            if (!/STOPTEST/.test(e.toString())) {
                throw e;
            }
        }
        // THEN
        test.deepEqual(createdName, 'some-name');
        test.done();
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC5kb2NrZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ0ZXN0LmRvY2tlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBRUEsZ0NBQXFDO0FBQ3JDLDBDQUFzRDtBQUN0RCw4Q0FBMEM7QUFFMUMsaUJBQVM7SUFDUCxLQUFLLENBQUMsb0NBQW9DLENBQUMsSUFBVTtRQUNuRCxRQUFRO1FBRVIsSUFBSSxXQUFXLENBQUM7UUFFaEIsTUFBTSxHQUFHLEdBQUcsSUFBSSxrQkFBTyxFQUFFLENBQUM7UUFDMUIsR0FBRyxDQUFDLE9BQU8sQ0FBQztZQUNWLG9CQUFvQjtnQkFDbEIsT0FBTyxFQUFFLFlBQVksRUFBRSxFQUFFLEVBQUUsQ0FBQztZQUM5QixDQUFDO1lBRUQsZ0JBQWdCLENBQUMsR0FBRztnQkFDbEIsV0FBVyxHQUFHLEdBQUcsQ0FBQyxjQUFjLENBQUM7Z0JBRWpDLHVEQUF1RDtnQkFDdkQsTUFBTSxJQUFJLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQztZQUM5QixDQUFDO1NBQ0YsQ0FBQyxDQUFDO1FBRUgsTUFBTSxPQUFPLEdBQUcsSUFBSSxpQkFBVyxDQUFDO1lBQzlCLEdBQUc7WUFDSCxVQUFVLEVBQUUsYUFBYTtZQUN6QixjQUFjLEVBQUUsaUJBQWlCO1lBQ2pDLFdBQVcsRUFBRSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFO1NBQzdELENBQUMsQ0FBQztRQUVILE9BQU87UUFDUCxNQUFNLEtBQUssR0FBMkM7WUFDcEQsRUFBRSxFQUFFLFNBQVM7WUFDYixrQkFBa0IsRUFBRSxhQUFhO1lBQ2pDLFNBQVMsRUFBRSxpQkFBaUI7WUFDNUIsSUFBSSxFQUFFLE1BQU07WUFDWixjQUFjLEVBQUUsV0FBVztTQUM1QixDQUFDO1FBRUYsSUFBSTtZQUNGLE1BQU0sOEJBQXFCLENBQUMsS0FBSyxFQUFFLE9BQU8sRUFBRSxLQUFLLENBQUMsQ0FBQztTQUNwRDtRQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ1YsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLEVBQUU7Z0JBQUUsTUFBTSxDQUFDLENBQUM7YUFBRTtTQUNqRDtRQUVELE9BQU87UUFDUCxJQUFJLENBQUMsU0FBUyxDQUFDLFdBQVcsRUFBRSxXQUFXLENBQUMsQ0FBQztRQUV6QyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDZCxDQUFDO0NBQ0YsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjeGFwaSA9IHJlcXVpcmUoJ0Bhd3MtY2RrL2N4LWFwaScpO1xuaW1wb3J0IHsgVGVzdCB9IGZyb20gJ25vZGV1bml0JztcbmltcG9ydCB7IFRvb2xraXRJbmZvIH0gZnJvbSAnLi4vbGliJztcbmltcG9ydCB7IHByZXBhcmVDb250YWluZXJBc3NldCB9IGZyb20gJy4uL2xpYi9kb2NrZXInO1xuaW1wb3J0IHsgTW9ja1NESyB9IGZyb20gJy4vdXRpbC9tb2NrLXNkayc7XG5cbmV4cG9ydCA9IHtcbiAgYXN5bmMgJ2NyZWF0ZXMgcmVwb3NpdG9yeSB3aXRoIGdpdmVuIG5hbWUnKHRlc3Q6IFRlc3QpIHtcbiAgICAvLyBHSVZFTlxuXG4gICAgbGV0IGNyZWF0ZWROYW1lO1xuXG4gICAgY29uc3Qgc2RrID0gbmV3IE1vY2tTREsoKTtcbiAgICBzZGsuc3R1YkVjcih7XG4gICAgICBkZXNjcmliZVJlcG9zaXRvcmllcygpIHtcbiAgICAgICAgcmV0dXJuIHsgcmVwb3NpdG9yaWVzOiBbXSB9O1xuICAgICAgfSxcblxuICAgICAgY3JlYXRlUmVwb3NpdG9yeShyZXEpIHtcbiAgICAgICAgY3JlYXRlZE5hbWUgPSByZXEucmVwb3NpdG9yeU5hbWU7XG5cbiAgICAgICAgLy8gU3RvcCB0aGUgdGVzdCBzbyB0aGF0IHdlIGRvbid0IGFjdHVhbGx5IGRvY2tlciBidWlsZFxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1NUT1BURVNUJyk7XG4gICAgICB9LFxuICAgIH0pO1xuXG4gICAgY29uc3QgdG9vbGtpdCA9IG5ldyBUb29sa2l0SW5mbyh7XG4gICAgICBzZGssXG4gICAgICBidWNrZXROYW1lOiAnQlVDS0VUX05BTUUnLFxuICAgICAgYnVja2V0RW5kcG9pbnQ6ICdCVUNLRVRfRU5EUE9JTlQnLFxuICAgICAgZW52aXJvbm1lbnQ6IHsgbmFtZTogJ2VudicsIGFjY291bnQ6ICcxMjM0JywgcmVnaW9uOiAnYWJjJyB9XG4gICAgfSk7XG5cbiAgICAvLyBXSEVOXG4gICAgY29uc3QgYXNzZXQ6IGN4YXBpLkNvbnRhaW5lckltYWdlQXNzZXRNZXRhZGF0YUVudHJ5ID0ge1xuICAgICAgaWQ6ICdhc3NldElkJyxcbiAgICAgIGltYWdlTmFtZVBhcmFtZXRlcjogJ015UGFyYW1ldGVyJyxcbiAgICAgIHBhY2thZ2luZzogJ2NvbnRhaW5lci1pbWFnZScsXG4gICAgICBwYXRoOiAnL2ZvbycsXG4gICAgICByZXBvc2l0b3J5TmFtZTogJ3NvbWUtbmFtZScsXG4gICAgfTtcblxuICAgIHRyeSB7XG4gICAgICBhd2FpdCBwcmVwYXJlQ29udGFpbmVyQXNzZXQoYXNzZXQsIHRvb2xraXQsIGZhbHNlKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBpZiAoIS9TVE9QVEVTVC8udGVzdChlLnRvU3RyaW5nKCkpKSB7IHRocm93IGU7IH1cbiAgICB9XG5cbiAgICAvLyBUSEVOXG4gICAgdGVzdC5kZWVwRXF1YWwoY3JlYXRlZE5hbWUsICdzb21lLW5hbWUnKTtcblxuICAgIHRlc3QuZG9uZSgpO1xuICB9LFxufTsiXX0=