"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const iam = require("@aws-cdk/aws-iam");
const kms = require("@aws-cdk/aws-kms");
const logs = require("@aws-cdk/aws-logs");
const cdk = require("@aws-cdk/cdk");
const kinesis_generated_1 = require("./kinesis.generated");
/**
 * Represents a Kinesis Stream.
 *
 * Streams can be either defined within this stack:
 *
 *   new Stream(this, 'MyStream', { props });
 *
 * Or imported from an existing stream:
 *
 *   Stream.import(this, 'MyImportedStream', { streamArn: ... });
 *
 * You can also export a stream and import it into another stack:
 *
 *   const ref = myStream.export();
 *   Stream.import(this, 'MyImportedStream', ref);
 *
 */
class StreamBase extends cdk.Construct {
    /**
     * Grant write permissions for this stream and its contents to an IAM
     * principal (Role/Group/User).
     *
     * If an encryption key is used, permission to ues the key to decrypt the
     * contents of the stream will also be granted.
     */
    grantRead(grantee) {
        const ret = this.grant(grantee, 'kinesis:DescribeStream', 'kinesis:GetRecords', 'kinesis:GetShardIterator');
        if (this.encryptionKey) {
            this.encryptionKey.grantDecrypt(grantee);
        }
        return ret;
    }
    /**
     * Grant read permissions for this stream and its contents to an IAM
     * principal (Role/Group/User).
     *
     * If an encryption key is used, permission to ues the key to decrypt the
     * contents of the stream will also be granted.
     */
    grantWrite(grantee) {
        const ret = this.grant(grantee, 'kinesis:DescribeStream', 'kinesis:PutRecord', 'kinesis:PutRecords');
        if (this.encryptionKey) {
            this.encryptionKey.grantEncrypt(grantee);
        }
        return ret;
    }
    /**
     * Grants read/write permissions for this stream and its contents to an IAM
     * principal (Role/Group/User).
     *
     * If an encryption key is used, permission to use the key for
     * encrypt/decrypt will also be granted.
     */
    grantReadWrite(grantee) {
        const ret = this.grant(grantee, 'kinesis:DescribeStream', 'kinesis:GetRecords', 'kinesis:GetShardIterator', 'kinesis:PutRecord', 'kinesis:PutRecords');
        if (this.encryptionKey) {
            this.encryptionKey.grantEncryptDecrypt(grantee);
        }
        return ret;
    }
    logSubscriptionDestination(sourceLogGroup) {
        // Following example from https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/SubscriptionFilters.html#DestinationKinesisExample
        if (!this.cloudWatchLogsRole) {
            // Create a role to be assumed by CWL that can write to this stream and pass itself.
            this.cloudWatchLogsRole = new iam.Role(this, 'CloudWatchLogsCanPutRecords', {
                assumedBy: new iam.ServicePrincipal(`logs.${this.node.stack.region}.amazonaws.com`)
            });
            this.cloudWatchLogsRole.addToPolicy(new iam.PolicyStatement().addAction('kinesis:PutRecord').addResource(this.streamArn));
            this.cloudWatchLogsRole.addToPolicy(new iam.PolicyStatement().addAction('iam:PassRole').addResource(this.cloudWatchLogsRole.roleArn));
        }
        // We've now made it possible for CloudWatch events to write to us. In case the LogGroup is in a
        // different account, we must add a Destination in between as well.
        const sourceStack = sourceLogGroup.node.stack;
        const thisStack = this.node.stack;
        // Case considered: if both accounts are undefined, we can't make any assumptions. Better
        // to assume we don't need to do anything special.
        const sameAccount = sourceStack.env.account === thisStack.env.account;
        if (!sameAccount) {
            return this.crossAccountLogSubscriptionDestination(sourceLogGroup);
        }
        return { arn: this.streamArn, role: this.cloudWatchLogsRole };
    }
    /**
     * Generate a CloudWatch Logs Destination and return the properties in the form o a subscription destination
     */
    crossAccountLogSubscriptionDestination(sourceLogGroup) {
        const sourceLogGroupConstruct = sourceLogGroup;
        const sourceStack = sourceLogGroupConstruct.node.stack;
        const thisStack = this.node.stack;
        if (!sourceStack.env.account || !thisStack.env.account) {
            throw new Error('SubscriptionFilter stack and Destination stack must either both have accounts defined, or both not have accounts');
        }
        // Take some effort to construct a unique ID for the destination that is unique to the
        // combination of (stream, loggroup).
        const uniqueId = new cdk.HashedAddressingScheme().allocateAddress([
            sourceLogGroupConstruct.node.path.replace('/', ''),
            sourceStack.env.account
        ]);
        // The destination lives in the target account
        const dest = new logs.CrossAccountDestination(this, `CWLDestination${uniqueId}`, {
            targetArn: this.streamArn,
            role: this.cloudWatchLogsRole
        });
        dest.addToPolicy(new iam.PolicyStatement()
            .addAction('logs:PutSubscriptionFilter')
            .addAwsAccountPrincipal(sourceStack.env.account)
            .addAllResources());
        return dest.logSubscriptionDestination(sourceLogGroup);
    }
    grant(grantee, ...actions) {
        return iam.Grant.addToPrincipal({
            grantee,
            actions,
            resourceArns: [this.streamArn],
            scope: this,
        });
    }
}
exports.StreamBase = StreamBase;
/**
 * A Kinesis stream. Can be encrypted with a KMS key.
 */
class Stream extends StreamBase {
    /**
     * Creates a Stream construct that represents an external stream.
     *
     * @param scope The parent creating construct (usually `this`).
     * @param id The construct's name.
     * @param ref A `StreamAttributes` object. Can be obtained from a call to
     * `stream.export()`.
     */
    static import(scope, id, props) {
        return new ImportedStream(scope, id, props);
    }
    constructor(scope, id, props = {}) {
        super(scope, id);
        const shardCount = props.shardCount || 1;
        const retentionPeriodHours = props.retentionPeriodHours || 24;
        if (retentionPeriodHours < 24 && retentionPeriodHours > 168) {
            throw new Error("retentionPeriodHours must be between 24 and 168 hours");
        }
        const { streamEncryption, encryptionKey } = this.parseEncryption(props);
        this.stream = new kinesis_generated_1.CfnStream(this, "Resource", {
            name: props.streamName,
            retentionPeriodHours,
            shardCount,
            streamEncryption
        });
        this.streamArn = this.stream.streamArn;
        this.streamName = this.stream.streamId;
        this.encryptionKey = encryptionKey;
        if (props.streamName) {
            this.node.addMetadata('aws:cdk:hasPhysicalName', props.streamName);
        }
    }
    /**
     * Exports this stream from the stack.
     */
    export() {
        return {
            streamArn: new cdk.CfnOutput(this, 'StreamArn', { value: this.streamArn }).makeImportValue().toString(),
            encryptionKey: this.encryptionKey ? this.encryptionKey.export() : undefined,
        };
    }
    /**
     * Set up key properties and return the Stream encryption property from the
     * user's configuration.
     */
    parseEncryption(props) {
        // default to unencrypted.
        const encryptionType = props.encryption || StreamEncryption.Unencrypted;
        // if encryption key is set, encryption must be set to KMS.
        if (encryptionType !== StreamEncryption.Kms && props.encryptionKey) {
            throw new Error(`encryptionKey is specified, so 'encryption' must be set to KMS (value: ${encryptionType})`);
        }
        if (encryptionType === StreamEncryption.Unencrypted) {
            return { streamEncryption: undefined, encryptionKey: undefined };
        }
        if (encryptionType === StreamEncryption.Kms) {
            const encryptionKey = props.encryptionKey || new kms.EncryptionKey(this, 'Key', {
                description: `Created by ${this.node.path}`
            });
            const streamEncryption = {
                encryptionType: 'KMS',
                keyId: encryptionKey.keyArn
            };
            return { encryptionKey, streamEncryption };
        }
        throw new Error(`Unexpected 'encryptionType': ${encryptionType}`);
    }
}
exports.Stream = Stream;
/**
 * What kind of server-side encryption to apply to this stream
 */
var StreamEncryption;
(function (StreamEncryption) {
    /**
     * Records in the stream are not encrypted.
     */
    StreamEncryption["Unencrypted"] = "NONE";
    /**
     * Server-side encryption with a KMS key managed by the user.
     * If `encryptionKey` is specified, this key will be used, otherwise, one will be defined.
     */
    StreamEncryption["Kms"] = "KMS";
})(StreamEncryption = exports.StreamEncryption || (exports.StreamEncryption = {}));
class ImportedStream extends StreamBase {
    constructor(scope, id, props) {
        super(scope, id);
        this.props = props;
        this.streamArn = props.streamArn;
        // Get the name from the ARN
        this.streamName = this.node.stack.parseArn(props.streamArn).resourceName;
        if (props.encryptionKey) {
            // TODO: import "scope" should be changed to "this"
            this.encryptionKey = kms.EncryptionKey.import(scope, 'Key', props.encryptionKey);
        }
        else {
            this.encryptionKey = undefined;
        }
    }
    export() {
        return this.props;
    }
}
//# sourceMappingURL=data:application/json;base64,