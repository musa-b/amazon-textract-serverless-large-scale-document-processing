"use strict";
const assert_1 = require("@aws-cdk/assert");
const logs = require("@aws-cdk/aws-logs");
const cdk = require("@aws-cdk/cdk");
const lib_1 = require("../lib");
module.exports = {
    'stream can be subscription destination'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        const stream = new lib_1.Stream(stack, 'MyStream');
        const logGroup = new logs.LogGroup(stack, 'LogGroup');
        // WHEN
        new logs.SubscriptionFilter(stack, 'Subscription', {
            logGroup,
            destination: stream,
            filterPattern: logs.FilterPattern.allEvents()
        });
        // THEN: subscription target is Stream
        assert_1.expect(stack).to(assert_1.haveResource('AWS::Logs::SubscriptionFilter', {
            DestinationArn: { "Fn::GetAtt": ["MyStream5C050E93", "Arn"] },
            RoleArn: { "Fn::GetAtt": ["MyStreamCloudWatchLogsCanPutRecords58498490", "Arn"] },
        }));
        // THEN: we have a role to write to the Lambda
        assert_1.expect(stack).to(assert_1.haveResource('AWS::IAM::Role', {
            AssumeRolePolicyDocument: {
                Version: '2012-10-17',
                Statement: [{
                        Action: "sts:AssumeRole",
                        Effect: 'Allow',
                        Principal: { Service: { "Fn::Join": ["", ["logs.", { Ref: "AWS::Region" }, ".amazonaws.com"]] } }
                    }],
            }
        }));
        assert_1.expect(stack).to(assert_1.haveResource('AWS::IAM::Policy', {
            PolicyDocument: {
                Version: '2012-10-17',
                Statement: [
                    {
                        Action: "kinesis:PutRecord",
                        Effect: "Allow",
                        Resource: { "Fn::GetAtt": ["MyStream5C050E93", "Arn"] }
                    },
                    {
                        Action: "iam:PassRole",
                        Effect: "Allow",
                        Resource: { "Fn::GetAtt": ["MyStreamCloudWatchLogsCanPutRecords58498490", "Arn"] }
                    }
                ],
            }
        }));
        test.done();
    },
    'cross-account stream can be subscription destination with Destination'(test) {
        // GIVEN
        const sourceStack = new cdk.Stack(undefined, undefined, { env: { account: '12345' } });
        const logGroup = new logs.LogGroup(sourceStack, 'LogGroup');
        const destStack = new cdk.Stack(undefined, undefined, { env: { account: '67890' } });
        const stream = new lib_1.Stream(destStack, 'MyStream');
        // WHEN
        new logs.SubscriptionFilter(sourceStack, 'Subscription', {
            logGroup,
            destination: stream,
            filterPattern: logs.FilterPattern.allEvents()
        });
        // THEN: the source stack has a Destination object that the subscription points to
        assert_1.expect(destStack).to(assert_1.haveResource('AWS::Logs::Destination', {
            TargetArn: { "Fn::GetAtt": ["MyStream5C050E93", "Arn"] },
            RoleArn: { "Fn::GetAtt": ["MyStreamCloudWatchLogsCanPutRecords58498490", "Arn"] },
        }));
        test.done();
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC5zdWJzY3JpcHRpb25kZXN0aW5hdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInRlc3Quc3Vic2NyaXB0aW9uZGVzdGluYXRpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLDRDQUF1RDtBQUN2RCwwQ0FBMkM7QUFDM0Msb0NBQXFDO0FBRXJDLGdDQUFnQztBQUVoQyxpQkFBUztJQUNQLHdDQUF3QyxDQUFDLElBQVU7UUFDakQsUUFBUTtRQUNSLE1BQU0sS0FBSyxHQUFHLElBQUksR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQzlCLE1BQU0sTUFBTSxHQUFHLElBQUksWUFBTSxDQUFDLEtBQUssRUFBRSxVQUFVLENBQUMsQ0FBQztRQUM3QyxNQUFNLFFBQVEsR0FBRyxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLFVBQVUsQ0FBQyxDQUFDO1FBRXRELE9BQU87UUFDUCxJQUFJLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxLQUFLLEVBQUUsY0FBYyxFQUFFO1lBQ2pELFFBQVE7WUFDUixXQUFXLEVBQUUsTUFBTTtZQUNuQixhQUFhLEVBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxTQUFTLEVBQUU7U0FDOUMsQ0FBQyxDQUFDO1FBRUgsc0NBQXNDO1FBQ3RDLGVBQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMscUJBQVksQ0FBQywrQkFBK0IsRUFBRTtZQUM3RCxjQUFjLEVBQUUsRUFBRSxZQUFZLEVBQUUsQ0FBRSxrQkFBa0IsRUFBRSxLQUFLLENBQUUsRUFBRTtZQUMvRCxPQUFPLEVBQUUsRUFBRSxZQUFZLEVBQUUsQ0FBRSw2Q0FBNkMsRUFBRSxLQUFLLENBQUUsRUFBRTtTQUNwRixDQUFDLENBQUMsQ0FBQztRQUVKLDhDQUE4QztRQUM5QyxlQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLHFCQUFZLENBQUMsZ0JBQWdCLEVBQUU7WUFDOUMsd0JBQXdCLEVBQUU7Z0JBQ3hCLE9BQU8sRUFBRSxZQUFZO2dCQUNyQixTQUFTLEVBQUUsQ0FBQzt3QkFDVixNQUFNLEVBQUUsZ0JBQWdCO3dCQUN4QixNQUFNLEVBQUUsT0FBTzt3QkFDZixTQUFTLEVBQUUsRUFBRSxPQUFPLEVBQUUsRUFBRSxVQUFVLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxPQUFPLEVBQUUsRUFBQyxHQUFHLEVBQUUsYUFBYSxFQUFDLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQyxFQUFFLEVBQUM7cUJBQy9GLENBQUM7YUFDSDtTQUNGLENBQUMsQ0FBQyxDQUFDO1FBRUosZUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxxQkFBWSxDQUFDLGtCQUFrQixFQUFFO1lBQ2hELGNBQWMsRUFBRTtnQkFDZCxPQUFPLEVBQUUsWUFBWTtnQkFDckIsU0FBUyxFQUFFO29CQUNUO3dCQUNFLE1BQU0sRUFBRSxtQkFBbUI7d0JBQzNCLE1BQU0sRUFBRSxPQUFPO3dCQUNmLFFBQVEsRUFBRSxFQUFFLFlBQVksRUFBRSxDQUFFLGtCQUFrQixFQUFFLEtBQUssQ0FBRSxFQUFFO3FCQUMxRDtvQkFDRDt3QkFDRSxNQUFNLEVBQUUsY0FBYzt3QkFDdEIsTUFBTSxFQUFFLE9BQU87d0JBQ2YsUUFBUSxFQUFFLEVBQUUsWUFBWSxFQUFFLENBQUUsNkNBQTZDLEVBQUUsS0FBSyxDQUFFLEVBQUU7cUJBQ3JGO2lCQUNGO2FBQ0Y7U0FDRixDQUFDLENBQUMsQ0FBQztRQUVKLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNkLENBQUM7SUFFRCx1RUFBdUUsQ0FBQyxJQUFVO1FBQ2hGLFFBQVE7UUFDUixNQUFNLFdBQVcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxLQUFLLENBQUMsU0FBUyxFQUFFLFNBQVMsRUFBRSxFQUFFLEdBQUcsRUFBRSxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsRUFBQyxDQUFDLENBQUM7UUFDdEYsTUFBTSxRQUFRLEdBQUcsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsRUFBRSxVQUFVLENBQUMsQ0FBQztRQUU1RCxNQUFNLFNBQVMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxLQUFLLENBQUMsU0FBUyxFQUFFLFNBQVMsRUFBRSxFQUFFLEdBQUcsRUFBRSxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsRUFBQyxDQUFDLENBQUM7UUFDcEYsTUFBTSxNQUFNLEdBQUcsSUFBSSxZQUFNLENBQUMsU0FBUyxFQUFFLFVBQVUsQ0FBQyxDQUFDO1FBRWpELE9BQU87UUFDUCxJQUFJLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxXQUFXLEVBQUUsY0FBYyxFQUFFO1lBQ3ZELFFBQVE7WUFDUixXQUFXLEVBQUUsTUFBTTtZQUNuQixhQUFhLEVBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxTQUFTLEVBQUU7U0FDOUMsQ0FBQyxDQUFDO1FBRUgsa0ZBQWtGO1FBQ2xGLGVBQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLENBQUMscUJBQVksQ0FBQyx3QkFBd0IsRUFBRTtZQUMxRCxTQUFTLEVBQUUsRUFBRSxZQUFZLEVBQUUsQ0FBRSxrQkFBa0IsRUFBRSxLQUFLLENBQUUsRUFBRTtZQUMxRCxPQUFPLEVBQUUsRUFBRSxZQUFZLEVBQUUsQ0FBRSw2Q0FBNkMsRUFBRSxLQUFLLENBQUUsRUFBRTtTQUNwRixDQUFDLENBQUMsQ0FBQztRQUVKLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNkLENBQUM7Q0FDRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZXhwZWN0LCBoYXZlUmVzb3VyY2UgfSBmcm9tICdAYXdzLWNkay9hc3NlcnQnO1xuaW1wb3J0IGxvZ3MgPSByZXF1aXJlKCdAYXdzLWNkay9hd3MtbG9ncycpO1xuaW1wb3J0IGNkayA9IHJlcXVpcmUoJ0Bhd3MtY2RrL2NkaycpO1xuaW1wb3J0IHsgVGVzdCB9IGZyb20gJ25vZGV1bml0JztcbmltcG9ydCB7IFN0cmVhbSB9IGZyb20gJy4uL2xpYic7XG5cbmV4cG9ydCA9IHtcbiAgJ3N0cmVhbSBjYW4gYmUgc3Vic2NyaXB0aW9uIGRlc3RpbmF0aW9uJyh0ZXN0OiBUZXN0KSB7XG4gICAgLy8gR0lWRU5cbiAgICBjb25zdCBzdGFjayA9IG5ldyBjZGsuU3RhY2soKTtcbiAgICBjb25zdCBzdHJlYW0gPSBuZXcgU3RyZWFtKHN0YWNrLCAnTXlTdHJlYW0nKTtcbiAgICBjb25zdCBsb2dHcm91cCA9IG5ldyBsb2dzLkxvZ0dyb3VwKHN0YWNrLCAnTG9nR3JvdXAnKTtcblxuICAgIC8vIFdIRU5cbiAgICBuZXcgbG9ncy5TdWJzY3JpcHRpb25GaWx0ZXIoc3RhY2ssICdTdWJzY3JpcHRpb24nLCB7XG4gICAgICBsb2dHcm91cCxcbiAgICAgIGRlc3RpbmF0aW9uOiBzdHJlYW0sXG4gICAgICBmaWx0ZXJQYXR0ZXJuOiBsb2dzLkZpbHRlclBhdHRlcm4uYWxsRXZlbnRzKClcbiAgICB9KTtcblxuICAgIC8vIFRIRU46IHN1YnNjcmlwdGlvbiB0YXJnZXQgaXMgU3RyZWFtXG4gICAgZXhwZWN0KHN0YWNrKS50byhoYXZlUmVzb3VyY2UoJ0FXUzo6TG9nczo6U3Vic2NyaXB0aW9uRmlsdGVyJywge1xuICAgICAgRGVzdGluYXRpb25Bcm46IHsgXCJGbjo6R2V0QXR0XCI6IFsgXCJNeVN0cmVhbTVDMDUwRTkzXCIsIFwiQXJuXCIgXSB9LFxuICAgICAgUm9sZUFybjogeyBcIkZuOjpHZXRBdHRcIjogWyBcIk15U3RyZWFtQ2xvdWRXYXRjaExvZ3NDYW5QdXRSZWNvcmRzNTg0OTg0OTBcIiwgXCJBcm5cIiBdIH0sXG4gICAgfSkpO1xuXG4gICAgLy8gVEhFTjogd2UgaGF2ZSBhIHJvbGUgdG8gd3JpdGUgdG8gdGhlIExhbWJkYVxuICAgIGV4cGVjdChzdGFjaykudG8oaGF2ZVJlc291cmNlKCdBV1M6OklBTTo6Um9sZScsIHtcbiAgICAgIEFzc3VtZVJvbGVQb2xpY3lEb2N1bWVudDoge1xuICAgICAgICBWZXJzaW9uOiAnMjAxMi0xMC0xNycsXG4gICAgICAgIFN0YXRlbWVudDogW3tcbiAgICAgICAgICBBY3Rpb246IFwic3RzOkFzc3VtZVJvbGVcIixcbiAgICAgICAgICBFZmZlY3Q6ICdBbGxvdycsXG4gICAgICAgICAgUHJpbmNpcGFsOiB7IFNlcnZpY2U6IHsgXCJGbjo6Sm9pblwiOiBbXCJcIiwgW1wibG9ncy5cIiwge1JlZjogXCJBV1M6OlJlZ2lvblwifSwgXCIuYW1hem9uYXdzLmNvbVwiXV0gfX1cbiAgICAgICAgfV0sXG4gICAgICB9XG4gICAgfSkpO1xuXG4gICAgZXhwZWN0KHN0YWNrKS50byhoYXZlUmVzb3VyY2UoJ0FXUzo6SUFNOjpQb2xpY3knLCB7XG4gICAgICBQb2xpY3lEb2N1bWVudDoge1xuICAgICAgICBWZXJzaW9uOiAnMjAxMi0xMC0xNycsXG4gICAgICAgIFN0YXRlbWVudDogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIEFjdGlvbjogXCJraW5lc2lzOlB1dFJlY29yZFwiLFxuICAgICAgICAgICAgRWZmZWN0OiBcIkFsbG93XCIsXG4gICAgICAgICAgICBSZXNvdXJjZTogeyBcIkZuOjpHZXRBdHRcIjogWyBcIk15U3RyZWFtNUMwNTBFOTNcIiwgXCJBcm5cIiBdIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIEFjdGlvbjogXCJpYW06UGFzc1JvbGVcIixcbiAgICAgICAgICAgIEVmZmVjdDogXCJBbGxvd1wiLFxuICAgICAgICAgICAgUmVzb3VyY2U6IHsgXCJGbjo6R2V0QXR0XCI6IFsgXCJNeVN0cmVhbUNsb3VkV2F0Y2hMb2dzQ2FuUHV0UmVjb3JkczU4NDk4NDkwXCIsIFwiQXJuXCIgXSB9XG4gICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgfVxuICAgIH0pKTtcblxuICAgIHRlc3QuZG9uZSgpO1xuICB9LFxuXG4gICdjcm9zcy1hY2NvdW50IHN0cmVhbSBjYW4gYmUgc3Vic2NyaXB0aW9uIGRlc3RpbmF0aW9uIHdpdGggRGVzdGluYXRpb24nKHRlc3Q6IFRlc3QpIHtcbiAgICAvLyBHSVZFTlxuICAgIGNvbnN0IHNvdXJjZVN0YWNrID0gbmV3IGNkay5TdGFjayh1bmRlZmluZWQsIHVuZGVmaW5lZCwgeyBlbnY6IHsgYWNjb3VudDogJzEyMzQ1JyB9fSk7XG4gICAgY29uc3QgbG9nR3JvdXAgPSBuZXcgbG9ncy5Mb2dHcm91cChzb3VyY2VTdGFjaywgJ0xvZ0dyb3VwJyk7XG5cbiAgICBjb25zdCBkZXN0U3RhY2sgPSBuZXcgY2RrLlN0YWNrKHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB7IGVudjogeyBhY2NvdW50OiAnNjc4OTAnIH19KTtcbiAgICBjb25zdCBzdHJlYW0gPSBuZXcgU3RyZWFtKGRlc3RTdGFjaywgJ015U3RyZWFtJyk7XG5cbiAgICAvLyBXSEVOXG4gICAgbmV3IGxvZ3MuU3Vic2NyaXB0aW9uRmlsdGVyKHNvdXJjZVN0YWNrLCAnU3Vic2NyaXB0aW9uJywge1xuICAgICAgbG9nR3JvdXAsXG4gICAgICBkZXN0aW5hdGlvbjogc3RyZWFtLFxuICAgICAgZmlsdGVyUGF0dGVybjogbG9ncy5GaWx0ZXJQYXR0ZXJuLmFsbEV2ZW50cygpXG4gICAgfSk7XG5cbiAgICAvLyBUSEVOOiB0aGUgc291cmNlIHN0YWNrIGhhcyBhIERlc3RpbmF0aW9uIG9iamVjdCB0aGF0IHRoZSBzdWJzY3JpcHRpb24gcG9pbnRzIHRvXG4gICAgZXhwZWN0KGRlc3RTdGFjaykudG8oaGF2ZVJlc291cmNlKCdBV1M6OkxvZ3M6OkRlc3RpbmF0aW9uJywge1xuICAgICAgVGFyZ2V0QXJuOiB7IFwiRm46OkdldEF0dFwiOiBbIFwiTXlTdHJlYW01QzA1MEU5M1wiLCBcIkFyblwiIF0gfSxcbiAgICAgIFJvbGVBcm46IHsgXCJGbjo6R2V0QXR0XCI6IFsgXCJNeVN0cmVhbUNsb3VkV2F0Y2hMb2dzQ2FuUHV0UmVjb3JkczU4NDk4NDkwXCIsIFwiQXJuXCIgXSB9LFxuICAgIH0pKTtcblxuICAgIHRlc3QuZG9uZSgpO1xuICB9XG59O1xuIl19