"use strict";
const assert_1 = require("@aws-cdk/assert");
const iam = require("@aws-cdk/aws-iam");
const kms = require("@aws-cdk/aws-kms");
const core_1 = require("@aws-cdk/core");
const lib_1 = require("../lib");
module.exports = {
    'default stream'(test) {
        const stack = new core_1.Stack();
        new lib_1.Stream(stack, 'MyStream');
        assert_1.expect(stack).toMatch({
            "Resources": {
                "MyStream5C050E93": {
                    "Type": "AWS::Kinesis::Stream",
                    "Properties": {
                        "RetentionPeriodHours": 24,
                        "ShardCount": 1
                    }
                }
            }
        });
        test.done();
    },
    'stream from attributes'(test) {
        const stack = new core_1.Stack();
        const s = lib_1.Stream.fromStreamAttributes(stack, 'MyStream', {
            streamArn: 'arn:aws:kinesis:region:account-id:stream/stream-name'
        });
        test.equals(s.streamArn, 'arn:aws:kinesis:region:account-id:stream/stream-name');
        test.done();
    },
    "uses explicit shard count"(test) {
        const stack = new core_1.Stack();
        new lib_1.Stream(stack, 'MyStream', {
            shardCount: 2
        });
        assert_1.expect(stack).toMatch({
            "Resources": {
                "MyStream5C050E93": {
                    "Type": "AWS::Kinesis::Stream",
                    "Properties": {
                        "RetentionPeriodHours": 24,
                        "ShardCount": 2
                    }
                }
            }
        });
        test.done();
    },
    "uses explicit retention period"(test) {
        const stack = new core_1.Stack();
        new lib_1.Stream(stack, 'MyStream', {
            retentionPeriodHours: 168
        });
        assert_1.expect(stack).toMatch({
            "Resources": {
                "MyStream5C050E93": {
                    "Type": "AWS::Kinesis::Stream",
                    "Properties": {
                        "RetentionPeriodHours": 168,
                        "ShardCount": 1
                    }
                }
            }
        });
        test.done();
    },
    "retention period must be between 24 and 168 hours"(test) {
        test.throws({
            block: () => {
                new lib_1.Stream(new core_1.Stack(), 'MyStream', {
                    retentionPeriodHours: 169
                });
            },
            message: "retentionPeriodHours must be between 24 and 168 hours"
        });
        test.throws({
            block: () => {
                new lib_1.Stream(new core_1.Stack(), 'MyStream', {
                    retentionPeriodHours: 23
                });
            },
            message: "retentionPeriodHours must be between 24 and 168 hours"
        });
        test.done();
    },
    "auto-creates KMS key if encryption type is KMS but no key is provided"(test) {
        const stack = new core_1.Stack();
        new lib_1.Stream(stack, 'MyStream', {
            encryption: lib_1.StreamEncryption.KMS
        });
        assert_1.expect(stack).toMatch({
            "Resources": {
                "MyStreamKey76F3300E": {
                    "Type": "AWS::KMS::Key",
                    "Properties": {
                        "Description": "Created by MyStream",
                        "KeyPolicy": {
                            "Statement": [
                                {
                                    "Action": [
                                        "kms:Create*",
                                        "kms:Describe*",
                                        "kms:Enable*",
                                        "kms:List*",
                                        "kms:Put*",
                                        "kms:Update*",
                                        "kms:Revoke*",
                                        "kms:Disable*",
                                        "kms:Get*",
                                        "kms:Delete*",
                                        "kms:ScheduleKeyDeletion",
                                        "kms:CancelKeyDeletion",
                                        "kms:GenerateDataKey"
                                    ],
                                    "Effect": "Allow",
                                    "Principal": {
                                        "AWS": {
                                            "Fn::Join": [
                                                "",
                                                [
                                                    "arn:",
                                                    {
                                                        "Ref": "AWS::Partition"
                                                    },
                                                    ":iam::",
                                                    {
                                                        "Ref": "AWS::AccountId"
                                                    },
                                                    ":root"
                                                ]
                                            ]
                                        }
                                    },
                                    "Resource": "*"
                                }
                            ],
                            "Version": "2012-10-17"
                        }
                    },
                    "DeletionPolicy": "Retain",
                    "UpdateReplacePolicy": "Retain"
                },
                "MyStream5C050E93": {
                    "Type": "AWS::Kinesis::Stream",
                    "Properties": {
                        "RetentionPeriodHours": 24,
                        "ShardCount": 1,
                        "StreamEncryption": {
                            "EncryptionType": "KMS",
                            "KeyId": {
                                "Fn::GetAtt": [
                                    "MyStreamKey76F3300E",
                                    "Arn"
                                ]
                            }
                        }
                    }
                }
            }
        });
        test.done();
    },
    "uses explicit KMS key if encryption type is KMS and a key is provided"(test) {
        const stack = new core_1.Stack();
        const explicitKey = new kms.Key(stack, 'ExplicitKey', {
            description: `Explicit Key`
        });
        new lib_1.Stream(stack, 'MyStream', {
            encryption: lib_1.StreamEncryption.KMS,
            encryptionKey: explicitKey
        });
        assert_1.expect(stack).toMatch({
            "Resources": {
                "ExplicitKey7DF42F37": {
                    "Type": "AWS::KMS::Key",
                    "Properties": {
                        "Description": "Explicit Key",
                        "KeyPolicy": {
                            "Statement": [
                                {
                                    "Action": [
                                        "kms:Create*",
                                        "kms:Describe*",
                                        "kms:Enable*",
                                        "kms:List*",
                                        "kms:Put*",
                                        "kms:Update*",
                                        "kms:Revoke*",
                                        "kms:Disable*",
                                        "kms:Get*",
                                        "kms:Delete*",
                                        "kms:ScheduleKeyDeletion",
                                        "kms:CancelKeyDeletion",
                                        "kms:GenerateDataKey"
                                    ],
                                    "Effect": "Allow",
                                    "Principal": {
                                        "AWS": {
                                            "Fn::Join": [
                                                "",
                                                [
                                                    "arn:",
                                                    {
                                                        "Ref": "AWS::Partition"
                                                    },
                                                    ":iam::",
                                                    {
                                                        "Ref": "AWS::AccountId"
                                                    },
                                                    ":root"
                                                ]
                                            ]
                                        }
                                    },
                                    "Resource": "*"
                                }
                            ],
                            "Version": "2012-10-17"
                        }
                    },
                    "DeletionPolicy": "Retain",
                    "UpdateReplacePolicy": "Retain"
                },
                "MyStream5C050E93": {
                    "Type": "AWS::Kinesis::Stream",
                    "Properties": {
                        "RetentionPeriodHours": 24,
                        "ShardCount": 1,
                        "StreamEncryption": {
                            "EncryptionType": "KMS",
                            "KeyId": {
                                "Fn::GetAtt": [
                                    "ExplicitKey7DF42F37",
                                    "Arn"
                                ]
                            }
                        }
                    }
                }
            }
        });
        test.done();
    },
    "permissions": {
        "with encryption": {
            "grantRead creates and attaches a policy with read only access to Stream and EncryptionKey"(test) {
                const stack = new core_1.Stack();
                const stream = new lib_1.Stream(stack, 'MyStream', {
                    encryption: lib_1.StreamEncryption.KMS
                });
                const user = new iam.User(stack, "MyUser");
                stream.grantRead(user);
                assert_1.expect(stack).toMatch({
                    "Resources": {
                        "MyStreamKey76F3300E": {
                            "Type": "AWS::KMS::Key",
                            "Properties": {
                                "Description": "Created by MyStream",
                                "KeyPolicy": {
                                    "Statement": [
                                        {
                                            "Action": [
                                                "kms:Create*",
                                                "kms:Describe*",
                                                "kms:Enable*",
                                                "kms:List*",
                                                "kms:Put*",
                                                "kms:Update*",
                                                "kms:Revoke*",
                                                "kms:Disable*",
                                                "kms:Get*",
                                                "kms:Delete*",
                                                "kms:ScheduleKeyDeletion",
                                                "kms:CancelKeyDeletion",
                                                "kms:GenerateDataKey"
                                            ],
                                            "Effect": "Allow",
                                            "Principal": {
                                                "AWS": {
                                                    "Fn::Join": [
                                                        "",
                                                        [
                                                            "arn:",
                                                            {
                                                                "Ref": "AWS::Partition"
                                                            },
                                                            ":iam::",
                                                            {
                                                                "Ref": "AWS::AccountId"
                                                            },
                                                            ":root"
                                                        ]
                                                    ]
                                                }
                                            },
                                            "Resource": "*"
                                        },
                                        {
                                            "Action": "kms:Decrypt",
                                            "Effect": "Allow",
                                            "Principal": {
                                                "AWS": {
                                                    "Fn::GetAtt": [
                                                        "MyUserDC45028B",
                                                        "Arn"
                                                    ]
                                                }
                                            },
                                            "Resource": "*"
                                        }
                                    ],
                                    "Version": "2012-10-17"
                                }
                            },
                            "DeletionPolicy": "Retain",
                            "UpdateReplacePolicy": "Retain"
                        },
                        "MyStream5C050E93": {
                            "Type": "AWS::Kinesis::Stream",
                            "Properties": {
                                "RetentionPeriodHours": 24,
                                "ShardCount": 1,
                                "StreamEncryption": {
                                    "EncryptionType": "KMS",
                                    "KeyId": {
                                        "Fn::GetAtt": [
                                            "MyStreamKey76F3300E",
                                            "Arn"
                                        ]
                                    }
                                }
                            }
                        },
                        "MyUserDC45028B": {
                            "Type": "AWS::IAM::User"
                        },
                        "MyUserDefaultPolicy7B897426": {
                            "Type": "AWS::IAM::Policy",
                            "Properties": {
                                "PolicyDocument": {
                                    "Statement": [
                                        {
                                            "Action": [
                                                "kinesis:DescribeStream",
                                                "kinesis:GetRecords",
                                                "kinesis:GetShardIterator"
                                            ],
                                            "Effect": "Allow",
                                            "Resource": {
                                                "Fn::GetAtt": [
                                                    "MyStream5C050E93",
                                                    "Arn"
                                                ]
                                            }
                                        },
                                        {
                                            "Action": "kms:Decrypt",
                                            "Effect": "Allow",
                                            "Resource": {
                                                "Fn::GetAtt": [
                                                    "MyStreamKey76F3300E",
                                                    "Arn"
                                                ]
                                            }
                                        }
                                    ],
                                    "Version": "2012-10-17"
                                },
                                "PolicyName": "MyUserDefaultPolicy7B897426",
                                "Users": [
                                    {
                                        "Ref": "MyUserDC45028B"
                                    }
                                ]
                            }
                        }
                    }
                });
                test.done();
            },
            "grantWrite creates and attaches a policy with write only access to Stream and EncryptionKey"(test) {
                const stack = new core_1.Stack();
                const stream = new lib_1.Stream(stack, 'MyStream', {
                    encryption: lib_1.StreamEncryption.KMS
                });
                const user = new iam.User(stack, "MyUser");
                stream.grantWrite(user);
                assert_1.expect(stack).toMatch({
                    "Resources": {
                        "MyStreamKey76F3300E": {
                            "Type": "AWS::KMS::Key",
                            "Properties": {
                                "Description": "Created by MyStream",
                                "KeyPolicy": {
                                    "Statement": [
                                        {
                                            "Action": [
                                                "kms:Create*",
                                                "kms:Describe*",
                                                "kms:Enable*",
                                                "kms:List*",
                                                "kms:Put*",
                                                "kms:Update*",
                                                "kms:Revoke*",
                                                "kms:Disable*",
                                                "kms:Get*",
                                                "kms:Delete*",
                                                "kms:ScheduleKeyDeletion",
                                                "kms:CancelKeyDeletion",
                                                "kms:GenerateDataKey"
                                            ],
                                            "Effect": "Allow",
                                            "Principal": {
                                                "AWS": {
                                                    "Fn::Join": [
                                                        "",
                                                        [
                                                            "arn:",
                                                            {
                                                                "Ref": "AWS::Partition"
                                                            },
                                                            ":iam::",
                                                            {
                                                                "Ref": "AWS::AccountId"
                                                            },
                                                            ":root"
                                                        ]
                                                    ]
                                                }
                                            },
                                            "Resource": "*"
                                        },
                                        {
                                            "Action": [
                                                "kms:Encrypt",
                                                "kms:ReEncrypt*",
                                                "kms:GenerateDataKey*"
                                            ],
                                            "Effect": "Allow",
                                            "Principal": {
                                                "AWS": {
                                                    "Fn::GetAtt": [
                                                        "MyUserDC45028B",
                                                        "Arn"
                                                    ]
                                                }
                                            },
                                            "Resource": "*"
                                        }
                                    ],
                                    "Version": "2012-10-17"
                                }
                            },
                            "DeletionPolicy": "Retain",
                            "UpdateReplacePolicy": "Retain"
                        },
                        "MyStream5C050E93": {
                            "Type": "AWS::Kinesis::Stream",
                            "Properties": {
                                "RetentionPeriodHours": 24,
                                "ShardCount": 1,
                                "StreamEncryption": {
                                    "EncryptionType": "KMS",
                                    "KeyId": {
                                        "Fn::GetAtt": [
                                            "MyStreamKey76F3300E",
                                            "Arn"
                                        ]
                                    }
                                }
                            }
                        },
                        "MyUserDC45028B": {
                            "Type": "AWS::IAM::User"
                        },
                        "MyUserDefaultPolicy7B897426": {
                            "Type": "AWS::IAM::Policy",
                            "Properties": {
                                "PolicyDocument": {
                                    "Statement": [
                                        {
                                            "Action": [
                                                "kinesis:DescribeStream",
                                                "kinesis:PutRecord",
                                                "kinesis:PutRecords"
                                            ],
                                            "Effect": "Allow",
                                            "Resource": {
                                                "Fn::GetAtt": [
                                                    "MyStream5C050E93",
                                                    "Arn"
                                                ]
                                            }
                                        },
                                        {
                                            "Action": [
                                                "kms:Encrypt",
                                                "kms:ReEncrypt*",
                                                "kms:GenerateDataKey*",
                                            ],
                                            "Effect": "Allow",
                                            "Resource": {
                                                "Fn::GetAtt": [
                                                    "MyStreamKey76F3300E",
                                                    "Arn"
                                                ]
                                            }
                                        }
                                    ],
                                    "Version": "2012-10-17"
                                },
                                "PolicyName": "MyUserDefaultPolicy7B897426",
                                "Users": [
                                    {
                                        "Ref": "MyUserDC45028B"
                                    }
                                ]
                            }
                        }
                    }
                });
                test.done();
            },
            "grantReadWrite creates and attaches a policy with access to Stream and EncryptionKey"(test) {
                const stack = new core_1.Stack();
                const stream = new lib_1.Stream(stack, 'MyStream', {
                    encryption: lib_1.StreamEncryption.KMS
                });
                const user = new iam.User(stack, "MyUser");
                stream.grantReadWrite(user);
                assert_1.expect(stack).toMatch({
                    "Resources": {
                        "MyStreamKey76F3300E": {
                            "Type": "AWS::KMS::Key",
                            "Properties": {
                                "Description": "Created by MyStream",
                                "KeyPolicy": {
                                    "Statement": [
                                        {
                                            "Action": [
                                                "kms:Create*",
                                                "kms:Describe*",
                                                "kms:Enable*",
                                                "kms:List*",
                                                "kms:Put*",
                                                "kms:Update*",
                                                "kms:Revoke*",
                                                "kms:Disable*",
                                                "kms:Get*",
                                                "kms:Delete*",
                                                "kms:ScheduleKeyDeletion",
                                                "kms:CancelKeyDeletion",
                                                "kms:GenerateDataKey"
                                            ],
                                            "Effect": "Allow",
                                            "Principal": {
                                                "AWS": {
                                                    "Fn::Join": [
                                                        "",
                                                        [
                                                            "arn:",
                                                            {
                                                                "Ref": "AWS::Partition"
                                                            },
                                                            ":iam::",
                                                            {
                                                                "Ref": "AWS::AccountId"
                                                            },
                                                            ":root"
                                                        ]
                                                    ]
                                                }
                                            },
                                            "Resource": "*"
                                        },
                                        {
                                            "Action": [
                                                "kms:Decrypt",
                                                "kms:Encrypt",
                                                "kms:ReEncrypt*",
                                                "kms:GenerateDataKey*"
                                            ],
                                            "Effect": "Allow",
                                            "Principal": {
                                                "AWS": {
                                                    "Fn::GetAtt": [
                                                        "MyUserDC45028B",
                                                        "Arn"
                                                    ]
                                                }
                                            },
                                            "Resource": "*"
                                        }
                                    ],
                                    "Version": "2012-10-17"
                                }
                            },
                            "DeletionPolicy": "Retain",
                            "UpdateReplacePolicy": "Retain"
                        },
                        "MyStream5C050E93": {
                            "Type": "AWS::Kinesis::Stream",
                            "Properties": {
                                "RetentionPeriodHours": 24,
                                "ShardCount": 1,
                                "StreamEncryption": {
                                    "EncryptionType": "KMS",
                                    "KeyId": {
                                        "Fn::GetAtt": [
                                            "MyStreamKey76F3300E",
                                            "Arn"
                                        ]
                                    }
                                }
                            }
                        },
                        "MyUserDC45028B": {
                            "Type": "AWS::IAM::User"
                        },
                        "MyUserDefaultPolicy7B897426": {
                            "Type": "AWS::IAM::Policy",
                            "Properties": {
                                "PolicyDocument": {
                                    "Statement": [
                                        {
                                            "Action": [
                                                "kinesis:DescribeStream",
                                                "kinesis:GetRecords",
                                                "kinesis:GetShardIterator",
                                                "kinesis:PutRecord",
                                                "kinesis:PutRecords"
                                            ],
                                            "Effect": "Allow",
                                            "Resource": {
                                                "Fn::GetAtt": [
                                                    "MyStream5C050E93",
                                                    "Arn"
                                                ]
                                            }
                                        },
                                        {
                                            "Action": [
                                                "kms:Decrypt",
                                                "kms:Encrypt",
                                                "kms:ReEncrypt*",
                                                "kms:GenerateDataKey*"
                                            ],
                                            "Effect": "Allow",
                                            "Resource": {
                                                "Fn::GetAtt": [
                                                    "MyStreamKey76F3300E",
                                                    "Arn"
                                                ]
                                            }
                                        }
                                    ],
                                    "Version": "2012-10-17"
                                },
                                "PolicyName": "MyUserDefaultPolicy7B897426",
                                "Users": [
                                    {
                                        "Ref": "MyUserDC45028B"
                                    }
                                ]
                            }
                        }
                    }
                });
                test.done();
            }
        },
        "with no encryption": {
            "grantRead creates and associates a policy with read only access to Stream"(test) {
                const stack = new core_1.Stack();
                const stream = new lib_1.Stream(stack, 'MyStream');
                const user = new iam.User(stack, "MyUser");
                stream.grantRead(user);
                assert_1.expect(stack).toMatch({
                    "Resources": {
                        "MyStream5C050E93": {
                            "Type": "AWS::Kinesis::Stream",
                            "Properties": {
                                "RetentionPeriodHours": 24,
                                "ShardCount": 1
                            }
                        },
                        "MyUserDC45028B": {
                            "Type": "AWS::IAM::User"
                        },
                        "MyUserDefaultPolicy7B897426": {
                            "Type": "AWS::IAM::Policy",
                            "Properties": {
                                "PolicyDocument": {
                                    "Statement": [
                                        {
                                            "Action": [
                                                "kinesis:DescribeStream",
                                                "kinesis:GetRecords",
                                                "kinesis:GetShardIterator"
                                            ],
                                            "Effect": "Allow",
                                            "Resource": {
                                                "Fn::GetAtt": [
                                                    "MyStream5C050E93",
                                                    "Arn"
                                                ]
                                            }
                                        }
                                    ],
                                    "Version": "2012-10-17"
                                },
                                "PolicyName": "MyUserDefaultPolicy7B897426",
                                "Users": [
                                    {
                                        "Ref": "MyUserDC45028B"
                                    }
                                ]
                            }
                        }
                    }
                });
                test.done();
            },
            "grantWrite creates and attaches a policy with write only access to Stream"(test) {
                const stack = new core_1.Stack();
                const stream = new lib_1.Stream(stack, 'MyStream');
                const user = new iam.User(stack, "MyUser");
                stream.grantWrite(user);
                assert_1.expect(stack).toMatch({
                    "Resources": {
                        "MyStream5C050E93": {
                            "Type": "AWS::Kinesis::Stream",
                            "Properties": {
                                "RetentionPeriodHours": 24,
                                "ShardCount": 1
                            }
                        },
                        "MyUserDC45028B": {
                            "Type": "AWS::IAM::User"
                        },
                        "MyUserDefaultPolicy7B897426": {
                            "Type": "AWS::IAM::Policy",
                            "Properties": {
                                "PolicyDocument": {
                                    "Statement": [
                                        {
                                            "Action": [
                                                "kinesis:DescribeStream",
                                                "kinesis:PutRecord",
                                                "kinesis:PutRecords"
                                            ],
                                            "Effect": "Allow",
                                            "Resource": {
                                                "Fn::GetAtt": [
                                                    "MyStream5C050E93",
                                                    "Arn"
                                                ]
                                            }
                                        }
                                    ],
                                    "Version": "2012-10-17"
                                },
                                "PolicyName": "MyUserDefaultPolicy7B897426",
                                "Users": [
                                    {
                                        "Ref": "MyUserDC45028B"
                                    }
                                ]
                            }
                        }
                    }
                });
                test.done();
            },
            "greatReadWrite creates and attaches a policy with write only access to Stream"(test) {
                const stack = new core_1.Stack();
                const stream = new lib_1.Stream(stack, 'MyStream');
                const user = new iam.User(stack, "MyUser");
                stream.grantReadWrite(user);
                assert_1.expect(stack).toMatch({
                    "Resources": {
                        "MyStream5C050E93": {
                            "Type": "AWS::Kinesis::Stream",
                            "Properties": {
                                "RetentionPeriodHours": 24,
                                "ShardCount": 1
                            }
                        },
                        "MyUserDC45028B": {
                            "Type": "AWS::IAM::User"
                        },
                        "MyUserDefaultPolicy7B897426": {
                            "Type": "AWS::IAM::Policy",
                            "Properties": {
                                "PolicyDocument": {
                                    "Statement": [
                                        {
                                            "Action": [
                                                "kinesis:DescribeStream",
                                                "kinesis:GetRecords",
                                                "kinesis:GetShardIterator",
                                                "kinesis:PutRecord",
                                                "kinesis:PutRecords"
                                            ],
                                            "Effect": "Allow",
                                            "Resource": {
                                                "Fn::GetAtt": [
                                                    "MyStream5C050E93",
                                                    "Arn"
                                                ]
                                            }
                                        }
                                    ],
                                    "Version": "2012-10-17"
                                },
                                "PolicyName": "MyUserDefaultPolicy7B897426",
                                "Users": [
                                    {
                                        "Ref": "MyUserDC45028B"
                                    }
                                ]
                            }
                        }
                    }
                });
                test.done();
            }
        }
    },
    "cross-stack permissions": {
        "no encryption"(test) {
            const app = new core_1.App();
            const stackA = new core_1.Stack(app, 'stackA');
            const streamFromStackA = new lib_1.Stream(stackA, 'MyStream');
            const stackB = new core_1.Stack(app, 'stackB');
            const user = new iam.User(stackB, 'UserWhoNeedsAccess');
            streamFromStackA.grantRead(user);
            assert_1.expect(stackA).toMatch({
                "Resources": {
                    "MyStream5C050E93": {
                        "Type": "AWS::Kinesis::Stream",
                        "Properties": {
                            "RetentionPeriodHours": 24,
                            "ShardCount": 1
                        }
                    }
                },
                "Outputs": {
                    "ExportsOutputFnGetAttMyStream5C050E93Arn4ABF30CD": {
                        "Value": {
                            "Fn::GetAtt": [
                                "MyStream5C050E93",
                                "Arn"
                            ]
                        },
                        "Export": {
                            "Name": "stackA:ExportsOutputFnGetAttMyStream5C050E93Arn4ABF30CD"
                        }
                    }
                }
            });
            assert_1.expect(stackB).toMatch({
                "Resources": {
                    "UserWhoNeedsAccessF8959C3D": {
                        "Type": "AWS::IAM::User"
                    },
                    "UserWhoNeedsAccessDefaultPolicy6A9EB530": {
                        "Type": "AWS::IAM::Policy",
                        "Properties": {
                            "PolicyDocument": {
                                "Statement": [
                                    {
                                        "Action": [
                                            "kinesis:DescribeStream",
                                            "kinesis:GetRecords",
                                            "kinesis:GetShardIterator"
                                        ],
                                        "Effect": "Allow",
                                        "Resource": {
                                            "Fn::ImportValue": "stackA:ExportsOutputFnGetAttMyStream5C050E93Arn4ABF30CD"
                                        }
                                    }
                                ],
                                "Version": "2012-10-17"
                            },
                            "PolicyName": "UserWhoNeedsAccessDefaultPolicy6A9EB530",
                            "Users": [
                                {
                                    "Ref": "UserWhoNeedsAccessF8959C3D"
                                }
                            ]
                        }
                    }
                }
            });
            test.done();
        },
        "fails with encryption due to cyclic dependency"(test) {
            const app = new core_1.App();
            const stackA = new core_1.Stack(app, 'stackA');
            const streamFromStackA = new lib_1.Stream(stackA, 'MyStream', {
                encryption: lib_1.StreamEncryption.KMS
            });
            const stackB = new core_1.Stack(app, 'stackB');
            const user = new iam.User(stackB, 'UserWhoNeedsAccess');
            streamFromStackA.grantRead(user);
            test.throws(() => app.synth(), /'stackB' depends on 'stackA'/);
            test.done();
        }
    }
};
//# sourceMappingURL=data:application/json;base64,