"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const iam = require("@aws-cdk/aws-iam");
const s3n = require("@aws-cdk/aws-s3-notifications");
const cdk = require("@aws-cdk/cdk");
const policy_1 = require("./policy");
const subscription_1 = require("./subscription");
/**
 * Either a new or imported Topic
 */
class TopicBase extends cdk.Construct {
    constructor() {
        super(...arguments);
        /** Buckets permitted to send notifications to this topic */
        this.notifyingBuckets = new Set();
        /**
         * Indicates if the resource policy that allows CloudWatch events to publish
         * notifications to this topic have been added.
         */
        this.eventRuleTargetPolicyAdded = false;
    }
    /**
     * Subscribe some endpoint to this topic
     */
    subscribe(name, endpoint, protocol, rawMessageDelivery) {
        return new subscription_1.Subscription(this, name, {
            topic: this,
            endpoint,
            protocol,
            rawMessageDelivery,
        });
    }
    /**
     * Defines a subscription from this SNS topic to an SQS queue.
     *
     * The queue resource policy will be updated to allow this SNS topic to send
     * messages to the queue.
     *
     * @param name The subscription name
     * @param queue The target queue
     * @param rawMessageDelivery Enable raw message delivery
     */
    subscribeQueue(queue, rawMessageDelivery) {
        if (!cdk.Construct.isConstruct(queue)) {
            throw new Error(`The supplied Queue object must be an instance of Construct`);
        }
        const subscriptionName = this.node.id + 'Subscription';
        if (queue.node.tryFindChild(subscriptionName)) {
            throw new Error(`A subscription between the topic ${this.node.id} and the queue ${queue.node.id} already exists`);
        }
        // we use the queue name as the subscription's. there's no meaning to subscribing
        // the same queue twice on the same topic. Create subscription under *consuming*
        // construct to make sure it ends up in the correct stack in cases of cross-stack subscriptions.
        const sub = new subscription_1.Subscription(queue, subscriptionName, {
            topic: this,
            endpoint: queue.queueArn,
            protocol: subscription_1.SubscriptionProtocol.Sqs,
            rawMessageDelivery,
        });
        // add a statement to the queue resource policy which allows this topic
        // to send messages to the queue.
        queue.addToResourcePolicy(new iam.PolicyStatement()
            .addResource(queue.queueArn)
            .addAction('sqs:SendMessage')
            .addServicePrincipal('sns.amazonaws.com')
            .setCondition('ArnEquals', { 'aws:SourceArn': this.topicArn }));
        return sub;
    }
    /**
     * Defines a subscription from this SNS Topic to a Lambda function.
     *
     * The Lambda's resource policy will be updated to allow this topic to
     * invoke the function.
     *
     * @param name A name for the subscription
     * @param lambdaFunction The Lambda function to invoke
     */
    subscribeLambda(lambdaFunction) {
        if (!cdk.Construct.isConstruct(lambdaFunction)) {
            throw new Error(`The supplied lambda Function object must be an instance of Construct`);
        }
        const subscriptionName = this.node.id + 'Subscription';
        if (lambdaFunction.node.tryFindChild(subscriptionName)) {
            throw new Error(`A subscription between the topic ${this.node.id} and the lambda ${lambdaFunction.id} already exists`);
        }
        // Create subscription under *consuming* construct to make sure it ends up
        // in the correct stack in cases of cross-stack subscriptions.
        const sub = new subscription_1.Subscription(lambdaFunction, subscriptionName, {
            topic: this,
            endpoint: lambdaFunction.functionArn,
            protocol: subscription_1.SubscriptionProtocol.Lambda,
        });
        lambdaFunction.addPermission(this.node.id, {
            sourceArn: this.topicArn,
            principal: new iam.ServicePrincipal('sns.amazonaws.com'),
        });
        return sub;
    }
    /**
     * Defines a subscription from this SNS topic to an email address.
     *
     * @param name A name for the subscription
     * @param emailAddress The email address to use.
     * @param options Options for the email delivery format.
     */
    subscribeEmail(name, emailAddress, options) {
        const protocol = (options && options.json ? subscription_1.SubscriptionProtocol.EmailJson : subscription_1.SubscriptionProtocol.Email);
        return new subscription_1.Subscription(this, name, {
            topic: this,
            endpoint: emailAddress,
            protocol
        });
    }
    /**
     * Defines a subscription from this SNS topic to an http:// or https:// URL.
     *
     * @param name A name for the subscription
     * @param url The URL to invoke
     * @param rawMessageDelivery Enable raw message delivery
     */
    subscribeUrl(name, url, rawMessageDelivery) {
        if (!url.startsWith('http://') && !url.startsWith('https://')) {
            throw new Error('URL must start with either http:// or https://');
        }
        const protocol = url.startsWith('https:') ? subscription_1.SubscriptionProtocol.Https : subscription_1.SubscriptionProtocol.Http;
        return new subscription_1.Subscription(this, name, {
            topic: this,
            endpoint: url,
            protocol,
            rawMessageDelivery,
        });
    }
    /**
     * Adds a statement to the IAM resource policy associated with this topic.
     *
     * If this topic was created in this stack (`new Topic`), a topic policy
     * will be automatically created upon the first call to `addToPolicy`. If
     * the topic is improted (`Topic.import`), then this is a no-op.
     */
    addToResourcePolicy(statement) {
        if (!this.policy && this.autoCreatePolicy) {
            this.policy = new policy_1.TopicPolicy(this, 'Policy', { topics: [this] });
        }
        if (this.policy) {
            // statements must be unique, so we use the statement index.
            // potantially SIDs can change as a result of order change, but this should
            // not have an impact on the policy evaluation.
            // https://docs.aws.amazon.com/sns/latest/dg/AccessPolicyLanguage_SpecialInfo.html
            statement.describe(this.policy.document.statementCount.toString());
            this.policy.document.addStatement(statement);
        }
    }
    /**
     * Grant topic publishing permissions to the given identity
     */
    grantPublish(grantee) {
        return iam.Grant.addToPrincipalOrResource({
            grantee,
            actions: ['sns:Publish'],
            resourceArns: [this.topicArn],
            resource: this,
        });
    }
    /**
     * Returns a RuleTarget that can be used to trigger this SNS topic as a
     * result from a CloudWatch event.
     *
     * @see https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/resource-based-policies-cwe.html#sns-permissions
     */
    asEventRuleTarget(_ruleArn, _ruleId) {
        if (!this.eventRuleTargetPolicyAdded) {
            this.addToResourcePolicy(new iam.PolicyStatement()
                .addAction('sns:Publish')
                .addPrincipal(new iam.ServicePrincipal('events.amazonaws.com'))
                .addResource(this.topicArn));
            this.eventRuleTargetPolicyAdded = true;
        }
        return {
            id: this.node.id,
            arn: this.topicArn,
        };
    }
    /**
     * Allow using SNS topics as lifecycle hook targets
     */
    asLifecycleHookTarget(lifecycleHook) {
        this.grantPublish(lifecycleHook.role);
        return { notificationTargetArn: this.topicArn };
    }
    get alarmActionArn() {
        return this.topicArn;
    }
    /**
     * Implements the IBucketNotificationDestination interface, allowing topics to be used
     * as bucket notification destinations.
     *
     * @param bucketArn The ARN of the bucket sending the notifications
     * @param bucketId A unique ID of the bucket
     */
    asBucketNotificationDestination(bucketArn, bucketId) {
        // allow this bucket to sns:publish to this topic (if it doesn't already have a permission)
        if (!this.notifyingBuckets.has(bucketId)) {
            this.addToResourcePolicy(new iam.PolicyStatement()
                .addServicePrincipal('s3.amazonaws.com')
                .addAction('sns:Publish')
                .addResource(this.topicArn)
                .addCondition('ArnLike', { "aws:SourceArn": bucketArn }));
            this.notifyingBuckets.add(bucketId);
        }
        return {
            arn: this.topicArn,
            type: s3n.BucketNotificationDestinationType.Topic,
            dependencies: [this.policy] // make sure the topic policy resource is created before the notification config
        };
    }
}
exports.TopicBase = TopicBase;
//# sourceMappingURL=data:application/json;base64,