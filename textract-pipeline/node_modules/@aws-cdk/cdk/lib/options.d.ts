import { Token } from "./token";
/**
 * Function used to preprocess Tokens before resolving
 */
export declare type CollectFunc = (token: Token) => void;
/**
 * Global options for resolve()
 *
 * Because there are many independent calls to resolve(), some losing context,
 * we cannot simply pass through options at each individual call. Instead,
 * we configure global context at the stack synthesis level.
 */
export declare class ResolveConfiguration {
    private readonly options;
    push(options: ResolveOptions): IOptionsContext;
    readonly collect: CollectFunc | undefined;
}
interface IOptionsContext {
    pop(): void;
}
interface ResolveOptions {
    /**
     * What function to use to preprocess Tokens before resolving them
     */
    collect?: CollectFunc;
}
/**
 * Singleton instance of resolver options
 */
export declare const RESOLVE_OPTIONS: ResolveConfiguration;
export {};
