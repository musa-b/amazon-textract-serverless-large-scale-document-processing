"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cxapi = require("@aws-cdk/cx-api");
const fs = require("fs");
const os = require("os");
const path = require("path");
const construct_1 = require("./construct");
const runtime_info_1 = require("./runtime-info");
const util_1 = require("./util");
class Synthesizer {
    synthesize(root, options = {}) {
        const session = new SynthesisSession(options);
        // the three holy phases of synthesis: prepare, validate and synthesize
        // prepare
        root.node.prepareTree();
        // validate
        const validate = options.skipValidation === undefined ? true : !options.skipValidation;
        if (validate) {
            const errors = root.node.validateTree();
            if (errors.length > 0) {
                const errorList = errors.map(e => `[${e.source.node.path}] ${e.message}`).join('\n  ');
                throw new Error(`Validation failed with the following errors:\n  ${errorList}`);
            }
        }
        // synthesize (leaves first)
        for (const c of root.node.findAll(construct_1.ConstructOrder.PostOrder)) {
            if (SynthesisSession.isSynthesizable(c)) {
                c.synthesize(session);
            }
        }
        // write session manifest and lock store
        session.close(options);
        return session;
    }
}
exports.Synthesizer = Synthesizer;
class SynthesisSession {
    constructor(options) {
        this.artifacts = {};
        this.buildSteps = {};
        this.store = options.store || new InMemoryStore();
    }
    /**
     * @returns true if `obj` implements `ISynthesizable`.
     */
    static isSynthesizable(obj) {
        return 'synthesize' in obj;
    }
    get manifest() {
        if (!this._manifest) {
            throw new Error(`Cannot read assembly manifest before the session has been finalized`);
        }
        return this._manifest;
    }
    addArtifact(id, artifact) {
        cxapi.validateArtifact(artifact);
        this.artifacts[id] = util_1.filterUndefined(artifact);
    }
    tryGetArtifact(id) {
        return this.artifacts[id];
    }
    getArtifact(id) {
        const artifact = this.tryGetArtifact(id);
        if (!artifact) {
            throw new Error(`Cannot find artifact ${id}`);
        }
        return artifact;
    }
    addBuildStep(id, step) {
        if (id in this.buildSteps) {
            throw new Error(`Build step ${id} already exists`);
        }
        this.buildSteps[id] = util_1.filterUndefined(step);
    }
    close(options = {}) {
        const legacyManifest = options.legacyManifest !== undefined ? options.legacyManifest : false;
        const runtimeInfo = options.runtimeInformation !== undefined ? options.runtimeInformation : true;
        const manifest = this._manifest = util_1.filterUndefined({
            version: cxapi.PROTO_RESPONSE_VERSION,
            artifacts: this.artifacts,
            runtime: runtimeInfo ? runtime_info_1.collectRuntimeInformation() : undefined
        });
        this.store.writeFile(cxapi.MANIFEST_FILE, JSON.stringify(manifest, undefined, 2));
        // write build manifest if we have build steps
        if (Object.keys(this.buildSteps).length > 0) {
            const buildManifest = {
                steps: this.buildSteps
            };
            this.store.writeFile(cxapi.BUILD_FILE, JSON.stringify(buildManifest, undefined, 2));
        }
        if (legacyManifest) {
            const legacy = Object.assign({}, manifest, { stacks: renderLegacyStacks(manifest, this.store) });
            // render the legacy manifest (cdk.out) which also contains a "stacks" attribute with all the rendered stacks.
            this.store.writeFile(cxapi.OUTFILE_NAME, JSON.stringify(legacy, undefined, 2));
        }
        this.store.lock();
        return manifest;
    }
}
exports.SynthesisSession = SynthesisSession;
/**
 * Can be used to prepare and emit synthesis artifacts into an output directory.
 */
class FileSystemStore {
    constructor(options) {
        this.locked = false;
        this.outdir = options.outdir;
        return;
    }
    writeFile(fileName, data) {
        this.canWrite(fileName);
        const p = this.pathForArtifact(fileName);
        fs.writeFileSync(p, data);
    }
    writeJson(fileName, json) {
        this.writeFile(fileName, JSON.stringify(json, undefined, 2));
    }
    readFile(fileName) {
        const p = this.pathForArtifact(fileName);
        if (!fs.existsSync(p)) {
            throw new Error(`File not found: ${p}`);
        }
        return fs.readFileSync(p);
    }
    readJson(fileName) {
        return JSON.parse(this.readFile(fileName).toString());
    }
    exists(name) {
        const p = this.pathForArtifact(name);
        return fs.existsSync(p);
    }
    mkdir(directoryName) {
        this.canWrite(directoryName);
        const p = this.pathForArtifact(directoryName);
        fs.mkdirSync(p);
        return p;
    }
    readdir(directoryName) {
        if (!this.exists(directoryName)) {
            throw new Error(`${directoryName} not found`);
        }
        const p = this.pathForArtifact(directoryName);
        return fs.readdirSync(p);
    }
    list() {
        return fs.readdirSync(this.outdir).sort();
    }
    lock() {
        this.locked = true;
    }
    pathForArtifact(id) {
        return path.join(this.outdir, id);
    }
    canWrite(artifactName) {
        if (this.exists(artifactName)) {
            throw new Error(`An artifact named ${artifactName} was already written to this session`);
        }
        if (this.locked) {
            throw new Error('Session has already been finalized');
        }
    }
}
exports.FileSystemStore = FileSystemStore;
class InMemoryStore {
    constructor() {
        this.files = {};
        this.dirs = {}; // value is path to a temporary directory
        this.locked = false;
    }
    writeFile(fileName, data) {
        this.canWrite(fileName);
        this.files[fileName] = data;
    }
    writeJson(fileName, json) {
        this.writeFile(fileName, JSON.stringify(json, undefined, 2));
    }
    readFile(fileName) {
        if (!(fileName in this.files)) {
            throw new Error(`${fileName} not found`);
        }
        return this.files[fileName];
    }
    readJson(fileName) {
        return JSON.parse(this.readFile(fileName).toString());
    }
    exists(name) {
        return name in this.files || name in this.dirs;
    }
    mkdir(directoryName) {
        this.canWrite(directoryName);
        const p = fs.mkdtempSync(path.join(os.tmpdir(), directoryName));
        this.dirs[directoryName] = p;
        return p;
    }
    readdir(directoryName) {
        if (!this.exists(directoryName)) {
            throw new Error(`${directoryName} not found`);
        }
        const p = this.dirs[directoryName];
        return fs.readdirSync(p);
    }
    list() {
        return [...Object.keys(this.files), ...Object.keys(this.dirs)].sort();
    }
    lock() {
        this.locked = true;
    }
    canWrite(artifactName) {
        if (this.exists(artifactName)) {
            throw new Error(`An artifact named ${artifactName} was already written to this session`);
        }
        if (this.locked) {
            throw new Error('Session has already been finalized');
        }
    }
}
exports.InMemoryStore = InMemoryStore;
function renderLegacyStacks(manifest, store) {
    // special case for backwards compat. build a list of stacks for the manifest
    const stacks = new Array();
    const artifacts = manifest.artifacts || {};
    for (const [id, artifact] of Object.entries(artifacts)) {
        if (artifact.type === cxapi.ArtifactType.AwsCloudFormationStack) {
            const templateFile = artifact.properties && artifact.properties.templateFile;
            if (!templateFile) {
                throw new Error(`Invalid cloudformation artifact. Missing "template" property`);
            }
            const template = store.readJson(templateFile);
            const match = cxapi.AWS_ENV_REGEX.exec(artifact.environment);
            if (!match) {
                throw new Error(`"environment" must match regex: ${cxapi.AWS_ENV_REGEX}`);
            }
            stacks.push(util_1.filterUndefined({
                name: id,
                environment: { name: artifact.environment.substr('aws://'.length), account: match[1], region: match[2] },
                template,
                metadata: artifact.metadata || {},
                autoDeploy: artifact.autoDeploy,
                dependsOn: artifact.dependencies && artifact.dependencies.length > 0 ? artifact.dependencies : undefined,
                missing: artifact.missing
            }));
        }
    }
    return stacks;
}
exports.renderLegacyStacks = renderLegacyStacks;
//# sourceMappingURL=data:application/json;base64,