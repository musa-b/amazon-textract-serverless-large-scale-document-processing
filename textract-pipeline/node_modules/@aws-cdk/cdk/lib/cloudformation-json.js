"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const instrinsics_1 = require("./instrinsics");
const resolve_1 = require("./resolve");
const token_1 = require("./token");
/**
 * Class for JSON routines that are framework-aware
 */
class CloudFormationJSON {
    /**
     * Turn an arbitrary structure potentially containing Tokens into a JSON string.
     *
     * Returns a Token which will evaluate to CloudFormation expression that
     * will be evaluated by CloudFormation to the JSON representation of the
     * input structure.
     *
     * All Tokens substituted in this way must return strings, or the evaluation
     * in CloudFormation will fail.
     *
     * @param obj The object to stringify
     * @param context The Construct from which to resolve any Tokens found in the object
     */
    static stringify(obj, context) {
        return new token_1.Token(() => {
            // Resolve inner value first so that if they evaluate to literals, we
            // maintain the type (and discard 'undefined's).
            //
            // Then replace intrinsics with a special subclass of Token that
            // overrides toJSON() to the marker string, so if we resolve() the
            // strings again it evaluates to the right string. It also
            // deep-escapes any strings inside the intrinsic, so that if literal
            // strings are used in {Fn::Join} or something, they will end up
            // escaped in the final JSON output.
            const resolved = resolve_1.resolve(obj, {
                scope: context,
                prefix: []
            });
            // We can just directly return this value, since resolve() will be called
            // on our return value anyway.
            return JSON.stringify(deepReplaceIntrinsics(resolved));
        }).toString();
        /**
         * Recurse into a structure, replace all intrinsics with IntrinsicTokens.
         */
        function deepReplaceIntrinsics(x) {
            if (x == null) {
                return x;
            }
            if (instrinsics_1.isIntrinsic(x)) {
                return wrapIntrinsic(x);
            }
            if (Array.isArray(x)) {
                return x.map(deepReplaceIntrinsics);
            }
            if (typeof x === 'object') {
                for (const key of Object.keys(x)) {
                    x[key] = deepReplaceIntrinsics(x[key]);
                }
            }
            return x;
        }
        function wrapIntrinsic(intrinsic) {
            return new IntrinsicToken(() => deepQuoteStringsForJSON(intrinsic));
        }
    }
}
exports.CloudFormationJSON = CloudFormationJSON;
/**
 * Token that also stringifies in the toJSON() operation.
 */
class IntrinsicToken extends token_1.Token {
    /**
     * Special handler that gets called when JSON.stringify() is used.
     */
    toJSON() {
        return this.toString();
    }
}
/**
 * Deep escape strings for use in a JSON context
 */
function deepQuoteStringsForJSON(x) {
    if (typeof x === 'string') {
        // Whenever we escape a string we strip off the outermost quotes
        // since we're already in a quoted context.
        const stringified = JSON.stringify(x);
        return stringified.substring(1, stringified.length - 1);
    }
    if (Array.isArray(x)) {
        return x.map(deepQuoteStringsForJSON);
    }
    if (typeof x === 'object') {
        for (const key of Object.keys(x)) {
            x[key] = deepQuoteStringsForJSON(x[key]);
        }
    }
    return x;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xvdWRmb3JtYXRpb24tanNvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImNsb3VkZm9ybWF0aW9uLWpzb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQSwrQ0FBNEM7QUFDNUMsdUNBQW9DO0FBQ3BDLG1DQUFnQztBQUVoQzs7R0FFRztBQUNILE1BQWEsa0JBQWtCO0lBQzdCOzs7Ozs7Ozs7Ozs7T0FZRztJQUNJLE1BQU0sQ0FBQyxTQUFTLENBQUMsR0FBUSxFQUFFLE9BQW1CO1FBQ25ELE9BQU8sSUFBSSxhQUFLLENBQUMsR0FBRyxFQUFFO1lBQ3BCLHFFQUFxRTtZQUNyRSxnREFBZ0Q7WUFDaEQsRUFBRTtZQUNGLGdFQUFnRTtZQUNoRSxrRUFBa0U7WUFDbEUsMERBQTBEO1lBQzFELG9FQUFvRTtZQUNwRSxnRUFBZ0U7WUFDaEUsb0NBQW9DO1lBQ3BDLE1BQU0sUUFBUSxHQUFHLGlCQUFPLENBQUMsR0FBRyxFQUFFO2dCQUM1QixLQUFLLEVBQUUsT0FBTztnQkFDZCxNQUFNLEVBQUUsRUFBRTthQUNYLENBQUMsQ0FBQztZQUVILHlFQUF5RTtZQUN6RSw4QkFBOEI7WUFDOUIsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLHFCQUFxQixDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7UUFDekQsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUM7UUFFZDs7V0FFRztRQUNILFNBQVMscUJBQXFCLENBQUMsQ0FBTTtZQUNuQyxJQUFJLENBQUMsSUFBSSxJQUFJLEVBQUU7Z0JBQUUsT0FBTyxDQUFDLENBQUM7YUFBRTtZQUU1QixJQUFJLHlCQUFXLENBQUMsQ0FBQyxDQUFDLEVBQUU7Z0JBQ2xCLE9BQU8sYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQ3pCO1lBRUQsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFO2dCQUNwQixPQUFPLENBQUMsQ0FBQyxHQUFHLENBQUMscUJBQXFCLENBQUMsQ0FBQzthQUNyQztZQUVELElBQUksT0FBTyxDQUFDLEtBQUssUUFBUSxFQUFFO2dCQUN6QixLQUFLLE1BQU0sR0FBRyxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUU7b0JBQ2hDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxxQkFBcUIsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztpQkFDeEM7YUFDRjtZQUVELE9BQU8sQ0FBQyxDQUFDO1FBQ1gsQ0FBQztRQUVELFNBQVMsYUFBYSxDQUFDLFNBQWM7WUFDbkMsT0FBTyxJQUFJLGNBQWMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO1FBQ3RFLENBQUM7SUFDSCxDQUFDO0NBQ0Y7QUE5REQsZ0RBOERDO0FBRUQ7O0dBRUc7QUFDSCxNQUFNLGNBQWUsU0FBUSxhQUFLO0lBQ2hDOztPQUVHO0lBQ0ksTUFBTTtRQUNYLE9BQU8sSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3pCLENBQUM7Q0FDRjtBQUVEOztHQUVHO0FBQ0gsU0FBUyx1QkFBdUIsQ0FBQyxDQUFNO0lBQ3JDLElBQUksT0FBTyxDQUFDLEtBQUssUUFBUSxFQUFFO1FBQ3pCLGdFQUFnRTtRQUNoRSwyQ0FBMkM7UUFDM0MsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN0QyxPQUFPLFdBQVcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7S0FDekQ7SUFFRCxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUU7UUFDcEIsT0FBTyxDQUFDLENBQUMsR0FBRyxDQUFDLHVCQUF1QixDQUFDLENBQUM7S0FDdkM7SUFFRCxJQUFJLE9BQU8sQ0FBQyxLQUFLLFFBQVEsRUFBRTtRQUN6QixLQUFLLE1BQU0sR0FBRyxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUU7WUFDaEMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLHVCQUF1QixDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1NBQzFDO0tBQ0Y7SUFFRCxPQUFPLENBQUMsQ0FBQztBQUNYLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJQ29uc3RydWN0IH0gZnJvbSBcIi4vY29uc3RydWN0XCI7XG5pbXBvcnQgeyBpc0ludHJpbnNpYyB9IGZyb20gXCIuL2luc3RyaW5zaWNzXCI7XG5pbXBvcnQgeyByZXNvbHZlIH0gZnJvbSBcIi4vcmVzb2x2ZVwiO1xuaW1wb3J0IHsgVG9rZW4gfSBmcm9tIFwiLi90b2tlblwiO1xuXG4vKipcbiAqIENsYXNzIGZvciBKU09OIHJvdXRpbmVzIHRoYXQgYXJlIGZyYW1ld29yay1hd2FyZVxuICovXG5leHBvcnQgY2xhc3MgQ2xvdWRGb3JtYXRpb25KU09OIHtcbiAgLyoqXG4gICAqIFR1cm4gYW4gYXJiaXRyYXJ5IHN0cnVjdHVyZSBwb3RlbnRpYWxseSBjb250YWluaW5nIFRva2VucyBpbnRvIGEgSlNPTiBzdHJpbmcuXG4gICAqXG4gICAqIFJldHVybnMgYSBUb2tlbiB3aGljaCB3aWxsIGV2YWx1YXRlIHRvIENsb3VkRm9ybWF0aW9uIGV4cHJlc3Npb24gdGhhdFxuICAgKiB3aWxsIGJlIGV2YWx1YXRlZCBieSBDbG91ZEZvcm1hdGlvbiB0byB0aGUgSlNPTiByZXByZXNlbnRhdGlvbiBvZiB0aGVcbiAgICogaW5wdXQgc3RydWN0dXJlLlxuICAgKlxuICAgKiBBbGwgVG9rZW5zIHN1YnN0aXR1dGVkIGluIHRoaXMgd2F5IG11c3QgcmV0dXJuIHN0cmluZ3MsIG9yIHRoZSBldmFsdWF0aW9uXG4gICAqIGluIENsb3VkRm9ybWF0aW9uIHdpbGwgZmFpbC5cbiAgICpcbiAgICogQHBhcmFtIG9iaiBUaGUgb2JqZWN0IHRvIHN0cmluZ2lmeVxuICAgKiBAcGFyYW0gY29udGV4dCBUaGUgQ29uc3RydWN0IGZyb20gd2hpY2ggdG8gcmVzb2x2ZSBhbnkgVG9rZW5zIGZvdW5kIGluIHRoZSBvYmplY3RcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgc3RyaW5naWZ5KG9iajogYW55LCBjb250ZXh0OiBJQ29uc3RydWN0KTogc3RyaW5nIHtcbiAgICByZXR1cm4gbmV3IFRva2VuKCgpID0+IHtcbiAgICAgIC8vIFJlc29sdmUgaW5uZXIgdmFsdWUgZmlyc3Qgc28gdGhhdCBpZiB0aGV5IGV2YWx1YXRlIHRvIGxpdGVyYWxzLCB3ZVxuICAgICAgLy8gbWFpbnRhaW4gdGhlIHR5cGUgKGFuZCBkaXNjYXJkICd1bmRlZmluZWQncykuXG4gICAgICAvL1xuICAgICAgLy8gVGhlbiByZXBsYWNlIGludHJpbnNpY3Mgd2l0aCBhIHNwZWNpYWwgc3ViY2xhc3Mgb2YgVG9rZW4gdGhhdFxuICAgICAgLy8gb3ZlcnJpZGVzIHRvSlNPTigpIHRvIHRoZSBtYXJrZXIgc3RyaW5nLCBzbyBpZiB3ZSByZXNvbHZlKCkgdGhlXG4gICAgICAvLyBzdHJpbmdzIGFnYWluIGl0IGV2YWx1YXRlcyB0byB0aGUgcmlnaHQgc3RyaW5nLiBJdCBhbHNvXG4gICAgICAvLyBkZWVwLWVzY2FwZXMgYW55IHN0cmluZ3MgaW5zaWRlIHRoZSBpbnRyaW5zaWMsIHNvIHRoYXQgaWYgbGl0ZXJhbFxuICAgICAgLy8gc3RyaW5ncyBhcmUgdXNlZCBpbiB7Rm46OkpvaW59IG9yIHNvbWV0aGluZywgdGhleSB3aWxsIGVuZCB1cFxuICAgICAgLy8gZXNjYXBlZCBpbiB0aGUgZmluYWwgSlNPTiBvdXRwdXQuXG4gICAgICBjb25zdCByZXNvbHZlZCA9IHJlc29sdmUob2JqLCB7XG4gICAgICAgIHNjb3BlOiBjb250ZXh0LFxuICAgICAgICBwcmVmaXg6IFtdXG4gICAgICB9KTtcblxuICAgICAgLy8gV2UgY2FuIGp1c3QgZGlyZWN0bHkgcmV0dXJuIHRoaXMgdmFsdWUsIHNpbmNlIHJlc29sdmUoKSB3aWxsIGJlIGNhbGxlZFxuICAgICAgLy8gb24gb3VyIHJldHVybiB2YWx1ZSBhbnl3YXkuXG4gICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoZGVlcFJlcGxhY2VJbnRyaW5zaWNzKHJlc29sdmVkKSk7XG4gICAgfSkudG9TdHJpbmcoKTtcblxuICAgIC8qKlxuICAgICAqIFJlY3Vyc2UgaW50byBhIHN0cnVjdHVyZSwgcmVwbGFjZSBhbGwgaW50cmluc2ljcyB3aXRoIEludHJpbnNpY1Rva2Vucy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBkZWVwUmVwbGFjZUludHJpbnNpY3MoeDogYW55KTogYW55IHtcbiAgICAgIGlmICh4ID09IG51bGwpIHsgcmV0dXJuIHg7IH1cblxuICAgICAgaWYgKGlzSW50cmluc2ljKHgpKSB7XG4gICAgICAgIHJldHVybiB3cmFwSW50cmluc2ljKHgpO1xuICAgICAgfVxuXG4gICAgICBpZiAoQXJyYXkuaXNBcnJheSh4KSkge1xuICAgICAgICByZXR1cm4geC5tYXAoZGVlcFJlcGxhY2VJbnRyaW5zaWNzKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiB4ID09PSAnb2JqZWN0Jykge1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBvZiBPYmplY3Qua2V5cyh4KSkge1xuICAgICAgICAgIHhba2V5XSA9IGRlZXBSZXBsYWNlSW50cmluc2ljcyh4W2tleV0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB4O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHdyYXBJbnRyaW5zaWMoaW50cmluc2ljOiBhbnkpOiBJbnRyaW5zaWNUb2tlbiB7XG4gICAgICByZXR1cm4gbmV3IEludHJpbnNpY1Rva2VuKCgpID0+IGRlZXBRdW90ZVN0cmluZ3NGb3JKU09OKGludHJpbnNpYykpO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIFRva2VuIHRoYXQgYWxzbyBzdHJpbmdpZmllcyBpbiB0aGUgdG9KU09OKCkgb3BlcmF0aW9uLlxuICovXG5jbGFzcyBJbnRyaW5zaWNUb2tlbiBleHRlbmRzIFRva2VuIHtcbiAgLyoqXG4gICAqIFNwZWNpYWwgaGFuZGxlciB0aGF0IGdldHMgY2FsbGVkIHdoZW4gSlNPTi5zdHJpbmdpZnkoKSBpcyB1c2VkLlxuICAgKi9cbiAgcHVibGljIHRvSlNPTigpIHtcbiAgICByZXR1cm4gdGhpcy50b1N0cmluZygpO1xuICB9XG59XG5cbi8qKlxuICogRGVlcCBlc2NhcGUgc3RyaW5ncyBmb3IgdXNlIGluIGEgSlNPTiBjb250ZXh0XG4gKi9cbmZ1bmN0aW9uIGRlZXBRdW90ZVN0cmluZ3NGb3JKU09OKHg6IGFueSk6IGFueSB7XG4gIGlmICh0eXBlb2YgeCA9PT0gJ3N0cmluZycpIHtcbiAgICAvLyBXaGVuZXZlciB3ZSBlc2NhcGUgYSBzdHJpbmcgd2Ugc3RyaXAgb2ZmIHRoZSBvdXRlcm1vc3QgcXVvdGVzXG4gICAgLy8gc2luY2Ugd2UncmUgYWxyZWFkeSBpbiBhIHF1b3RlZCBjb250ZXh0LlxuICAgIGNvbnN0IHN0cmluZ2lmaWVkID0gSlNPTi5zdHJpbmdpZnkoeCk7XG4gICAgcmV0dXJuIHN0cmluZ2lmaWVkLnN1YnN0cmluZygxLCBzdHJpbmdpZmllZC5sZW5ndGggLSAxKTtcbiAgfVxuXG4gIGlmIChBcnJheS5pc0FycmF5KHgpKSB7XG4gICAgcmV0dXJuIHgubWFwKGRlZXBRdW90ZVN0cmluZ3NGb3JKU09OKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgeCA9PT0gJ29iamVjdCcpIHtcbiAgICBmb3IgKGNvbnN0IGtleSBvZiBPYmplY3Qua2V5cyh4KSkge1xuICAgICAgeFtrZXldID0gZGVlcFF1b3RlU3RyaW5nc0ZvckpTT04oeFtrZXldKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4geDtcbn1cbiJdfQ==