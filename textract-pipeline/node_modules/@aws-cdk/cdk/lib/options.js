"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Global options for resolve()
 *
 * Because there are many independent calls to resolve(), some losing context,
 * we cannot simply pass through options at each individual call. Instead,
 * we configure global context at the stack synthesis level.
 */
class ResolveConfiguration {
    constructor() {
        this.options = new Array();
    }
    push(options) {
        this.options.push(options);
        return {
            pop: () => {
                if (this.options.length === 0 || this.options[this.options.length - 1] !== options) {
                    throw new Error('ResolveConfiguration push/pop mismatch');
                }
                this.options.pop();
            }
        };
    }
    get collect() {
        for (let i = this.options.length - 1; i >= 0; i--) {
            const ret = this.options[i].collect;
            if (ret !== undefined) {
                return ret;
            }
        }
        return undefined;
    }
}
exports.ResolveConfiguration = ResolveConfiguration;
const glob = global;
/**
 * Singleton instance of resolver options
 */
exports.RESOLVE_OPTIONS = glob.__cdkResolveOptions = glob.__cdkResolveOptions || new ResolveConfiguration();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3B0aW9ucy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIm9wdGlvbnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFPQTs7Ozs7O0dBTUc7QUFDSCxNQUFhLG9CQUFvQjtJQUFqQztRQUNtQixZQUFPLEdBQUcsSUFBSSxLQUFLLEVBQWtCLENBQUM7SUFzQnpELENBQUM7SUFwQlEsSUFBSSxDQUFDLE9BQXVCO1FBQ2pDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBRTNCLE9BQU87WUFDTCxHQUFHLEVBQUUsR0FBRyxFQUFFO2dCQUNSLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEtBQUssQ0FBQyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLEtBQUssT0FBTyxFQUFFO29CQUNsRixNQUFNLElBQUksS0FBSyxDQUFDLHdDQUF3QyxDQUFDLENBQUM7aUJBQzNEO2dCQUNELElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLENBQUM7WUFDckIsQ0FBQztTQUNGLENBQUM7SUFDSixDQUFDO0lBRUQsSUFBVyxPQUFPO1FBQ2hCLEtBQUssSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDakQsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUM7WUFDcEMsSUFBSSxHQUFHLEtBQUssU0FBUyxFQUFFO2dCQUFFLE9BQU8sR0FBRyxDQUFDO2FBQUU7U0FDdkM7UUFDRCxPQUFPLFNBQVMsQ0FBQztJQUNuQixDQUFDO0NBQ0Y7QUF2QkQsb0RBdUJDO0FBYUQsTUFBTSxJQUFJLEdBQUcsTUFBYSxDQUFDO0FBRTNCOztHQUVHO0FBQ1UsUUFBQSxlQUFlLEdBQXlCLElBQUksQ0FBQyxtQkFBbUIsR0FBRyxJQUFJLENBQUMsbUJBQW1CLElBQUksSUFBSSxvQkFBb0IsRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVG9rZW4gfSBmcm9tIFwiLi90b2tlblwiO1xuXG4vKipcbiAqIEZ1bmN0aW9uIHVzZWQgdG8gcHJlcHJvY2VzcyBUb2tlbnMgYmVmb3JlIHJlc29sdmluZ1xuICovXG5leHBvcnQgdHlwZSBDb2xsZWN0RnVuYyA9ICh0b2tlbjogVG9rZW4pID0+IHZvaWQ7XG5cbi8qKlxuICogR2xvYmFsIG9wdGlvbnMgZm9yIHJlc29sdmUoKVxuICpcbiAqIEJlY2F1c2UgdGhlcmUgYXJlIG1hbnkgaW5kZXBlbmRlbnQgY2FsbHMgdG8gcmVzb2x2ZSgpLCBzb21lIGxvc2luZyBjb250ZXh0LFxuICogd2UgY2Fubm90IHNpbXBseSBwYXNzIHRocm91Z2ggb3B0aW9ucyBhdCBlYWNoIGluZGl2aWR1YWwgY2FsbC4gSW5zdGVhZCxcbiAqIHdlIGNvbmZpZ3VyZSBnbG9iYWwgY29udGV4dCBhdCB0aGUgc3RhY2sgc3ludGhlc2lzIGxldmVsLlxuICovXG5leHBvcnQgY2xhc3MgUmVzb2x2ZUNvbmZpZ3VyYXRpb24ge1xuICBwcml2YXRlIHJlYWRvbmx5IG9wdGlvbnMgPSBuZXcgQXJyYXk8UmVzb2x2ZU9wdGlvbnM+KCk7XG5cbiAgcHVibGljIHB1c2gob3B0aW9uczogUmVzb2x2ZU9wdGlvbnMpOiBJT3B0aW9uc0NvbnRleHQge1xuICAgIHRoaXMub3B0aW9ucy5wdXNoKG9wdGlvbnMpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIHBvcDogKCkgPT4ge1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmxlbmd0aCA9PT0gMCB8fCB0aGlzLm9wdGlvbnNbdGhpcy5vcHRpb25zLmxlbmd0aCAtIDFdICE9PSBvcHRpb25zKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZXNvbHZlQ29uZmlndXJhdGlvbiBwdXNoL3BvcCBtaXNtYXRjaCcpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMub3B0aW9ucy5wb3AoKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgcHVibGljIGdldCBjb2xsZWN0KCk6IENvbGxlY3RGdW5jIHwgdW5kZWZpbmVkIHtcbiAgICBmb3IgKGxldCBpID0gdGhpcy5vcHRpb25zLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICBjb25zdCByZXQgPSB0aGlzLm9wdGlvbnNbaV0uY29sbGVjdDtcbiAgICAgIGlmIChyZXQgIT09IHVuZGVmaW5lZCkgeyByZXR1cm4gcmV0OyB9XG4gICAgfVxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbn1cblxuaW50ZXJmYWNlIElPcHRpb25zQ29udGV4dCB7XG4gIHBvcCgpOiB2b2lkO1xufVxuXG5pbnRlcmZhY2UgUmVzb2x2ZU9wdGlvbnMge1xuICAvKipcbiAgICogV2hhdCBmdW5jdGlvbiB0byB1c2UgdG8gcHJlcHJvY2VzcyBUb2tlbnMgYmVmb3JlIHJlc29sdmluZyB0aGVtXG4gICAqL1xuICBjb2xsZWN0PzogQ29sbGVjdEZ1bmM7XG59XG5cbmNvbnN0IGdsb2IgPSBnbG9iYWwgYXMgYW55O1xuXG4vKipcbiAqIFNpbmdsZXRvbiBpbnN0YW5jZSBvZiByZXNvbHZlciBvcHRpb25zXG4gKi9cbmV4cG9ydCBjb25zdCBSRVNPTFZFX09QVElPTlM6IFJlc29sdmVDb25maWd1cmF0aW9uID0gZ2xvYi5fX2Nka1Jlc29sdmVPcHRpb25zID0gZ2xvYi5fX2Nka1Jlc29sdmVPcHRpb25zIHx8IG5ldyBSZXNvbHZlQ29uZmlndXJhdGlvbigpO1xuIl19