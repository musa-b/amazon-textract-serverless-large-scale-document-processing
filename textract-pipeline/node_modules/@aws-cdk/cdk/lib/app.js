"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cxapi = require("@aws-cdk/cx-api");
const construct_1 = require("./construct");
const synthesis_1 = require("./synthesis");
/**
 * Represents a CDK program.
 */
class App extends construct_1.Root {
    /**
     * Initializes a CDK application.
     * @param request Optional toolkit request (e.g. for tests)
     */
    constructor(props = {}) {
        super();
        this.loadContext(props.context);
        // both are reverse logic
        this.legacyManifest = this.node.getContext(cxapi.DISABLE_LEGACY_MANIFEST_CONTEXT) ? false : true;
        this.runtimeInformation = this.node.getContext(cxapi.DISABLE_VERSION_REPORTING) ? false : true;
        const autoRun = props.autoRun !== undefined ? props.autoRun : cxapi.OUTDIR_ENV in process.env;
        if (autoRun) {
            // run() guarantuees it will only execute once, so a default of 'true' doesn't bite manual calling
            // of the function.
            process.once('beforeExit', () => this.run());
        }
    }
    /**
     * Runs the program. Output is written to output directory as specified in the request.
     */
    run() {
        // this app has already been executed, no-op for you
        if (this._session) {
            return this._session;
        }
        const outdir = process.env[cxapi.OUTDIR_ENV];
        let store;
        if (outdir) {
            store = new synthesis_1.FileSystemStore({ outdir });
        }
        else {
            store = new synthesis_1.InMemoryStore();
        }
        const synth = new synthesis_1.Synthesizer();
        this._session = synth.synthesize(this, {
            store,
            legacyManifest: this.legacyManifest,
            runtimeInformation: this.runtimeInformation
        });
        return this._session;
    }
    /**
     * Synthesize and validate a single stack.
     * @param stackName The name of the stack to synthesize
     * @deprecated This method is going to be deprecated in a future version of the CDK
     */
    synthesizeStack(stackName) {
        if (!this.legacyManifest) {
            throw new Error('No legacy manifest available, return an old-style stack output');
        }
        const session = this.run();
        const legacy = session.store.readJson(cxapi.OUTFILE_NAME);
        const res = legacy.stacks.find(s => s.name === stackName);
        if (!res) {
            throw new Error(`Stack "${stackName}" not found`);
        }
        return res;
    }
    /**
     * Synthesizes multiple stacks
     * @deprecated This method is going to be deprecated in a future version of the CDK
     */
    synthesizeStacks(stackNames) {
        const ret = [];
        for (const stackName of stackNames) {
            ret.push(this.synthesizeStack(stackName));
        }
        return ret;
    }
    loadContext(defaults = {}) {
        // prime with defaults passed through constructor
        for (const [k, v] of Object.entries(defaults)) {
            this.node.setContext(k, v);
        }
        // read from environment
        const contextJson = process.env[cxapi.CONTEXT_ENV];
        const contextFromEnvironment = contextJson
            ? JSON.parse(contextJson)
            : {};
        for (const [k, v] of Object.entries(contextFromEnvironment)) {
            this.node.setContext(k, v);
        }
    }
}
exports.App = App;
//# sourceMappingURL=data:application/json;base64,