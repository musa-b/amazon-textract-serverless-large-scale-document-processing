"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const reference_1 = require("./reference");
const CFN_REFERENCE_SYMBOL = Symbol('@aws-cdk/cdk.CfnReference');
/**
 * A Token that represents a CloudFormation reference to another resource
 *
 * If these references are used in a different stack from where they are
 * defined, appropriate CloudFormation `Export`s and `Fn::ImportValue`s will be
 * synthesized automatically instead of the regular CloudFormation references.
 *
 * Additionally, the dependency between the stacks will be recorded, and the toolkit
 * will make sure to deploy producing stack before the consuming stack.
 *
 * This magic happens in the prepare() phase, where consuming stacks will call
 * `consumeFromStack` on these Tokens and if they happen to be exported by a different
 * Stack, we'll register the dependency.
 */
class CfnReference extends reference_1.Reference {
    /**
     * Check whether this is actually a Reference
     */
    static isCfnReference(x) {
        return x[CFN_REFERENCE_SYMBOL] === true;
    }
    constructor(value, displayName, target) {
        if (typeof (value) === 'function') {
            throw new Error('Reference can only hold CloudFormation intrinsics (not a function)');
        }
        // prepend scope path to display name
        super(value, `${target.node.id}.${displayName}`, target);
        this.originalDisplayName = displayName;
        this.replacementTokens = new Map();
        this.producingStack = target.node.stack;
        Object.defineProperty(this, CFN_REFERENCE_SYMBOL, { value: true });
    }
    resolve(context) {
        // If we have a special token for this consuming stack, resolve that. Otherwise resolve as if
        // we are in the same stack.
        const token = this.replacementTokens.get(context.scope.node.stack);
        if (token) {
            return token.resolve(context);
        }
        else {
            return super.resolve(context);
        }
    }
    /**
     * Register a stack this references is being consumed from.
     */
    consumeFromStack(consumingStack, consumingConstruct) {
        if (this.producingStack && this.producingStack !== consumingStack && !this.replacementTokens.has(consumingStack)) {
            // We're trying to resolve a cross-stack reference
            consumingStack.addDependency(this.producingStack, `${consumingConstruct.node.path} -> ${this.target.node.path}.${this.originalDisplayName}`);
            this.replacementTokens.set(consumingStack, this.exportValue(this, consumingStack));
        }
    }
    /**
     * Export a Token value for use in another stack
     *
     * Works by mutating the producing stack in-place.
     */
    exportValue(tokenValue, consumingStack) {
        const producingStack = this.producingStack;
        if (producingStack.env.account !== consumingStack.env.account || producingStack.env.region !== consumingStack.env.region) {
            throw new Error('Can only reference cross stacks in the same region and account.');
        }
        // Ensure a singleton "Exports" scoping Construct
        // This mostly exists to trigger LogicalID munging, which would be
        // disabled if we parented constructs directly under Stack.
        // Also it nicely prevents likely construct name clashes
        const exportsName = 'Exports';
        let stackExports = producingStack.node.tryFindChild(exportsName);
        if (stackExports === undefined) {
            stackExports = new construct_1.Construct(producingStack, exportsName);
        }
        // Ensure a singleton CfnOutput for this value
        const resolved = producingStack.node.resolve(tokenValue);
        const id = 'Output' + JSON.stringify(resolved);
        let output = stackExports.node.tryFindChild(id);
        if (!output) {
            output = new cfn_output_1.CfnOutput(stackExports, id, { value: tokenValue });
        }
        // We want to return an actual FnImportValue Token here, but Fn.importValue() returns a 'string',
        // so construct one in-place.
        return new token_1.Token({ 'Fn::ImportValue': output.obtainExportName() });
    }
}
exports.CfnReference = CfnReference;
const cfn_output_1 = require("./cfn-output");
const construct_1 = require("./construct");
const token_1 = require("./token");
//# sourceMappingURL=data:application/json;base64,