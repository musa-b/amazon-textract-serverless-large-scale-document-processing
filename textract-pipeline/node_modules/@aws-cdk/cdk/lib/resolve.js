"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const encoding_1 = require("./encoding");
const options_1 = require("./options");
const token_1 = require("./token");
const unresolved_1 = require("./unresolved");
// This file should not be exported to consumers, resolving should happen through Construct.resolve()
/**
 * Resolves an object by evaluating all tokens and removing any undefined or empty objects or arrays.
 * Values can only be primitives, arrays or tokens. Other objects (i.e. with methods) will be rejected.
 *
 * @param obj The object to resolve.
 * @param prefix Prefix key path components for diagnostics.
 */
function resolve(obj, context) {
    const pathName = '/' + context.prefix.join('/');
    // protect against cyclic references by limiting depth.
    if (context.prefix.length > 200) {
        throw new Error('Unable to resolve object tree with circular reference. Path: ' + pathName);
    }
    //
    // undefined
    //
    if (typeof (obj) === 'undefined') {
        return undefined;
    }
    //
    // null
    //
    if (obj === null) {
        return null;
    }
    //
    // functions - not supported (only tokens are supported)
    //
    if (typeof (obj) === 'function') {
        throw new Error(`Trying to resolve a non-data object. Only token are supported for lazy evaluation. Path: ${pathName}. Object: ${obj}`);
    }
    //
    // string - potentially replace all stringified Tokens
    //
    if (typeof (obj) === 'string') {
        return encoding_1.TOKEN_MAP.resolveStringTokens(obj, context);
    }
    //
    // primitives - as-is
    //
    if (typeof (obj) !== 'object' || obj instanceof Date) {
        return obj;
    }
    //
    // arrays - resolve all values, remove undefined and remove empty arrays
    //
    if (Array.isArray(obj)) {
        if (encoding_1.containsListToken(obj)) {
            return encoding_1.TOKEN_MAP.resolveListTokens(obj, context);
        }
        const arr = obj
            .map((x, i) => resolve(x, Object.assign({}, context, { prefix: context.prefix.concat(i.toString()) })))
            .filter(x => typeof (x) !== 'undefined');
        return arr;
    }
    //
    // tokens - invoke 'resolve' and continue to resolve recursively
    //
    if (unresolved_1.unresolved(obj)) {
        const collect = options_1.RESOLVE_OPTIONS.collect;
        if (collect) {
            collect(obj);
        }
        const resolved = obj[token_1.RESOLVE_METHOD](context);
        let deepResolved = resolve(resolved, context);
        if (token_1.isResolvedValuePostProcessor(obj)) {
            deepResolved = obj.postProcess(deepResolved, context);
        }
        return deepResolved;
    }
    //
    // objects - deep-resolve all values
    //
    // Must not be a Construct at this point, otherwise you probably made a typo
    // mistake somewhere and resolve will get into an infinite loop recursing into
    // child.parent <---> parent.children
    if (isConstruct(obj)) {
        throw new Error('Trying to resolve() a Construct at ' + pathName);
    }
    const result = {};
    for (const key of Object.keys(obj)) {
        const resolvedKey = resolve(key, context);
        if (typeof (resolvedKey) !== 'string') {
            throw new Error(`The key "${key}" has been resolved to ${JSON.stringify(resolvedKey)} but must be resolvable to a string`);
        }
        const value = resolve(obj[key], Object.assign({}, context, { prefix: context.prefix.concat(key) }));
        // skip undefined
        if (typeof (value) === 'undefined') {
            continue;
        }
        result[resolvedKey] = value;
    }
    return result;
}
exports.resolve = resolve;
/**
 * Find all Tokens that are used in the given structure
 */
function findTokens(scope, fn) {
    const ret = new Array();
    const options = options_1.RESOLVE_OPTIONS.push({ collect: ret.push.bind(ret) });
    try {
        resolve(fn(), {
            scope,
            prefix: []
        });
    }
    finally {
        options.pop();
    }
    return ret;
}
exports.findTokens = findTokens;
/**
 * Determine whether an object is a Construct
 *
 * Not in 'construct.ts' because that would lead to a dependency cycle via 'uniqueid.ts',
 * and this is a best-effort protection against a common programming mistake anyway.
 */
function isConstruct(x) {
    return x._children !== undefined && x._metadata !== undefined;
}
//# sourceMappingURL=data:application/json;base64,