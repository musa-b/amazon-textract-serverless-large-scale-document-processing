{
  "author": {
    "name": "Amazon Web Services",
    "organization": true,
    "roles": [
      "author"
    ],
    "url": "https://aws.amazon.com"
  },
  "dependencies": {
    "@aws-cdk/cx-api": {
      "peer": true,
      "targets": {
        "dotnet": {
          "assemblyOriginatorKeyFile": "../../key.snk",
          "namespace": "Amazon.CDK.CXAPI",
          "packageId": "Amazon.CDK.CXAPI",
          "signAssembly": true
        },
        "java": {
          "maven": {
            "artifactId": "cdk-cx-api",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.cxapi"
        },
        "js": {
          "npm": "@aws-cdk/cx-api"
        },
        "python": {
          "distName": "aws-cdk.cx-api",
          "module": "aws_cdk.cx_api"
        }
      },
      "version": "0.28.0"
    }
  },
  "description": "AWS Cloud Development Kit Core Library",
  "homepage": "https://github.com/awslabs/aws-cdk",
  "license": "Apache-2.0",
  "name": "@aws-cdk/cdk",
  "readme": {
    "markdown": "## AWS Cloud Development Kit Core Library\n\nThis library includes the basic building blocks of\nthe [AWS Cloud Development Kit](https://github.com/awslabs/aws-cdk) (AWS CDK).\n\n## Aspects\n\nAspects are a mechanism to extend the CDK without having to directly impact the\nclass hierarchy. We have implemented aspects using the [Visitor\nPattern](https://en.wikipedia.org/wiki/Visitor_pattern).\n\nAn aspect in the CDK is defined by this [interface](lib/aspect.ts)\n\nAspects can be applied to any construct. During the tree\n\"prepare\" phase the aspect will visit each construct in the tree once.\nAspects are invoked in the order they were added to the construct. They\ntraverse the construct tree in a breadth first order starting at the `App`\nending at the leaf nodes (most commonly the CloudFormation Resource). Aspect\nauthors implement the `visit(IConstruct)` function and can inspect the\n`Construct` for specific characteristics. Such as, is this construct a\nCloudFormation Resource?\n\n## Tagging\n\nTags are implemented using aspects.\n\nTags can be applied to any construct. Tags are inherited, based on the scope. If\nyou tag construct A, and A contains construct B, construct B inherits the tag.\nThe Tag API supports:\n\n * `Tag` add (apply) a tag, either to specific resources or all but specific resources\n * `RemoveTag` remove a tag, again either from specific resources or all but specific resources\n\nA simple example, if you create a stack and want anything in the stack to receive a\ntag:\n\n```ts\nimport cdk = require('@aws-cdk/cdk');\n\nconst app = new cdk.App();\nconst theBestStack = new cdk.Stack(app, 'MarketingSystem');\ntheBestStack.node.apply(new cdk.Tag('StackType', 'TheBest'));\n\n// any resources added that support tags will get them\n```\n\n> The goal was to enable the ability to define tags in one place and have them\n> applied consistently for all resources that support tagging. In addition\n> the developer should not have to know if the resource supports tags. The\n> developer defines the tagging intents for all resources within a path.\n> If the resources support tags they are added, else no action is taken.\n\n### Tag Example with ECS\n\nWe are going to use the [ECS example](https://awslabs.github.io/aws-cdk/ecs_example.html) as starting point.\n\nFor the purposes of example, this ECS cluster is for the Marketing Department.\nMarketing has two core groups Business to Business (B2B) and Business to Consumer\n(B2C). However, the Marketing team relies on the Platform team to help build the\ncommon components across businesses and separates costs to match. The goal here\nis tag the Platform team resources, the Marketing Department and then Marketing\ngroups to enable proper cost allocations.\n\nWe have modified the example and the code is located:\nexamples/cdk-examples-typescript/hello-cdk-ecs-tags\n\nWhen the example is run the following tags are created:\n\n> We are omitting the default tags for VPC components.\n\n| Construct Path | Tag Key | Tag Value |\n| ----------|:---------|:-----|\n|MarketingSystem/MarketingVpc|CostCenter|Platform|\n|MarketingSystem/MarketingVpc/PublicSubnet1| CostCenter | Platform|\n|MarketingSystem/MarketingVpc/PublicSubnet1/RouteTable| CostCenter | Platform|\n|MarketingSystem/MarketingVpc/PublicSubnet1/NATGateway| CostCenter | Platform|\n|MarketingSystem/MarketingVpc/PublicSubnet2| CostCenter | Platform|\n|MarketingSystem/MarketingVpc/PublicSubnet2/RouteTable| CostCenter | Platform|\n|MarketingSystem/MarketingVpc/PublicSubnet2/NATGateway| CostCenter | Platform|\n|MarketingSystem/MarketingVpc/PublicSubnet3| CostCenter | Platform|\n|MarketingSystem/MarketingVpc/PublicSubnet3/RouteTable| CostCenter | Platform|\n|MarketingSystem/MarketingVpc/PublicSubnet3/NATGateway| CostCenter | Platform|\n|MarketingSystem/MarketingVpc/PrivateSubnet1| CostCenter | Platform|\n|MarketingSystem/MarketingVpc/PrivateSubnet1/RouteTable| CostCenter | Platform|\n|MarketingSystem/MarketingVpc/PrivateSubnet2| CostCenter | Platform|\n|MarketingSystem/MarketingVpc/PrivateSubnet2/RouteTable| CostCenter | Platform|\n|MarketingSystem/MarketingVpc/PrivateSubnet3| CostCenter | Platform|\n|MarketingSystem/MarketingVpc/PrivateSubnet3/RouteTable| CostCenter | Platform|\n|MarketingSystem/MarketingVpc/IGW|CostCenter|Platform|\n|MarketingSystem/B2BService/Service/SecurityGroup/Resource|CostCenter|Marketing|\n|MarketingSystem/B2BService/LB/Resource|CostCenter|Marketing|\n|MarketingSystem/B2BService/LB/SecurityGroup/Resource|CostCenter|Marketing|\n|MarketingSystem/B2BService/LB/PublicListener/ECSGroup/Resource|CostCenter|Marketing|\n|MarketingSystem/B2CService/Service/SecurityGroup/Resource|CostCenter|Marketing|\n|MarketingSystem/B2CService/LB/Resource|CostCenter|Marketing|\n|MarketingSystem/B2CService/LB/SecurityGroup/Resource|CostCenter|Marketing|\n|MarketingSystem/B2CService/LB/PublicListener/ECSGroup/Resource|CostCenter|Marketing|\n\nAs you can see many tags are generated with only a few intent based directives. The CDK does default some additional tags for suggested `Name` keys. If you want to remove those tags you can do so by using the `RemoveTag` aspect, see below:\n\n```ts\n// snip //\nconst vpc = new ec2.VpcNetwork(marketingStack, 'MarketingVpc', {\n  maxAZs: 3 // Default is all AZs in region\n  });\n// override the VPC tags with Platform\n// this will tag the VPC, Subnets, Route Tables, IGW, and NatGWs\nvpc.node.apply(new cdk.Tag(COST_CENTER_KEY, 'Platform'));\nvpc.node.apply(new cdk.RemoveTag('Name'));\n// snip //\n```\n\nThis will remove the name tags from the VPC, subnets, route tables and NAT\ngateways. If you've been following closely, this may lead you to ask how does\nremove work when the tag is actually applied closer to the resource? The Tag API\nhas a few features that are covered later to explain how this works.\n\n### API\n\nIn order to enable additional controls a Tag can specifically include or\nexclude a CloudFormation Resource Type, propagate tags for an autoscaling group,\nand use priority to override the default precedence. See the `TagProps`\ninterface for more details.\n\nTags can be configured by using the properties for the AWS CloudFormation layer\nresources or by using the tag aspects described here. The aspects will always\ntake precedence over the AWS CloudFormation layer in the event of a name\ncollision. The tags will be merged otherwise. For the aspect based tags, the\ntags applied closest to the resource will take precedence, given an equal\npriority. A higher priority tag will always take precedence over a lower\npriority tag.\n\n#### applyToLaunchedInstances\n\nThis property is a boolean that defaults to `true`. When `true` and the aspect\nvisits an AutoScalingGroup resource the `PropagateAtLaunch` property is set to\ntrue. If false the property is set accordingly.\n\n```ts\n// ... snip\nconst vpc = new ec2.VpcNetwork(this, 'MyVpc', { ... });\nvpc.node.apply(new cdk.Tag('MyKey', 'MyValue', { applyToLaunchedInstances: false }));\n// ... snip\n```\n\n#### includeResourceTypes\n\nInclude is an array property that contains strings of CloudFormation Resource\nTypes. As the aspect visits nodes it only takes action if node is one of the\nresource types in the array. By default the array is empty and an empty array is\ninterpreted as apply to any resource type.\n\n```ts\n// ... snip\nconst vpc = new ec2.VpcNetwork(this, 'MyVpc', { ... });\nvpc.node.apply(new cdk.Tag('MyKey', 'MyValue', { includeResourceTypes: ['AWS::EC2::Subnet']}));\n// ... snip\n```\n\n#### excludeResourceTypes\n\nExclude is the inverse of include. Exclude is also an array of CloudFormation\nResource Types. As the aspect visit nodes it will not take action if the node is\none of the resource types in the array. By default the array is empty and an\nempty array is interpreted to match no resource type. Exclude takes precedence\nover include in the event of a collision.\n\n```ts\n// ... snip\nconst vpc = new ec2.VpcNetwork(this, 'MyVpc', { ... });\nvpc.node.apply(new cdk.Tag('MyKey', 'MyValue', { exludeResourceTypes: ['AWS::EC2::Subnet']}));\n// ... snip\n```\n\n#### priority\n\nPriority is used to control precedence when the default pattern does not work.\nIn general users should try to avoid using priority, but in some situations it\nis required. In the example above, this is how `RemoveTag` works. The default\nsetting for removing tags uses a higher priority than the standard tag.\n\n```ts\n// ... snip\nconst vpc = new ec2.VpcNetwork(this, 'MyVpc', { ... });\nvpc.node.apply(new cdk.Tag('MyKey', 'MyValue', { priority: 2 }));\n// ... snip\n```\n\n## Secrets\n\nTo help avoid accidental storage of secrets as plain text we use the `SecretValue` type to\nrepresent secrets.\n\nThe best practice is to store secrets in AWS Secrets Manager and reference them using `SecretValue.secretsManager`:\n\n```ts\nconst secret = SecretValue.secretsManager('secretId', {\n  jsonField: 'password' // optional: key of a JSON field to retrieve (defaults to all content),\n  versionId: 'id'       // optional: id of the version (default AWSCURRENT)\n  versionStage: 'stage' // optional: version stage name (default AWSCURRENT)\n});\n```\n\nUsing AWS Secrets Manager is the recommended way to reference secrets in a CDK app.\nHowever, `SecretValue` supports the following additional options:\n\n * `SecretValue.plainText(secret)`: stores the secret as plain text in your app and the resulting template (not recommended).\n * `SecretValue.ssmSecure(param, version)`: refers to a secret stored as a SecureString in the SSM Parameter Store.\n * `SecretValue.cfnParameter(param)`: refers to a secret passed through a CloudFormation parameter (must have `NoEcho: true`).\n * `SecretValue.cfnDynamicReference(dynref)`: refers to a secret described by a CloudFormation dynamic reference (used by `ssmSecure` and `secretsManager`).\n"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/awslabs/aws-cdk.git"
  },
  "schema": "jsii/1.0",
  "targets": {
    "dotnet": {
      "assemblyOriginatorKeyFile": "../../key.snk",
      "namespace": "Amazon.CDK",
      "packageId": "Amazon.CDK",
      "signAssembly": true
    },
    "java": {
      "maven": {
        "artifactId": "cdk",
        "groupId": "software.amazon.awscdk"
      },
      "package": "software.amazon.awscdk"
    },
    "js": {
      "npm": "@aws-cdk/cdk"
    },
    "python": {
      "distName": "aws-cdk.cdk",
      "module": "aws_cdk.cdk"
    }
  },
  "types": {
    "@aws-cdk/cdk.App": {
      "assembly": "@aws-cdk/cdk",
      "base": {
        "fqn": "@aws-cdk/cdk.Root"
      },
      "docs": {
        "comment": "Represents a CDK program."
      },
      "fqn": "@aws-cdk/cdk.App",
      "initializer": {
        "docs": {
          "comment": "Initializes a CDK application."
        },
        "initializer": true,
        "parameters": [
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/cdk.AppProps",
              "optional": true
            }
          }
        ]
      },
      "kind": "class",
      "methods": [
        {
          "docs": {
            "comment": "Runs the program. Output is written to output directory as specified in the request."
          },
          "name": "run",
          "returns": {
            "fqn": "@aws-cdk/cdk.ISynthesisSession"
          }
        },
        {
          "docs": {
            "comment": "Synthesize and validate a single stack.",
            "deprecated": "This method is going to be deprecated in a future version of the CDK"
          },
          "name": "synthesizeStack",
          "parameters": [
            {
              "docs": {
                "comment": "The name of the stack to synthesize"
              },
              "name": "stackName",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "fqn": "@aws-cdk/cx-api.SynthesizedStack"
          }
        },
        {
          "docs": {
            "comment": "Synthesizes multiple stacks",
            "deprecated": "This method is going to be deprecated in a future version of the CDK"
          },
          "name": "synthesizeStacks",
          "parameters": [
            {
              "name": "stackNames",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "string"
                  },
                  "kind": "array"
                }
              }
            }
          ],
          "returns": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/cx-api.SynthesizedStack"
              },
              "kind": "array"
            }
          }
        }
      ],
      "name": "App"
    },
    "@aws-cdk/cdk.AppProps": {
      "assembly": "@aws-cdk/cdk",
      "datatype": true,
      "docs": {
        "comment": "Custom construction properties for a CDK program"
      },
      "fqn": "@aws-cdk/cdk.AppProps",
      "kind": "interface",
      "name": "AppProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "comment": "Automatically call run before the application exits\n\nIf you set this, you don't have to call `run()` anymore.",
            "default": "true if running via CDK toolkit (CDK_OUTDIR is set), false otherwise"
          },
          "immutable": true,
          "name": "autoRun",
          "type": {
            "optional": true,
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "Additional context values for the application",
            "default": "No additional context"
          },
          "immutable": true,
          "name": "context",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "map"
            },
            "optional": true
          }
        }
      ]
    },
    "@aws-cdk/cdk.ArnComponents": {
      "assembly": "@aws-cdk/cdk",
      "datatype": true,
      "fqn": "@aws-cdk/cdk.ArnComponents",
      "kind": "interface",
      "name": "ArnComponents",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "comment": "Resource type (e.g. \"table\", \"autoScalingGroup\", \"certificate\").\nFor some resource types, e.g. S3 buckets, this field defines the bucket name."
          },
          "immutable": true,
          "name": "resource",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "The service namespace that identifies the AWS product (for example,\n's3', 'iam', 'codepipline')."
          },
          "immutable": true,
          "name": "service",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "The ID of the AWS account that owns the resource, without the hyphens.\nFor example, 123456789012. Note that the ARNs for some resources don't\nrequire an account number, so this component might be omitted.",
            "default": "The account the stack is deployed to."
          },
          "immutable": true,
          "name": "account",
          "type": {
            "optional": true,
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "The partition that the resource is in. For standard AWS regions, the\npartition is aws. If you have resources in other partitions, the\npartition is aws-partitionname. For example, the partition for resources\nin the China (Beijing) region is aws-cn.",
            "default": "The AWS partition the stack is deployed to."
          },
          "immutable": true,
          "name": "partition",
          "type": {
            "optional": true,
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "The region the resource resides in. Note that the ARNs for some resources\ndo not require a region, so this component might be omitted.",
            "default": "The region the stack is deployed to."
          },
          "immutable": true,
          "name": "region",
          "type": {
            "optional": true,
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "Resource name or path within the resource (i.e. S3 bucket object key) or\na wildcard such as ``\"*\"``. This is service-dependent."
          },
          "immutable": true,
          "name": "resourceName",
          "type": {
            "optional": true,
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "Separator between resource type and the resource.\n\nCan be either '/', ':' or an empty string. Will only be used if resourceName is defined.",
            "default": "'/'"
          },
          "immutable": true,
          "name": "sep",
          "type": {
            "optional": true,
            "primitive": "string"
          }
        }
      ]
    },
    "@aws-cdk/cdk.AutoScalingCreationPolicy": {
      "assembly": "@aws-cdk/cdk",
      "datatype": true,
      "docs": {
        "comment": "For an Auto Scaling group replacement update, specifies how many instances must signal success for the\nupdate to succeed."
      },
      "fqn": "@aws-cdk/cdk.AutoScalingCreationPolicy",
      "kind": "interface",
      "name": "AutoScalingCreationPolicy",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "comment": "Specifies the percentage of instances in an Auto Scaling replacement update that must signal success for the\nupdate to succeed. You can specify a value from 0 to 100. AWS CloudFormation rounds to the nearest tenth of a percent.\nFor example, if you update five instances with a minimum successful percentage of 50, three instances must signal success.\nIf an instance doesn't send a signal within the time specified by the Timeout property, AWS CloudFormation assumes that the\ninstance wasn't created."
          },
          "immutable": true,
          "name": "minSuccessfulInstancesPercent",
          "type": {
            "optional": true,
            "primitive": "number"
          }
        }
      ]
    },
    "@aws-cdk/cdk.AutoScalingReplacingUpdate": {
      "assembly": "@aws-cdk/cdk",
      "datatype": true,
      "docs": {
        "comment": "Specifies whether an Auto Scaling group and the instances it contains are replaced during an update. During replacement,\nAWS CloudFormation retains the old group until it finishes creating the new one. If the update fails, AWS CloudFormation\ncan roll back to the old Auto Scaling group and delete the new Auto Scaling group.\n\nWhile AWS CloudFormation creates the new group, it doesn't detach or attach any instances. After successfully creating\nthe new Auto Scaling group, AWS CloudFormation deletes the old Auto Scaling group during the cleanup process.\n\nWhen you set the WillReplace parameter, remember to specify a matching CreationPolicy. If the minimum number of\ninstances (specified by the MinSuccessfulInstancesPercent property) don't signal success within the Timeout period\n(specified in the CreationPolicy policy), the replacement update fails and AWS CloudFormation rolls back to the old\nAuto Scaling group."
      },
      "fqn": "@aws-cdk/cdk.AutoScalingReplacingUpdate",
      "kind": "interface",
      "name": "AutoScalingReplacingUpdate",
      "properties": [
        {
          "abstract": true,
          "immutable": true,
          "name": "willReplace",
          "type": {
            "optional": true,
            "primitive": "boolean"
          }
        }
      ]
    },
    "@aws-cdk/cdk.AutoScalingRollingUpdate": {
      "assembly": "@aws-cdk/cdk",
      "datatype": true,
      "docs": {
        "comment": "To specify how AWS CloudFormation handles rolling updates for an Auto Scaling group, use the AutoScalingRollingUpdate\npolicy. Rolling updates enable you to specify whether AWS CloudFormation updates instances that are in an Auto Scaling\ngroup in batches or all at once."
      },
      "fqn": "@aws-cdk/cdk.AutoScalingRollingUpdate",
      "kind": "interface",
      "name": "AutoScalingRollingUpdate",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "comment": "Specifies the maximum number of instances that AWS CloudFormation updates."
          },
          "immutable": true,
          "name": "maxBatchSize",
          "type": {
            "optional": true,
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "Specifies the minimum number of instances that must be in service within the Auto Scaling group while AWS\nCloudFormation updates old instances."
          },
          "immutable": true,
          "name": "minInstancesInService",
          "type": {
            "optional": true,
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "Specifies the percentage of instances in an Auto Scaling rolling update that must signal success for an update to succeed.\nYou can specify a value from 0 to 100. AWS CloudFormation rounds to the nearest tenth of a percent. For example, if you\nupdate five instances with a minimum successful percentage of 50, three instances must signal success.\n\nIf an instance doesn't send a signal within the time specified in the PauseTime property, AWS CloudFormation assumes\nthat the instance wasn't updated.\n\nIf you specify this property, you must also enable the WaitOnResourceSignals and PauseTime properties."
          },
          "immutable": true,
          "name": "minSuccessfulInstancesPercent",
          "type": {
            "optional": true,
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "The amount of time that AWS CloudFormation pauses after making a change to a batch of instances to give those instances\ntime to start software applications. For example, you might need to specify PauseTime when scaling up the number of\ninstances in an Auto Scaling group.\n\nIf you enable the WaitOnResourceSignals property, PauseTime is the amount of time that AWS CloudFormation should wait\nfor the Auto Scaling group to receive the required number of valid signals from added or replaced instances. If the\nPauseTime is exceeded before the Auto Scaling group receives the required number of signals, the update fails. For best\nresults, specify a time period that gives your applications sufficient time to get started. If the update needs to be\nrolled back, a short PauseTime can cause the rollback to fail.\n\nSpecify PauseTime in the ISO8601 duration format (in the format PT#H#M#S, where each # is the number of hours, minutes,\nand seconds, respectively). The maximum PauseTime is one hour (PT1H)."
          },
          "immutable": true,
          "name": "pauseTime",
          "type": {
            "optional": true,
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "Specifies the Auto Scaling processes to suspend during a stack update. Suspending processes prevents Auto Scaling from\ninterfering with a stack update. For example, you can suspend alarming so that Auto Scaling doesn't execute scaling\npolicies associated with an alarm. For valid values, see the ScalingProcesses.member.N parameter for the SuspendProcesses\naction in the Auto Scaling API Reference."
          },
          "immutable": true,
          "name": "suspendProcesses",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            },
            "optional": true
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "Specifies whether the Auto Scaling group waits on signals from new instances during an update. Use this property to\nensure that instances have completed installing and configuring applications before the Auto Scaling group update proceeds.\nAWS CloudFormation suspends the update of an Auto Scaling group after new EC2 instances are launched into the group.\nAWS CloudFormation must receive a signal from each new instance within the specified PauseTime before continuing the update.\nTo signal the Auto Scaling group, use the cfn-signal helper script or SignalResource API.\n\nTo have instances wait for an Elastic Load Balancing health check before they signal success, add a health-check\nverification by using the cfn-init helper script. For an example, see the verify_instance_health command in the Auto Scaling\nrolling updates sample template."
          },
          "immutable": true,
          "name": "waitOnResourceSignals",
          "type": {
            "optional": true,
            "primitive": "boolean"
          }
        }
      ]
    },
    "@aws-cdk/cdk.AutoScalingScheduledAction": {
      "assembly": "@aws-cdk/cdk",
      "datatype": true,
      "docs": {
        "comment": "With scheduled actions, the group size properties of an Auto Scaling group can change at any time. When you update a\nstack with an Auto Scaling group and scheduled action, AWS CloudFormation always sets the group size property values of\nyour Auto Scaling group to the values that are defined in the AWS::AutoScaling::AutoScalingGroup resource of your template,\neven if a scheduled action is in effect.\n\nIf you do not want AWS CloudFormation to change any of the group size property values when you have a scheduled action in\neffect, use the AutoScalingScheduledAction update policy to prevent AWS CloudFormation from changing the MinSize, MaxSize,\nor DesiredCapacity properties unless you have modified these values in your template.\\"
      },
      "fqn": "@aws-cdk/cdk.AutoScalingScheduledAction",
      "kind": "interface",
      "name": "AutoScalingScheduledAction",
      "properties": [
        {
          "abstract": true,
          "immutable": true,
          "name": "ignoreUnmodifiedGroupSizeProperties",
          "type": {
            "optional": true,
            "primitive": "boolean"
          }
        }
      ]
    },
    "@aws-cdk/cdk.AvailabilityZoneProvider": {
      "assembly": "@aws-cdk/cdk",
      "docs": {
        "comment": "Context provider that will return the availability zones for the current account and region"
      },
      "fqn": "@aws-cdk/cdk.AvailabilityZoneProvider",
      "initializer": {
        "initializer": true,
        "parameters": [
          {
            "name": "context",
            "type": {
              "fqn": "@aws-cdk/cdk.Construct"
            }
          }
        ]
      },
      "kind": "class",
      "name": "AvailabilityZoneProvider",
      "properties": [
        {
          "docs": {
            "comment": "Return the list of AZs for the current account and region"
          },
          "immutable": true,
          "name": "availabilityZones",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        }
      ]
    },
    "@aws-cdk/cdk.Aws": {
      "assembly": "@aws-cdk/cdk",
      "docs": {
        "comment": "Accessor for pseudo parameters\n\nSince pseudo parameters need to be anchored to a stack somewhere in the\nconstruct tree, this class takes an scope parameter; the pseudo parameter\nvalues can be obtained as properties from an scoped object."
      },
      "fqn": "@aws-cdk/cdk.Aws",
      "kind": "class",
      "name": "Aws",
      "properties": [
        {
          "immutable": true,
          "name": "accountId",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "immutable": true,
          "name": "notificationArns",
          "static": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "immutable": true,
          "name": "noValue",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "immutable": true,
          "name": "partition",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "immutable": true,
          "name": "region",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "immutable": true,
          "name": "stackId",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "immutable": true,
          "name": "stackName",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "immutable": true,
          "name": "urlSuffix",
          "static": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "@aws-cdk/cdk.CfnCondition": {
      "assembly": "@aws-cdk/cdk",
      "base": {
        "fqn": "@aws-cdk/cdk.CfnRefElement"
      },
      "docs": {
        "comment": "Represents a CloudFormation condition, for resources which must be conditionally created and\nthe determination must be made at deploy time."
      },
      "fqn": "@aws-cdk/cdk.CfnCondition",
      "initializer": {
        "docs": {
          "comment": "Build a new condition. The condition must be constructed with a condition token,\nthat the condition is based on."
        },
        "initializer": true,
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "@aws-cdk/cdk.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/cdk.CfnConditionProps",
              "optional": true
            }
          }
        ]
      },
      "interfaces": [
        {
          "fqn": "@aws-cdk/cdk.ICfnConditionExpression"
        }
      ],
      "kind": "class",
      "methods": [
        {
          "docs": {
            "comment": "Synthesizes the condition."
          },
          "name": "resolve",
          "overrides": {
            "fqn": "@aws-cdk/cdk.ICfnConditionExpression"
          },
          "parameters": [
            {
              "name": "_context",
              "type": {
                "fqn": "@aws-cdk/cdk.ResolveContext"
              }
            }
          ],
          "returns": {
            "primitive": "any"
          }
        }
      ],
      "name": "CfnCondition",
      "properties": [
        {
          "docs": {
            "comment": "The condition statement."
          },
          "name": "expression",
          "type": {
            "fqn": "@aws-cdk/cdk.ICfnConditionExpression",
            "optional": true
          }
        }
      ]
    },
    "@aws-cdk/cdk.CfnConditionProps": {
      "assembly": "@aws-cdk/cdk",
      "datatype": true,
      "fqn": "@aws-cdk/cdk.CfnConditionProps",
      "kind": "interface",
      "name": "CfnConditionProps",
      "properties": [
        {
          "abstract": true,
          "immutable": true,
          "name": "expression",
          "type": {
            "fqn": "@aws-cdk/cdk.ICfnConditionExpression",
            "optional": true
          }
        }
      ]
    },
    "@aws-cdk/cdk.CfnDynamicReference": {
      "assembly": "@aws-cdk/cdk",
      "base": {
        "fqn": "@aws-cdk/cdk.Token"
      },
      "docs": {
        "comment": "References a dynamically retrieved value\n\nThis is a Construct so that subclasses will (eventually) be able to attach\nmetadata to themselves without having to change call signatures.",
        "see": "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/dynamic-references.html"
      },
      "fqn": "@aws-cdk/cdk.CfnDynamicReference",
      "initializer": {
        "initializer": true,
        "parameters": [
          {
            "name": "service",
            "type": {
              "fqn": "@aws-cdk/cdk.CfnDynamicReferenceService"
            }
          },
          {
            "name": "key",
            "type": {
              "primitive": "string"
            }
          }
        ]
      },
      "kind": "class",
      "name": "CfnDynamicReference"
    },
    "@aws-cdk/cdk.CfnDynamicReferenceService": {
      "assembly": "@aws-cdk/cdk",
      "docs": {
        "comment": "The service to retrieve the dynamic reference from"
      },
      "fqn": "@aws-cdk/cdk.CfnDynamicReferenceService",
      "kind": "enum",
      "members": [
        {
          "docs": {
            "comment": "Plaintext value stored in AWS Systems Manager Parameter Store"
          },
          "name": "Ssm"
        },
        {
          "docs": {
            "comment": "Secure string stored in AWS Systems Manager Parameter Store"
          },
          "name": "SsmSecure"
        },
        {
          "docs": {
            "comment": "Secret stored in AWS Secrets Manager"
          },
          "name": "SecretsManager"
        }
      ],
      "name": "CfnDynamicReferenceService"
    },
    "@aws-cdk/cdk.CfnElement": {
      "abstract": true,
      "assembly": "@aws-cdk/cdk",
      "base": {
        "fqn": "@aws-cdk/cdk.Construct"
      },
      "docs": {
        "comment": "An element of a CloudFormation stack."
      },
      "fqn": "@aws-cdk/cdk.CfnElement",
      "initializer": {
        "docs": {
          "comment": "Creates an entity and binds it to a tree.\nNote that the root of the tree must be a Stack object (not just any Root)."
        },
        "initializer": true,
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "@aws-cdk/cdk.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          }
        ]
      },
      "kind": "class",
      "methods": [
        {
          "docs": {
            "comment": "Returns `true` if a construct is a stack element (i.e. part of the\nsynthesized cloudformation template).\n\nUses duck-typing instead of `instanceof` to allow stack elements from different\nversions of this library to be included in the same stack.",
            "return": "The construct as a stack element or undefined if it is not a stack element."
          },
          "name": "isCfnElement",
          "parameters": [
            {
              "name": "construct",
              "type": {
                "fqn": "@aws-cdk/cdk.IConstruct"
              }
            }
          ],
          "returns": {
            "primitive": "boolean"
          },
          "static": true
        },
        {
          "docs": {
            "comment": "Overrides the auto-generated logical ID with a specific ID."
          },
          "name": "overrideLogicalId",
          "parameters": [
            {
              "docs": {
                "comment": "The new logical ID to use for this stack element."
              },
              "name": "newLogicalId",
              "type": {
                "primitive": "string"
              }
            }
          ]
        },
        {
          "docs": {
            "comment": "Automatically detect references in this CfnElement"
          },
          "name": "prepare",
          "overrides": {
            "fqn": "@aws-cdk/cdk.Construct"
          },
          "protected": true
        }
      ],
      "name": "CfnElement",
      "properties": [
        {
          "docs": {
            "return": "the stack trace of the point where this Resource was created from, sourced\nfrom the +metadata+ entry typed +aws:cdk:logicalId+, and with the bottom-most\nnode +internal+ entries filtered."
          },
          "immutable": true,
          "name": "creationStackTrace",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "comment": "The logical ID for this CloudFormation stack element. The logical ID of the element\nis calculated from the path of the resource node in the construct tree.\n\nTo override this value, use `overrideLogicalId(newLogicalId)`.",
            "return": "the logical ID as a stringified token. This value will only get\nresolved during synthesis."
          },
          "immutable": true,
          "name": "logicalId",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "comment": "Return the path with respect to the stack"
          },
          "immutable": true,
          "name": "stackPath",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "@aws-cdk/cdk.CfnMapping": {
      "assembly": "@aws-cdk/cdk",
      "base": {
        "fqn": "@aws-cdk/cdk.CfnRefElement"
      },
      "docs": {
        "comment": "Represents a CloudFormation mapping."
      },
      "fqn": "@aws-cdk/cdk.CfnMapping",
      "initializer": {
        "initializer": true,
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "@aws-cdk/cdk.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/cdk.CfnMappingProps"
            }
          }
        ]
      },
      "kind": "class",
      "methods": [
        {
          "docs": {
            "return": "A reference to a value in the map based on the two keys."
          },
          "name": "findInMap",
          "parameters": [
            {
              "name": "key1",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "key2",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "comment": "Sets a value in the map based on the two keys."
          },
          "name": "setValue",
          "parameters": [
            {
              "name": "key1",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "key2",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "value",
              "type": {
                "primitive": "any"
              }
            }
          ]
        }
      ],
      "name": "CfnMapping"
    },
    "@aws-cdk/cdk.CfnMappingProps": {
      "assembly": "@aws-cdk/cdk",
      "datatype": true,
      "fqn": "@aws-cdk/cdk.CfnMappingProps",
      "kind": "interface",
      "name": "CfnMappingProps",
      "properties": [
        {
          "abstract": true,
          "immutable": true,
          "name": "mapping",
          "type": {
            "collection": {
              "elementtype": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "map"
                }
              },
              "kind": "map"
            },
            "optional": true
          }
        }
      ]
    },
    "@aws-cdk/cdk.CfnOutput": {
      "assembly": "@aws-cdk/cdk",
      "base": {
        "fqn": "@aws-cdk/cdk.CfnElement"
      },
      "fqn": "@aws-cdk/cdk.CfnOutput",
      "initializer": {
        "docs": {
          "comment": "Creates an CfnOutput value for this stack."
        },
        "initializer": true,
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "@aws-cdk/cdk.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "docs": {
              "comment": "CfnOutput properties."
            },
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/cdk.CfnOutputProps",
              "optional": true
            }
          }
        ]
      },
      "kind": "class",
      "methods": [
        {
          "docs": {
            "comment": "Returns an FnImportValue bound to this export name."
          },
          "name": "makeImportValue",
          "returns": {
            "primitive": "any"
          }
        },
        {
          "docs": {
            "comment": "Allocate an export name for this `CfnOutput` if not already done."
          },
          "name": "obtainExportName",
          "returns": {
            "primitive": "string"
          }
        }
      ],
      "name": "CfnOutput",
      "properties": [
        {
          "immutable": true,
          "name": "ref",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "comment": "The value of the property returned by the aws cloudformation describe-stacks command.\nThe value of an output can include literals, parameter references, pseudo-parameters,\na mapping value, or intrinsic functions."
          },
          "immutable": true,
          "name": "value",
          "type": {
            "primitive": "any"
          }
        },
        {
          "docs": {
            "comment": "A condition from the \"Conditions\" section to associate with this output\nvalue. If the condition evaluates to `false`, this output value will not\nbe included in the stack."
          },
          "immutable": true,
          "name": "condition",
          "type": {
            "fqn": "@aws-cdk/cdk.CfnCondition",
            "optional": true
          }
        },
        {
          "docs": {
            "comment": "A String type that describes the output value.\nThe description can be a maximum of 4 K in length."
          },
          "immutable": true,
          "name": "description",
          "type": {
            "optional": true,
            "primitive": "string"
          }
        },
        {
          "docs": {
            "comment": "The name of the resource output to be exported for a cross-stack reference.\nBy default, the logical ID of the CfnOutput element is used as it's export name.\n\nMay be undefined if the CfnOutput hasn't been exported yet."
          },
          "name": "export",
          "type": {
            "optional": true,
            "primitive": "string"
          }
        }
      ]
    },
    "@aws-cdk/cdk.CfnOutputProps": {
      "assembly": "@aws-cdk/cdk",
      "datatype": true,
      "fqn": "@aws-cdk/cdk.CfnOutputProps",
      "kind": "interface",
      "name": "CfnOutputProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "comment": "A condition from the \"Conditions\" section to associate with this output\nvalue. If the condition evaluates to `false`, this output value will not\nbe included in the stack."
          },
          "immutable": true,
          "name": "condition",
          "type": {
            "fqn": "@aws-cdk/cdk.CfnCondition",
            "optional": true
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "A String type that describes the output value.\nThe description can be a maximum of 4 K in length."
          },
          "immutable": true,
          "name": "description",
          "type": {
            "optional": true,
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "Disables the automatic allocation of an export name for this output.\n\nThis prohibits exporting this value, either by specifying `export` or\nby calling `makeImportValue()`.",
            "default": "false"
          },
          "immutable": true,
          "name": "disableExport",
          "type": {
            "optional": true,
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "The name used to export the value of this output across stacks.\n\nTo import the value from another stack, use `FnImportValue(export)`. You\ncan create an import value token by calling `output.makeImportValue()`.",
            "default": "Automatically allocate a name when `makeImportValue()`  is\ncalled."
          },
          "immutable": true,
          "name": "export",
          "type": {
            "optional": true,
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "The value of the property returned by the aws cloudformation describe-stacks command.\nThe value of an output can include literals, parameter references, pseudo-parameters,\na mapping value, or intrinsic functions."
          },
          "immutable": true,
          "name": "value",
          "type": {
            "optional": true,
            "primitive": "any"
          }
        }
      ]
    },
    "@aws-cdk/cdk.CfnParameter": {
      "assembly": "@aws-cdk/cdk",
      "base": {
        "fqn": "@aws-cdk/cdk.CfnRefElement"
      },
      "docs": {
        "comment": "Use the optional Parameters section to customize your templates.\nParameters enable you to input custom values to your template each time you create or\nupdate a stack."
      },
      "fqn": "@aws-cdk/cdk.CfnParameter",
      "initializer": {
        "docs": {
          "comment": "Creates a parameter construct.\nNote that the name (logical ID) of the parameter will derive from it's `coname` and location\nwithin the stack. Therefore, it is recommended that parameters are defined at the stack level."
        },
        "initializer": true,
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "@aws-cdk/cdk.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "docs": {
              "comment": "The parameter properties."
            },
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/cdk.CfnParameterProps"
            }
          }
        ]
      },
      "kind": "class",
      "methods": [
        {
          "docs": {
            "comment": "Allows using parameters as tokens without the need to dereference them.\nThis implicitly implements Token, until we make it an interface."
          },
          "name": "resolve",
          "returns": {
            "primitive": "any"
          }
        }
      ],
      "name": "CfnParameter",
      "properties": [
        {
          "docs": {
            "comment": "Indicates if this parameter has \"NoEcho\" set."
          },
          "immutable": true,
          "name": "noEcho",
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "docs": {
            "comment": "The parameter value token represented as a string array."
          },
          "name": "stringListValue",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "comment": "The parameter value token represented as a string."
          },
          "name": "stringValue",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "comment": "A token that represents the actual value of this parameter."
          },
          "name": "value",
          "type": {
            "fqn": "@aws-cdk/cdk.Token"
          }
        }
      ]
    },
    "@aws-cdk/cdk.CfnParameterProps": {
      "assembly": "@aws-cdk/cdk",
      "datatype": true,
      "fqn": "@aws-cdk/cdk.CfnParameterProps",
      "kind": "interface",
      "name": "CfnParameterProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "comment": "The data type for the parameter (DataType)."
          },
          "immutable": true,
          "name": "type",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "A regular expression that represents the patterns to allow for String types."
          },
          "immutable": true,
          "name": "allowedPattern",
          "type": {
            "optional": true,
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "An array containing the list of values allowed for the parameter."
          },
          "immutable": true,
          "name": "allowedValues",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            },
            "optional": true
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "A string that explains a constraint when the constraint is violated.\nFor example, without a constraint description, a parameter that has an allowed\npattern of [A-Za-z0-9]+ displays the following error message when the user specifies\nan invalid value:"
          },
          "immutable": true,
          "name": "constraintDescription",
          "type": {
            "optional": true,
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "A value of the appropriate type for the template to use if no value is specified\nwhen a stack is created. If you define constraints for the parameter, you must specify\na value that adheres to those constraints."
          },
          "immutable": true,
          "name": "default",
          "type": {
            "optional": true,
            "primitive": "any"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "A string of up to 4000 characters that describes the parameter."
          },
          "immutable": true,
          "name": "description",
          "type": {
            "optional": true,
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "An integer value that determines the largest number of characters you want to allow for String types."
          },
          "immutable": true,
          "name": "maxLength",
          "type": {
            "optional": true,
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "A numeric value that determines the largest numeric value you want to allow for Number types."
          },
          "immutable": true,
          "name": "maxValue",
          "type": {
            "optional": true,
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "An integer value that determines the smallest number of characters you want to allow for String types."
          },
          "immutable": true,
          "name": "minLength",
          "type": {
            "optional": true,
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "A numeric value that determines the smallest numeric value you want to allow for Number types."
          },
          "immutable": true,
          "name": "minValue",
          "type": {
            "optional": true,
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "Whether to mask the parameter value when anyone makes a call that describes the stack.\nIf you set the value to ``true``, the parameter value is masked with asterisks (``*****``)."
          },
          "immutable": true,
          "name": "noEcho",
          "type": {
            "optional": true,
            "primitive": "boolean"
          }
        }
      ]
    },
    "@aws-cdk/cdk.CfnRefElement": {
      "abstract": true,
      "assembly": "@aws-cdk/cdk",
      "base": {
        "fqn": "@aws-cdk/cdk.CfnElement"
      },
      "docs": {
        "comment": "Base class for referenceable CloudFormation constructs which are not Resources\n\nThese constructs are things like Conditions and Parameters, can be\nreferenced by taking the `.ref` attribute.\n\nResource constructs do not inherit from CfnRefElement because they have their\nown, more specific types returned from the .ref attribute. Also, some\nresources aren't referenceable at all (such as BucketPolicies or GatewayAttachments)."
      },
      "fqn": "@aws-cdk/cdk.CfnRefElement",
      "initializer": {
        "docs": {
          "comment": "Creates an entity and binds it to a tree.\nNote that the root of the tree must be a Stack object (not just any Root)."
        },
        "initializer": true,
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "@aws-cdk/cdk.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          }
        ]
      },
      "kind": "class",
      "name": "CfnRefElement",
      "properties": [
        {
          "docs": {
            "comment": "Returns a token to a CloudFormation { Ref } that references this entity based on it's logical ID."
          },
          "immutable": true,
          "name": "ref",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "comment": "Return a token that will CloudFormation { Ref } this stack element"
          },
          "immutable": true,
          "name": "referenceToken",
          "protected": true,
          "type": {
            "fqn": "@aws-cdk/cdk.Token"
          }
        }
      ]
    },
    "@aws-cdk/cdk.CfnReference": {
      "assembly": "@aws-cdk/cdk",
      "base": {
        "fqn": "@aws-cdk/cdk.Reference"
      },
      "docs": {
        "comment": "A Token that represents a CloudFormation reference to another resource\n\nIf these references are used in a different stack from where they are\ndefined, appropriate CloudFormation `Export`s and `Fn::ImportValue`s will be\nsynthesized automatically instead of the regular CloudFormation references.\n\nAdditionally, the dependency between the stacks will be recorded, and the toolkit\nwill make sure to deploy producing stack before the consuming stack.\n\nThis magic happens in the prepare() phase, where consuming stacks will call\n`consumeFromStack` on these Tokens and if they happen to be exported by a different\nStack, we'll register the dependency."
      },
      "fqn": "@aws-cdk/cdk.CfnReference",
      "initializer": {
        "initializer": true,
        "parameters": [
          {
            "name": "value",
            "type": {
              "primitive": "any"
            }
          },
          {
            "name": "displayName",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "target",
            "type": {
              "fqn": "@aws-cdk/cdk.Construct"
            }
          }
        ]
      },
      "kind": "class",
      "methods": [
        {
          "docs": {
            "comment": "Check whether this is actually a Reference"
          },
          "name": "isCfnReference",
          "parameters": [
            {
              "name": "x",
              "type": {
                "fqn": "@aws-cdk/cdk.Token"
              }
            }
          ],
          "returns": {
            "primitive": "boolean"
          },
          "static": true
        },
        {
          "docs": {
            "comment": "Register a stack this references is being consumed from."
          },
          "name": "consumeFromStack",
          "parameters": [
            {
              "name": "consumingStack",
              "type": {
                "fqn": "@aws-cdk/cdk.Stack"
              }
            },
            {
              "name": "consumingConstruct",
              "type": {
                "fqn": "@aws-cdk/cdk.IConstruct"
              }
            }
          ]
        },
        {
          "name": "resolve",
          "overrides": {
            "fqn": "@aws-cdk/cdk.Token"
          },
          "parameters": [
            {
              "name": "context",
              "type": {
                "fqn": "@aws-cdk/cdk.ResolveContext"
              }
            }
          ],
          "returns": {
            "primitive": "any"
          }
        }
      ],
      "name": "CfnReference"
    },
    "@aws-cdk/cdk.CfnResource": {
      "assembly": "@aws-cdk/cdk",
      "base": {
        "fqn": "@aws-cdk/cdk.CfnRefElement"
      },
      "docs": {
        "comment": "Represents a CloudFormation resource."
      },
      "fqn": "@aws-cdk/cdk.CfnResource",
      "initializer": {
        "docs": {
          "comment": "Creates a resource construct."
        },
        "initializer": true,
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "@aws-cdk/cdk.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/cdk.CfnResourceProps"
            }
          }
        ]
      },
      "kind": "class",
      "methods": [
        {
          "docs": {
            "comment": "A decoration used to create a CloudFormation attribute property."
          },
          "name": "attribute",
          "parameters": [
            {
              "docs": {
                "comment": "Custom name for the attribute (default is the name of the property)\nNOTE: we return \"any\" here to satistfy jsii, which doesn't support lambdas."
              },
              "name": "customName",
              "type": {
                "optional": true,
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "primitive": "any"
          },
          "static": true
        },
        {
          "docs": {
            "comment": "Check whether the given construct is a CfnResource"
          },
          "name": "isCfnResource",
          "parameters": [
            {
              "name": "construct",
              "type": {
                "fqn": "@aws-cdk/cdk.IConstruct"
              }
            }
          ],
          "returns": {
            "primitive": "boolean"
          },
          "static": true
        },
        {
          "docs": {
            "comment": "Check whether the given construct is Taggable"
          },
          "name": "isTaggable",
          "parameters": [
            {
              "name": "construct",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "primitive": "boolean"
          },
          "static": true
        },
        {
          "docs": {
            "comment": "Syntactic sugar for `addOverride(path, undefined)`."
          },
          "name": "addDeletionOverride",
          "parameters": [
            {
              "docs": {
                "comment": "The path of the value to delete"
              },
              "name": "path",
              "type": {
                "primitive": "string"
              }
            }
          ]
        },
        {
          "docs": {
            "comment": "Indicates that this resource depends on another resource and cannot be provisioned\nunless the other resource has been successfully provisioned."
          },
          "name": "addDependsOn",
          "parameters": [
            {
              "name": "resource",
              "type": {
                "fqn": "@aws-cdk/cdk.CfnResource"
              }
            }
          ]
        },
        {
          "docs": {
            "comment": "Adds an override to the synthesized CloudFormation resource. To add a\nproperty override, either use `addPropertyOverride` or prefix `path` with\n\"Properties.\" (i.e. `Properties.TopicName`)."
          },
          "name": "addOverride",
          "parameters": [
            {
              "docs": {
                "comment": "The path of the property, you can use dot notation to\noverride values in complex types. Any intermdediate keys\nwill be created as needed."
              },
              "name": "path",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "comment": "The value. Could be primitive or complex."
              },
              "name": "value",
              "type": {
                "primitive": "any"
              }
            }
          ]
        },
        {
          "docs": {
            "comment": "Adds an override that deletes the value of a property from the resource definition."
          },
          "name": "addPropertyDeletionOverride",
          "parameters": [
            {
              "docs": {
                "comment": "The path to the property."
              },
              "name": "propertyPath",
              "type": {
                "primitive": "string"
              }
            }
          ]
        },
        {
          "docs": {
            "comment": "Adds an override to a resource property.\n\nSyntactic sugar for `addOverride(\"Properties.<...>\", value)`."
          },
          "name": "addPropertyOverride",
          "parameters": [
            {
              "docs": {
                "comment": "The path of the property"
              },
              "name": "propertyPath",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "comment": "The value"
              },
              "name": "value",
              "type": {
                "primitive": "any"
              }
            }
          ]
        },
        {
          "docs": {
            "comment": "Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. `resource.arn`), but this can be used for future compatibility\nin case there is no generated attribute."
          },
          "name": "getAtt",
          "parameters": [
            {
              "docs": {
                "comment": "The name of the attribute."
              },
              "name": "attributeName",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "fqn": "@aws-cdk/cdk.CfnReference"
          }
        },
        {
          "name": "renderProperties",
          "parameters": [
            {
              "name": "properties",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "protected": true,
          "returns": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        }
      ],
      "name": "CfnResource",
      "properties": [
        {
          "docs": {
            "comment": "Options for this resource, such as condition, update policy etc."
          },
          "immutable": true,
          "name": "options",
          "type": {
            "fqn": "@aws-cdk/cdk.IResourceOptions"
          }
        },
        {
          "docs": {
            "comment": "AWS resource properties.\n\nThis object is rendered via a call to \"renderProperties(this.properties)\"."
          },
          "immutable": true,
          "name": "properties",
          "protected": true,
          "type": {
            "primitive": "any"
          }
        },
        {
          "docs": {
            "comment": "AWS resource type."
          },
          "immutable": true,
          "name": "resourceType",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "comment": "AWS resource property overrides.\n\nDuring synthesis, the method \"renderProperties(this.overrides)\" is called\nwith this object, and merged on top of the output of\n\"renderProperties(this.properties)\".\n\nDerived classes should expose a strongly-typed version of this object as\na public property called `propertyOverrides`."
          },
          "immutable": true,
          "name": "untypedPropertyOverrides",
          "protected": true,
          "type": {
            "primitive": "any"
          }
        }
      ]
    },
    "@aws-cdk/cdk.CfnResourceProps": {
      "assembly": "@aws-cdk/cdk",
      "datatype": true,
      "fqn": "@aws-cdk/cdk.CfnResourceProps",
      "kind": "interface",
      "name": "CfnResourceProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "comment": "CloudFormation resource type."
          },
          "immutable": true,
          "name": "type",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "CloudFormation properties."
          },
          "immutable": true,
          "name": "properties",
          "type": {
            "optional": true,
            "primitive": "any"
          }
        }
      ]
    },
    "@aws-cdk/cdk.CfnRule": {
      "assembly": "@aws-cdk/cdk",
      "base": {
        "fqn": "@aws-cdk/cdk.CfnRefElement"
      },
      "docs": {
        "comment": "The Rules that define template constraints in an AWS Service Catalog portfolio describe when\nend users can use the template and which values they can specify for parameters that are declared\nin the AWS CloudFormation template used to create the product they are attempting to use. Rules\nare useful for preventing end users from inadvertently specifying an incorrect value.\nFor example, you can add a rule to verify whether end users specified a valid subnet in a\ngiven VPC or used m1.small instance types for test environments. AWS CloudFormation uses\nrules to validate parameter values before it creates the resources for the product.\n\nA rule can include a RuleCondition property and must include an Assertions property.\nFor each rule, you can define only one rule condition; you can define one or more asserts within the Assertions property.\nYou define a rule condition and assertions by using rule-specific intrinsic functions.",
        "link": "https://docs.aws.amazon.com/servicecatalog/latest/adminguide/reference-template_constraint_rules.html"
      },
      "fqn": "@aws-cdk/cdk.CfnRule",
      "initializer": {
        "docs": {
          "comment": "Creates and adds a rule."
        },
        "initializer": true,
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "@aws-cdk/cdk.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "docs": {
              "comment": "The rule props."
            },
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/cdk.CfnRuleProps",
              "optional": true
            }
          }
        ]
      },
      "kind": "class",
      "methods": [
        {
          "docs": {
            "comment": "Adds an assertion to the rule."
          },
          "name": "addAssertion",
          "parameters": [
            {
              "docs": {
                "comment": "The expression to evaluation."
              },
              "name": "condition",
              "type": {
                "fqn": "@aws-cdk/cdk.ICfnConditionExpression"
              }
            },
            {
              "docs": {
                "comment": "The description of the assertion."
              },
              "name": "description",
              "type": {
                "primitive": "string"
              }
            }
          ]
        }
      ],
      "name": "CfnRule",
      "properties": [
        {
          "docs": {
            "comment": "Assertions which define the rule."
          },
          "name": "assertions",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/cdk.RuleAssertion"
              },
              "kind": "array"
            },
            "optional": true
          }
        },
        {
          "docs": {
            "comment": "If the rule condition evaluates to false, the rule doesn't take effect.\nIf the function in the rule condition evaluates to true, expressions in each assert are evaluated and applied."
          },
          "name": "ruleCondition",
          "type": {
            "fqn": "@aws-cdk/cdk.ICfnConditionExpression",
            "optional": true
          }
        }
      ]
    },
    "@aws-cdk/cdk.CfnRuleProps": {
      "assembly": "@aws-cdk/cdk",
      "datatype": true,
      "docs": {
        "comment": "A rule can include a RuleCondition property and must include an Assertions property.\nFor each rule, you can define only one rule condition; you can define one or more asserts within the Assertions property.\nYou define a rule condition and assertions by using rule-specific intrinsic functions.\n\nYou can use the following rule-specific intrinsic functions to define rule conditions and assertions:\n\n  Fn::And\n  Fn::Contains\n  Fn::EachMemberEquals\n  Fn::EachMemberIn\n  Fn::Equals\n  Fn::If\n  Fn::Not\n  Fn::Or\n  Fn::RefAll\n  Fn::ValueOf\n  Fn::ValueOfAll\n\nhttps://docs.aws.amazon.com/servicecatalog/latest/adminguide/reference-template_constraint_rules.html"
      },
      "fqn": "@aws-cdk/cdk.CfnRuleProps",
      "kind": "interface",
      "name": "CfnRuleProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "comment": "Assertions which define the rule."
          },
          "immutable": true,
          "name": "assertions",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/cdk.RuleAssertion"
              },
              "kind": "array"
            },
            "optional": true
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "If the rule condition evaluates to false, the rule doesn't take effect.\nIf the function in the rule condition evaluates to true, expressions in each assert are evaluated and applied."
          },
          "immutable": true,
          "name": "ruleCondition",
          "type": {
            "fqn": "@aws-cdk/cdk.ICfnConditionExpression",
            "optional": true
          }
        }
      ]
    },
    "@aws-cdk/cdk.CfnTag": {
      "assembly": "@aws-cdk/cdk",
      "datatype": true,
      "docs": {
        "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html"
      },
      "fqn": "@aws-cdk/cdk.CfnTag",
      "kind": "interface",
      "name": "CfnTag",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html#cfn-resource-tags-key"
          },
          "immutable": true,
          "name": "key",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "link": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html#cfn-resource-tags-value"
          },
          "immutable": true,
          "name": "value",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "@aws-cdk/cdk.CloudFormationJSON": {
      "assembly": "@aws-cdk/cdk",
      "docs": {
        "comment": "Class for JSON routines that are framework-aware"
      },
      "fqn": "@aws-cdk/cdk.CloudFormationJSON",
      "initializer": {
        "initializer": true
      },
      "kind": "class",
      "methods": [
        {
          "docs": {
            "comment": "Turn an arbitrary structure potentially containing Tokens into a JSON string.\n\nReturns a Token which will evaluate to CloudFormation expression that\nwill be evaluated by CloudFormation to the JSON representation of the\ninput structure.\n\nAll Tokens substituted in this way must return strings, or the evaluation\nin CloudFormation will fail."
          },
          "name": "stringify",
          "parameters": [
            {
              "docs": {
                "comment": "The object to stringify"
              },
              "name": "obj",
              "type": {
                "primitive": "any"
              }
            },
            {
              "docs": {
                "comment": "The Construct from which to resolve any Tokens found in the object"
              },
              "name": "context",
              "type": {
                "fqn": "@aws-cdk/cdk.IConstruct"
              }
            }
          ],
          "returns": {
            "primitive": "string"
          },
          "static": true
        }
      ],
      "name": "CloudFormationJSON"
    },
    "@aws-cdk/cdk.CodeDeployLambdaAliasUpdate": {
      "assembly": "@aws-cdk/cdk",
      "datatype": true,
      "docs": {
        "comment": "To perform an AWS CodeDeploy deployment when the version changes on an AWS::Lambda::Alias resource,\nuse the CodeDeployLambdaAliasUpdate update policy."
      },
      "fqn": "@aws-cdk/cdk.CodeDeployLambdaAliasUpdate",
      "kind": "interface",
      "name": "CodeDeployLambdaAliasUpdate",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "comment": "The name of the AWS CodeDeploy application."
          },
          "immutable": true,
          "name": "applicationName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "The name of the AWS CodeDeploy deployment group. This is where the traffic-shifting policy is set."
          },
          "immutable": true,
          "name": "deploymentGroupName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "The name of the Lambda function to run after traffic routing completes."
          },
          "immutable": true,
          "name": "afterAllowTrafficHook",
          "type": {
            "optional": true,
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "The name of the Lambda function to run before traffic routing starts."
          },
          "immutable": true,
          "name": "beforeAllowTrafficHook",
          "type": {
            "optional": true,
            "primitive": "string"
          }
        }
      ]
    },
    "@aws-cdk/cdk.ConcreteDependable": {
      "assembly": "@aws-cdk/cdk",
      "docs": {
        "comment": "A set of constructs to be used as a dependable\n\nThis class can be used when a set of constructs which are disjoint in the\nconstruct tree needs to be combined to be used as a single dependable."
      },
      "fqn": "@aws-cdk/cdk.ConcreteDependable",
      "initializer": {
        "initializer": true
      },
      "interfaces": [
        {
          "fqn": "@aws-cdk/cdk.IDependable"
        }
      ],
      "kind": "class",
      "methods": [
        {
          "docs": {
            "comment": "Add a construct to the dependency roots"
          },
          "name": "add",
          "parameters": [
            {
              "name": "construct",
              "type": {
                "fqn": "@aws-cdk/cdk.IConstruct"
              }
            }
          ]
        }
      ],
      "name": "ConcreteDependable",
      "properties": [
        {
          "docs": {
            "comment": "Retrieve the current set of dependency roots"
          },
          "immutable": true,
          "name": "dependencyRoots",
          "overrides": {
            "fqn": "@aws-cdk/cdk.IDependable"
          },
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/cdk.IConstruct"
              },
              "kind": "array"
            }
          }
        }
      ]
    },
    "@aws-cdk/cdk.Construct": {
      "assembly": "@aws-cdk/cdk",
      "docs": {
        "comment": "Represents the building block of the construct graph.\n\nAll constructs besides the root construct must be created within the scope of\nanother construct."
      },
      "fqn": "@aws-cdk/cdk.Construct",
      "initializer": {
        "docs": {
          "comment": "Creates a new construct node."
        },
        "initializer": true,
        "parameters": [
          {
            "docs": {
              "comment": "The scope in which to define this construct"
            },
            "name": "scope",
            "type": {
              "fqn": "@aws-cdk/cdk.Construct"
            }
          },
          {
            "docs": {
              "comment": "The scoped construct ID. Must be unique amongst siblings. If\nthe ID includes a path separator (`/`), then it will be replaced by double\ndash `--`."
            },
            "name": "id",
            "type": {
              "primitive": "string"
            }
          }
        ]
      },
      "interfaces": [
        {
          "fqn": "@aws-cdk/cdk.IConstruct"
        }
      ],
      "kind": "class",
      "methods": [
        {
          "docs": {
            "comment": "Return whether the given object is a Construct"
          },
          "name": "isConstruct",
          "parameters": [
            {
              "name": "x",
              "type": {
                "fqn": "@aws-cdk/cdk.IConstruct"
              }
            }
          ],
          "returns": {
            "primitive": "boolean"
          },
          "static": true
        },
        {
          "docs": {
            "comment": "Perform final modifications before synthesis\n\nThis method can be implemented by derived constructs in order to perform\nfinal changes before synthesis. prepare() will be called after child\nconstructs have been prepared.\n\nThis is an advanced framework feature. Only use this if you\nunderstand the implications."
          },
          "name": "prepare",
          "protected": true
        },
        {
          "docs": {
            "comment": "Returns a string representation of this construct."
          },
          "name": "toString",
          "returns": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "comment": "Validate the current construct.\n\nThis method can be implemented by derived constructs in order to perform\nvalidation logic. It is called on all constructs before synthesis.",
            "return": "An array of validation error messages, or an empty array if there the construct is valid."
          },
          "name": "validate",
          "protected": true,
          "returns": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        }
      ],
      "name": "Construct",
      "properties": [
        {
          "docs": {
            "comment": "The set of constructs that form the root of this dependable\n\nAll resources under all returned constructs are included in the ordering\ndependency."
          },
          "immutable": true,
          "name": "dependencyRoots",
          "overrides": {
            "fqn": "@aws-cdk/cdk.IDependable"
          },
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/cdk.IConstruct"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "comment": "Construct node."
          },
          "immutable": true,
          "name": "node",
          "overrides": {
            "fqn": "@aws-cdk/cdk.IConstruct"
          },
          "type": {
            "fqn": "@aws-cdk/cdk.ConstructNode"
          }
        }
      ]
    },
    "@aws-cdk/cdk.ConstructNode": {
      "assembly": "@aws-cdk/cdk",
      "docs": {
        "comment": "Represents the construct node in the scope tree."
      },
      "fqn": "@aws-cdk/cdk.ConstructNode",
      "initializer": {
        "initializer": true,
        "parameters": [
          {
            "name": "host",
            "type": {
              "fqn": "@aws-cdk/cdk.Construct"
            }
          },
          {
            "name": "scope",
            "type": {
              "fqn": "@aws-cdk/cdk.IConstruct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          }
        ]
      },
      "kind": "class",
      "methods": [
        {
          "docs": {
            "comment": "Adds a child construct to this node.",
            "return": "The resolved path part name of the child"
          },
          "name": "addChild",
          "parameters": [
            {
              "docs": {
                "comment": "The child construct"
              },
              "name": "child",
              "type": {
                "fqn": "@aws-cdk/cdk.IConstruct"
              }
            },
            {
              "name": "childName",
              "type": {
                "primitive": "string"
              }
            }
          ]
        },
        {
          "docs": {
            "comment": "Add an ordering dependency on another Construct.\n\nAll constructs in the dependency's scope will be deployed before any\nconstruct in this construct's scope."
          },
          "name": "addDependency",
          "parameters": [
            {
              "name": "dependencies",
              "type": {
                "fqn": "@aws-cdk/cdk.IDependable"
              },
              "variadic": true
            }
          ],
          "variadic": true
        },
        {
          "docs": {
            "comment": "Adds an { error: <message> } metadata entry to this construct.\nThe toolkit will fail synthesis when errors are reported."
          },
          "name": "addError",
          "parameters": [
            {
              "docs": {
                "comment": "The error message."
              },
              "name": "message",
              "type": {
                "primitive": "string"
              }
            }
          ]
        },
        {
          "docs": {
            "comment": "Adds a { \"aws:cdk:info\": <message> } metadata entry to this construct.\nThe toolkit will display the info message when apps are synthesized."
          },
          "name": "addInfo",
          "parameters": [
            {
              "docs": {
                "comment": "The info message."
              },
              "name": "message",
              "type": {
                "primitive": "string"
              }
            }
          ]
        },
        {
          "docs": {
            "comment": "Adds a metadata entry to this construct.\nEntries are arbitrary values and will also include a stack trace to allow tracing back to\nthe code location for when the entry was added. It can be used, for example, to include source\nmapping in CloudFormation templates to improve diagnostics."
          },
          "name": "addMetadata",
          "parameters": [
            {
              "docs": {
                "comment": "a string denoting the type of metadata"
              },
              "name": "type",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "comment": "the value of the metadata (can be a Token). If null/undefined, metadata will not be added."
              },
              "name": "data",
              "type": {
                "primitive": "any"
              }
            },
            {
              "docs": {
                "comment": "a function under which to restrict the metadata entry's stack trace (defaults to this.addMetadata)"
              },
              "name": "from",
              "type": {
                "optional": true,
                "primitive": "any"
              }
            }
          ]
        },
        {
          "docs": {
            "comment": "Adds a { warning: <message> } metadata entry to this construct.\nThe toolkit will display the warning when an app is synthesized, or fail\nif run in --strict mode."
          },
          "name": "addWarning",
          "parameters": [
            {
              "docs": {
                "comment": "The warning message."
              },
              "name": "message",
              "type": {
                "primitive": "string"
              }
            }
          ]
        },
        {
          "docs": {
            "comment": "Return the ancestors (including self) of this Construct up until and excluding the indicated component"
          },
          "name": "ancestors",
          "parameters": [
            {
              "name": "upTo",
              "type": {
                "fqn": "@aws-cdk/cdk.Construct",
                "optional": true
              }
            }
          ],
          "returns": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/cdk.IConstruct"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "comment": "Applies the aspect to this Constructs node"
          },
          "name": "apply",
          "parameters": [
            {
              "name": "aspect",
              "type": {
                "fqn": "@aws-cdk/cdk.IAspect"
              }
            }
          ]
        },
        {
          "docs": {
            "comment": "Return this construct and all of its children in the given order"
          },
          "name": "findAll",
          "parameters": [
            {
              "name": "order",
              "type": {
                "fqn": "@aws-cdk/cdk.ConstructOrder",
                "optional": true
              }
            }
          ],
          "returns": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/cdk.IConstruct"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "comment": "Return a descendant by path\n\nThrows an exception if the descendant is not found.\n\nNote that if the original ID of the construct you are looking for contained\na '/', then it would have been replaced by '--'.",
            "return": "Child with the given path."
          },
          "name": "findChild",
          "parameters": [
            {
              "name": "path",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "fqn": "@aws-cdk/cdk.IConstruct"
          }
        },
        {
          "docs": {
            "comment": "Return all dependencies registered on this node or any of its children"
          },
          "name": "findDependencies",
          "returns": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/cdk.Dependency"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "comment": "Return all references of the given type originating from this node or any of its children"
          },
          "name": "findReferences",
          "returns": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/cdk.OutgoingReference"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "comment": "Retrieves a value from tree context.\n\nContext is usually initialized at the root, but can be overridden at any point in the tree.",
            "return": "The context value or undefined"
          },
          "name": "getContext",
          "parameters": [
            {
              "docs": {
                "comment": "The context key"
              },
              "name": "key",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "primitive": "any"
          }
        },
        {
          "docs": {
            "comment": "Locks this construct from allowing more children to be added. After this\ncall, no more children can be added to this construct or to any children."
          },
          "name": "lock"
        },
        {
          "docs": {
            "comment": "Run 'prepare()' on all constructs in the tree"
          },
          "name": "prepareTree"
        },
        {
          "docs": {
            "comment": "Record a reference originating from this construct node"
          },
          "name": "recordReference",
          "parameters": [
            {
              "name": "refs",
              "type": {
                "fqn": "@aws-cdk/cdk.Token"
              },
              "variadic": true
            }
          ],
          "variadic": true
        },
        {
          "docs": {
            "comment": "Retrieve a value from tree-global context\n\nIt is an error if the context object is not available."
          },
          "name": "requireContext",
          "parameters": [
            {
              "name": "key",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "primitive": "any"
          }
        },
        {
          "docs": {
            "aws": "-cdk/runtime`` instead.",
            "comment": "Throws if the `props` bag doesn't include the property `name`.\nIn the future we can add some type-checking here, maybe even auto-generate during compilation.",
            "deprecated": "use ``requireProperty`` from ``"
          },
          "name": "required",
          "parameters": [
            {
              "docs": {
                "comment": "The props bag."
              },
              "name": "props",
              "type": {
                "primitive": "any"
              }
            },
            {
              "docs": {
                "comment": "The name of the required property."
              },
              "name": "name",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "primitive": "any"
          }
        },
        {
          "docs": {
            "comment": "Resolve a tokenized value in the context of the current Construct"
          },
          "name": "resolve",
          "parameters": [
            {
              "name": "obj",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "primitive": "any"
          }
        },
        {
          "docs": {
            "comment": "This can be used to set contextual values.\nContext must be set before any children are added, since children may consult context info during construction.\nIf the key already exists, it will be overridden."
          },
          "name": "setContext",
          "parameters": [
            {
              "docs": {
                "comment": "The context key"
              },
              "name": "key",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "comment": "The context value"
              },
              "name": "value",
              "type": {
                "primitive": "any"
              }
            }
          ]
        },
        {
          "docs": {
            "comment": "Convert an object, potentially containing tokens, to a JSON string"
          },
          "name": "stringifyJson",
          "parameters": [
            {
              "name": "obj",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "comment": "Returns a string with a tree representation of this construct and it's children."
          },
          "name": "toTreeString",
          "parameters": [
            {
              "name": "depth",
              "type": {
                "optional": true,
                "primitive": "number"
              }
            }
          ],
          "returns": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "comment": "Return a descendant by path, or undefined\n\nNote that if the original ID of the construct you are looking for contained\na '/', then it would have been replaced by '--'.",
            "return": "a child by path or undefined if not found."
          },
          "name": "tryFindChild",
          "parameters": [
            {
              "name": "path",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "fqn": "@aws-cdk/cdk.IConstruct",
            "optional": true
          }
        },
        {
          "docs": {
            "comment": "Unlocks this costruct and allows mutations (adding children)."
          },
          "name": "unlock"
        },
        {
          "docs": {
            "comment": "Invokes 'validate' on all child constructs and then on this construct (depth-first).",
            "return": "A list of validation errors. If the list is empty, all constructs are valid."
          },
          "name": "validateTree",
          "returns": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/cdk.ValidationError"
              },
              "kind": "array"
            }
          }
        }
      ],
      "name": "ConstructNode",
      "properties": [
        {
          "docs": {
            "comment": "An array of aspects applied to this node"
          },
          "immutable": true,
          "name": "aspects",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/cdk.IAspect"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "comment": "All direct children of this construct."
          },
          "immutable": true,
          "name": "children",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/cdk.IConstruct"
              },
              "kind": "array"
            }
          }
        },
        {
          "immutable": true,
          "name": "host",
          "type": {
            "fqn": "@aws-cdk/cdk.Construct"
          }
        },
        {
          "docs": {
            "comment": "The scoped construct ID\nThis ID is unique amongst all constructs defined in the same scope.\nTo obtain a global unique id for this construct, use `uniqueId`."
          },
          "immutable": true,
          "name": "id",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "comment": "Returns true if this construct or the scopes in which it is defined are\nlocked."
          },
          "immutable": true,
          "name": "locked",
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "docs": {
            "comment": "An array of metadata objects associated with this construct.\nThis can be used, for example, to implement support for deprecation notices, source mapping, etc."
          },
          "immutable": true,
          "name": "metadata",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/cdk.MetadataEntry"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "comment": "The full, absolute path of this construct in the tree.\n\nComponents are separated by '/'."
          },
          "immutable": true,
          "name": "path",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "comment": "The stack the construct is a part of."
          },
          "immutable": true,
          "name": "stack",
          "type": {
            "fqn": "@aws-cdk/cdk.Stack"
          }
        },
        {
          "docs": {
            "return": "The type name of this node."
          },
          "immutable": true,
          "name": "typename",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "comment": "A tree-global unique alphanumeric identifier for this construct.\nIncludes all components of the tree."
          },
          "immutable": true,
          "name": "uniqueId",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "comment": "Returns the scope in which this construct is defined."
          },
          "immutable": true,
          "name": "scope",
          "type": {
            "fqn": "@aws-cdk/cdk.IConstruct",
            "optional": true
          }
        }
      ]
    },
    "@aws-cdk/cdk.ConstructOrder": {
      "assembly": "@aws-cdk/cdk",
      "docs": {
        "comment": "In what order to return constructs"
      },
      "fqn": "@aws-cdk/cdk.ConstructOrder",
      "kind": "enum",
      "members": [
        {
          "docs": {
            "comment": "Depth-first, pre-order"
          },
          "name": "PreOrder"
        },
        {
          "docs": {
            "comment": "Depth-first, post-order (leaf nodes first)"
          },
          "name": "PostOrder"
        }
      ],
      "name": "ConstructOrder"
    },
    "@aws-cdk/cdk.ContextProvider": {
      "assembly": "@aws-cdk/cdk",
      "docs": {
        "comment": "Base class for the model side of context providers\n\nInstances of this class communicate with context provider plugins in the 'cdk\ntoolkit' via context variables (input), outputting specialized queries for\nmore context variables (output).\n\nContextProvider needs access to a Construct to hook into the context mechanism."
      },
      "fqn": "@aws-cdk/cdk.ContextProvider",
      "initializer": {
        "initializer": true,
        "parameters": [
          {
            "name": "context",
            "type": {
              "fqn": "@aws-cdk/cdk.Construct"
            }
          },
          {
            "name": "provider",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              },
              "optional": true
            }
          }
        ]
      },
      "kind": "class",
      "methods": [
        {
          "docs": {
            "comment": "Read a provider value, verifying it's a list"
          },
          "name": "getStringListValue",
          "parameters": [
            {
              "docs": {
                "comment": "The value to return if there is no value defined for this context key"
              },
              "name": "defaultValue",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "string"
                  },
                  "kind": "array"
                }
              }
            }
          ],
          "returns": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "comment": "Read a provider value, verifying it's a string"
          },
          "name": "getStringValue",
          "parameters": [
            {
              "docs": {
                "comment": "The value to return if there is no value defined for this context key"
              },
              "name": "defaultValue",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "comment": "Read a provider value and verify it is not `null`"
          },
          "name": "getValue",
          "parameters": [
            {
              "name": "defaultValue",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "primitive": "any"
          }
        }
      ],
      "name": "ContextProvider",
      "properties": [
        {
          "immutable": true,
          "name": "context",
          "type": {
            "fqn": "@aws-cdk/cdk.Construct"
          }
        },
        {
          "immutable": true,
          "name": "key",
          "type": {
            "primitive": "string"
          }
        },
        {
          "immutable": true,
          "name": "provider",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "@aws-cdk/cdk.CreationPolicy": {
      "assembly": "@aws-cdk/cdk",
      "datatype": true,
      "docs": {
        "comment": "Associate the CreationPolicy attribute with a resource to prevent its status from reaching create complete until\nAWS CloudFormation receives a specified number of success signals or the timeout period is exceeded. To signal a\nresource, you can use the cfn-signal helper script or SignalResource API. AWS CloudFormation publishes valid signals\nto the stack events so that you track the number of signals sent.\n\nThe creation policy is invoked only when AWS CloudFormation creates the associated resource. Currently, the only\nAWS CloudFormation resources that support creation policies are AWS::AutoScaling::AutoScalingGroup, AWS::EC2::Instance,\nand AWS::CloudFormation::WaitCondition.\n\nUse the CreationPolicy attribute when you want to wait on resource configuration actions before stack creation proceeds.\nFor example, if you install and configure software applications on an EC2 instance, you might want those applications to\nbe running before proceeding. In such cases, you can add a CreationPolicy attribute to the instance, and then send a success\nsignal to the instance after the applications are installed and configured. For a detailed example, see Deploying Applications\non Amazon EC2 with AWS CloudFormation."
      },
      "fqn": "@aws-cdk/cdk.CreationPolicy",
      "kind": "interface",
      "name": "CreationPolicy",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "comment": "For an Auto Scaling group replacement update, specifies how many instances must signal success for the\nupdate to succeed."
          },
          "immutable": true,
          "name": "autoScalingCreationPolicy",
          "type": {
            "fqn": "@aws-cdk/cdk.AutoScalingCreationPolicy",
            "optional": true
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "When AWS CloudFormation creates the associated resource, configures the number of required success signals and\nthe length of time that AWS CloudFormation waits for those signals."
          },
          "immutable": true,
          "name": "resourceSignal",
          "type": {
            "fqn": "@aws-cdk/cdk.ResourceSignal",
            "optional": true
          }
        }
      ]
    },
    "@aws-cdk/cdk.DeletionPolicy": {
      "assembly": "@aws-cdk/cdk",
      "docs": {
        "comment": "With the DeletionPolicy attribute you can preserve or (in some cases) backup a resource when its stack is deleted.\nYou specify a DeletionPolicy attribute for each resource that you want to control. If a resource has no DeletionPolicy\nattribute, AWS CloudFormation deletes the resource by default. Note that this capability also applies to update operations\nthat lead to resources being removed."
      },
      "fqn": "@aws-cdk/cdk.DeletionPolicy",
      "kind": "enum",
      "members": [
        {
          "docs": {
            "comment": "AWS CloudFormation deletes the resource and all its content if applicable during stack deletion. You can add this\ndeletion policy to any resource type. By default, if you don't specify a DeletionPolicy, AWS CloudFormation deletes\nyour resources. However, be aware of the following considerations:"
          },
          "name": "Delete"
        },
        {
          "docs": {
            "comment": "AWS CloudFormation keeps the resource without deleting the resource or its contents when its stack is deleted.\nYou can add this deletion policy to any resource type. Note that when AWS CloudFormation completes the stack deletion,\nthe stack will be in Delete_Complete state; however, resources that are retained continue to exist and continue to incur\napplicable charges until you delete those resources."
          },
          "name": "Retain"
        },
        {
          "docs": {
            "comment": "For resources that support snapshots (AWS::EC2::Volume, AWS::ElastiCache::CacheCluster, AWS::ElastiCache::ReplicationGroup,\nAWS::RDS::DBInstance, AWS::RDS::DBCluster, and AWS::Redshift::Cluster), AWS CloudFormation creates a snapshot for the\nresource before deleting it. Note that when AWS CloudFormation completes the stack deletion, the stack will be in the\nDelete_Complete state; however, the snapshots that are created with this policy continue to exist and continue to\nincur applicable charges until you delete those snapshots."
          },
          "name": "Snapshot"
        }
      ],
      "name": "DeletionPolicy"
    },
    "@aws-cdk/cdk.Dependency": {
      "assembly": "@aws-cdk/cdk",
      "datatype": true,
      "docs": {
        "comment": "A single dependency\nA single dependency"
      },
      "fqn": "@aws-cdk/cdk.Dependency",
      "kind": "interface",
      "name": "Dependency",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "comment": "Source the dependency\nSource the dependency"
          },
          "immutable": true,
          "name": "source",
          "type": {
            "fqn": "@aws-cdk/cdk.IConstruct"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "Target of the dependency\nTarget of the dependency"
          },
          "immutable": true,
          "name": "target",
          "type": {
            "fqn": "@aws-cdk/cdk.IConstruct"
          }
        }
      ]
    },
    "@aws-cdk/cdk.DynamicReferenceProps": {
      "assembly": "@aws-cdk/cdk",
      "datatype": true,
      "docs": {
        "comment": "Properties for a Dynamic Reference"
      },
      "fqn": "@aws-cdk/cdk.DynamicReferenceProps",
      "kind": "interface",
      "name": "DynamicReferenceProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "comment": "The reference key of the dynamic reference"
          },
          "immutable": true,
          "name": "referenceKey",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "The service to retrieve the dynamic reference from"
          },
          "immutable": true,
          "name": "service",
          "type": {
            "fqn": "@aws-cdk/cdk.CfnDynamicReferenceService"
          }
        }
      ]
    },
    "@aws-cdk/cdk.Environment": {
      "assembly": "@aws-cdk/cdk",
      "datatype": true,
      "docs": {
        "comment": "The deployment environment for a stack."
      },
      "fqn": "@aws-cdk/cdk.Environment",
      "kind": "interface",
      "name": "Environment",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "comment": "The AWS account ID for this environment.\nIf not specified, the context parameter `default-account` is used."
          },
          "immutable": true,
          "name": "account",
          "type": {
            "optional": true,
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "The AWS region for this environment.\nIf not specified, the context parameter `default-region` is used."
          },
          "immutable": true,
          "name": "region",
          "type": {
            "optional": true,
            "primitive": "string"
          }
        }
      ]
    },
    "@aws-cdk/cdk.FileSystemStore": {
      "assembly": "@aws-cdk/cdk",
      "docs": {
        "comment": "Can be used to prepare and emit synthesis artifacts into an output directory."
      },
      "fqn": "@aws-cdk/cdk.FileSystemStore",
      "initializer": {
        "initializer": true,
        "parameters": [
          {
            "name": "options",
            "type": {
              "fqn": "@aws-cdk/cdk.FileSystemStoreOptions"
            }
          }
        ]
      },
      "interfaces": [
        {
          "fqn": "@aws-cdk/cdk.ISessionStore"
        }
      ],
      "kind": "class",
      "methods": [
        {
          "name": "exists",
          "overrides": {
            "fqn": "@aws-cdk/cdk.ISessionStore"
          },
          "parameters": [
            {
              "name": "name",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "primitive": "boolean"
          }
        },
        {
          "docs": {
            "comment": "List all top-level files that were emitted to the store."
          },
          "name": "list",
          "overrides": {
            "fqn": "@aws-cdk/cdk.ISessionStore"
          },
          "returns": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "comment": "Do not allow further writes into the store."
          },
          "name": "lock",
          "overrides": {
            "fqn": "@aws-cdk/cdk.ISessionStore"
          }
        },
        {
          "docs": {
            "comment": "Creates a directory and returns it's full path."
          },
          "name": "mkdir",
          "overrides": {
            "fqn": "@aws-cdk/cdk.ISessionStore"
          },
          "parameters": [
            {
              "name": "directoryName",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "comment": "Returns the list of files in a directory."
          },
          "name": "readdir",
          "overrides": {
            "fqn": "@aws-cdk/cdk.ISessionStore"
          },
          "parameters": [
            {
              "name": "directoryName",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "comment": "Reads a file from the store."
          },
          "name": "readFile",
          "overrides": {
            "fqn": "@aws-cdk/cdk.ISessionStore"
          },
          "parameters": [
            {
              "name": "fileName",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "primitive": "any"
          }
        },
        {
          "docs": {
            "comment": "Reads a JSON object from the store."
          },
          "name": "readJson",
          "overrides": {
            "fqn": "@aws-cdk/cdk.ISessionStore"
          },
          "parameters": [
            {
              "name": "fileName",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "primitive": "any"
          }
        },
        {
          "docs": {
            "comment": "Writes a file into the store."
          },
          "name": "writeFile",
          "overrides": {
            "fqn": "@aws-cdk/cdk.ISessionStore"
          },
          "parameters": [
            {
              "name": "fileName",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "data",
              "type": {
                "primitive": "any"
              }
            }
          ]
        },
        {
          "docs": {
            "comment": "Writes a formatted JSON output file to the store"
          },
          "name": "writeJson",
          "overrides": {
            "fqn": "@aws-cdk/cdk.ISessionStore"
          },
          "parameters": [
            {
              "name": "fileName",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "json",
              "type": {
                "primitive": "any"
              }
            }
          ]
        }
      ],
      "name": "FileSystemStore"
    },
    "@aws-cdk/cdk.FileSystemStoreOptions": {
      "assembly": "@aws-cdk/cdk",
      "datatype": true,
      "fqn": "@aws-cdk/cdk.FileSystemStoreOptions",
      "kind": "interface",
      "name": "FileSystemStoreOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "comment": "The output directory for synthesis artifacts"
          },
          "immutable": true,
          "name": "outdir",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "@aws-cdk/cdk.Fn": {
      "assembly": "@aws-cdk/cdk",
      "docs": {
        "comment": "CloudFormation intrinsic functions.\nhttp://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference.html"
      },
      "fqn": "@aws-cdk/cdk.Fn",
      "initializer": {
        "initializer": true
      },
      "kind": "class",
      "methods": [
        {
          "docs": {
            "comment": "The intrinsic function ``Fn::Base64`` returns the Base64 representation of\nthe input string. This function is typically used to pass encoded data to\nAmazon EC2 instances by way of the UserData property.",
            "return": "a token represented as a string"
          },
          "name": "base64",
          "parameters": [
            {
              "docs": {
                "comment": "The string value you want to convert to Base64."
              },
              "name": "data",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "primitive": "string"
          },
          "static": true
        },
        {
          "docs": {
            "comment": "The intrinsic function ``Fn::Cidr`` returns the specified Cidr address block.",
            "return": "a token represented as a string"
          },
          "name": "cidr",
          "parameters": [
            {
              "docs": {
                "comment": "The user-specified default Cidr address block."
              },
              "name": "ipBlock",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "comment": "The number of subnets' Cidr block wanted. Count can be 1 to 256."
              },
              "name": "count",
              "type": {
                "primitive": "number"
              }
            },
            {
              "docs": {
                "comment": "The digit covered in the subnet."
              },
              "name": "sizeMask",
              "type": {
                "optional": true,
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "primitive": "string"
          },
          "static": true
        },
        {
          "docs": {
            "comment": "Returns true if all the specified conditions evaluate to true, or returns\nfalse if any one of the conditions evaluates to false. ``Fn::And`` acts as\nan AND operator. The minimum number of conditions that you can include is\n2, and the maximum is 10.",
            "return": "an FnCondition token"
          },
          "name": "conditionAnd",
          "parameters": [
            {
              "docs": {
                "comment": "conditions to AND"
              },
              "name": "conditions",
              "type": {
                "fqn": "@aws-cdk/cdk.ICfnConditionExpression"
              },
              "variadic": true
            }
          ],
          "returns": {
            "fqn": "@aws-cdk/cdk.ICfnConditionExpression"
          },
          "static": true,
          "variadic": true
        },
        {
          "docs": {
            "comment": "Returns true if a specified string matches at least one value in a list of\nstrings.",
            "return": "an FnCondition token"
          },
          "name": "conditionContains",
          "parameters": [
            {
              "docs": {
                "comment": "A list of strings, such as \"A\", \"B\", \"C\"."
              },
              "name": "listOfStrings",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "string"
                  },
                  "kind": "array"
                }
              }
            },
            {
              "docs": {
                "comment": "A string, such as \"A\", that you want to compare against a list of strings."
              },
              "name": "value",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "fqn": "@aws-cdk/cdk.ICfnConditionExpression"
          },
          "static": true
        },
        {
          "docs": {
            "comment": "Compares if two values are equal. Returns true if the two values are equal\nor false if they aren't.",
            "return": "an FnCondition token"
          },
          "name": "conditionEquals",
          "parameters": [
            {
              "docs": {
                "comment": "A value of any type that you want to compare."
              },
              "name": "lhs",
              "type": {
                "primitive": "any"
              }
            },
            {
              "docs": {
                "comment": "A value of any type that you want to compare."
              },
              "name": "rhs",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "fqn": "@aws-cdk/cdk.ICfnConditionExpression"
          },
          "static": true
        },
        {
          "docs": {
            "comment": "Returns one value if the specified condition evaluates to true and another\nvalue if the specified condition evaluates to false. Currently, AWS\nCloudFormation supports the ``Fn::If`` intrinsic function in the metadata\nattribute, update policy attribute, and property values in the Resources\nsection and Outputs sections of a template. You can use the AWS::NoValue\npseudo parameter as a return value to remove the corresponding property.",
            "return": "an FnCondition token"
          },
          "name": "conditionIf",
          "parameters": [
            {
              "name": "conditionId",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "comment": "A value to be returned if the specified condition\nevaluates to true."
              },
              "name": "valueIfTrue",
              "type": {
                "primitive": "any"
              }
            },
            {
              "docs": {
                "comment": "A value to be returned if the specified condition\nevaluates to false."
              },
              "name": "valueIfFalse",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "fqn": "@aws-cdk/cdk.ICfnConditionExpression"
          },
          "static": true
        },
        {
          "docs": {
            "comment": "Returns true for a condition that evaluates to false or returns false for a\ncondition that evaluates to true. ``Fn::Not`` acts as a NOT operator.",
            "return": "an FnCondition token"
          },
          "name": "conditionNot",
          "parameters": [
            {
              "docs": {
                "comment": "A condition such as ``Fn::Equals`` that evaluates to true\nor false."
              },
              "name": "condition",
              "type": {
                "fqn": "@aws-cdk/cdk.ICfnConditionExpression"
              }
            }
          ],
          "returns": {
            "fqn": "@aws-cdk/cdk.ICfnConditionExpression"
          },
          "static": true
        },
        {
          "docs": {
            "comment": "Returns true if any one of the specified conditions evaluate to true, or\nreturns false if all of the conditions evaluates to false. ``Fn::Or`` acts\nas an OR operator. The minimum number of conditions that you can include is\n2, and the maximum is 10.",
            "return": "an FnCondition token"
          },
          "name": "conditionOr",
          "parameters": [
            {
              "docs": {
                "comment": "conditions that evaluates to true or false."
              },
              "name": "conditions",
              "type": {
                "fqn": "@aws-cdk/cdk.ICfnConditionExpression"
              },
              "variadic": true
            }
          ],
          "returns": {
            "fqn": "@aws-cdk/cdk.ICfnConditionExpression"
          },
          "static": true,
          "variadic": true
        },
        {
          "docs": {
            "comment": "The intrinsic function ``Fn::FindInMap`` returns the value corresponding to\nkeys in a two-level map that is declared in the Mappings section.",
            "return": "a token represented as a string"
          },
          "name": "findInMap",
          "parameters": [
            {
              "name": "mapName",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "topLevelKey",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "secondLevelKey",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "primitive": "string"
          },
          "static": true
        },
        {
          "docs": {
            "comment": "The ``Fn::GetAtt`` intrinsic function returns the value of an attribute\nfrom a resource in the template.",
            "return": "a CloudFormationToken object"
          },
          "name": "getAtt",
          "parameters": [
            {
              "docs": {
                "comment": "The logical name (also called logical ID) of\nthe resource that contains the attribute that you want."
              },
              "name": "logicalNameOfResource",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "comment": "The name of the resource-specific attribute whose\nvalue you want. See the resource's reference page for details about the\nattributes available for that resource type."
              },
              "name": "attributeName",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "fqn": "@aws-cdk/cdk.Token"
          },
          "static": true
        },
        {
          "docs": {
            "comment": "The intrinsic function ``Fn::GetAZs`` returns an array that lists\nAvailability Zones for a specified region. Because customers have access to\ndifferent Availability Zones, the intrinsic function ``Fn::GetAZs`` enables\ntemplate authors to write templates that adapt to the calling user's\naccess. That way you don't have to hard-code a full list of Availability\nZones for a specified region.",
            "return": "a token represented as a string array"
          },
          "name": "getAZs",
          "parameters": [
            {
              "docs": {
                "comment": "The name of the region for which you want to get the\nAvailability Zones. You can use the AWS::Region pseudo parameter to specify\nthe region in which the stack is created. Specifying an empty string is\nequivalent to specifying AWS::Region."
              },
              "name": "region",
              "type": {
                "optional": true,
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          },
          "static": true
        },
        {
          "docs": {
            "comment": "The intrinsic function ``Fn::ImportValue`` returns the value of an output\nexported by another stack. You typically use this function to create\ncross-stack references. In the following example template snippets, Stack A\nexports VPC security group values and Stack B imports them.",
            "return": "a token represented as a string"
          },
          "name": "importValue",
          "parameters": [
            {
              "docs": {
                "comment": "The stack output value that you want to import."
              },
              "name": "sharedValueToImport",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "primitive": "string"
          },
          "static": true
        },
        {
          "docs": {
            "comment": "The intrinsic function ``Fn::Join`` appends a set of values into a single\nvalue, separated by the specified delimiter. If a delimiter is the empty\nstring, the set of values are concatenated with no delimiter.",
            "return": "a token represented as a string"
          },
          "name": "join",
          "parameters": [
            {
              "docs": {
                "comment": "The value you want to occur between fragments. The\ndelimiter will occur between fragments only. It will not terminate the\nfinal value."
              },
              "name": "delimiter",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "comment": "The list of values you want combined."
              },
              "name": "listOfValues",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "string"
                  },
                  "kind": "array"
                }
              }
            }
          ],
          "returns": {
            "primitive": "string"
          },
          "static": true
        },
        {
          "docs": {
            "comment": "The intrinsic function ``Fn::Select`` returns a single object from a list of objects by index.",
            "return": "a token represented as a string"
          },
          "name": "select",
          "parameters": [
            {
              "docs": {
                "comment": "The index of the object to retrieve. This must be a value from zero to N-1, where N represents the number of elements in the array."
              },
              "name": "index",
              "type": {
                "primitive": "number"
              }
            },
            {
              "docs": {
                "comment": "The list of objects to select from. This list must not be null, nor can it have null entries."
              },
              "name": "array",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "string"
                  },
                  "kind": "array"
                }
              }
            }
          ],
          "returns": {
            "primitive": "string"
          },
          "static": true
        },
        {
          "docs": {
            "comment": "To split a string into a list of string values so that you can select an element from the\nresulting string list, use the ``Fn::Split`` intrinsic function. Specify the location of splits\nwith a delimiter, such as , (a comma). After you split a string, use the ``Fn::Select`` function\nto pick a specific element.",
            "return": "a token represented as a string array"
          },
          "name": "split",
          "parameters": [
            {
              "docs": {
                "comment": "A string value that determines where the source string is divided."
              },
              "name": "delimiter",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "comment": "The string value that you want to split."
              },
              "name": "source",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          },
          "static": true
        },
        {
          "docs": {
            "comment": "The intrinsic function ``Fn::Sub`` substitutes variables in an input string\nwith values that you specify. In your templates, you can use this function\nto construct commands or outputs that include values that aren't available\nuntil you create or update a stack.",
            "return": "a token represented as a string"
          },
          "name": "sub",
          "parameters": [
            {
              "docs": {
                "comment": "A string with variables that AWS CloudFormation substitutes\nwith their associated values at runtime. Write variables as ${MyVarName}.\nVariables can be template parameter names, resource logical IDs, resource\nattributes, or a variable in a key-value map. If you specify only template\nparameter names, resource logical IDs, and resource attributes, don't\nspecify a key-value map."
              },
              "name": "body",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "comment": "The name of a variable that you included in the String\nparameter. The value that AWS CloudFormation substitutes for the associated\nvariable name at runtime."
              },
              "name": "variables",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "string"
                  },
                  "kind": "map"
                },
                "optional": true
              }
            }
          ],
          "returns": {
            "primitive": "string"
          },
          "static": true
        },
        {
          "docs": {
            "comment": "Returns true if a specified string matches all values in a list.",
            "return": "an FnCondition token"
          },
          "name": "conditionEachMemberEquals",
          "parameters": [
            {
              "docs": {
                "comment": "A list of strings, such as \"A\", \"B\", \"C\"."
              },
              "name": "listOfStrings",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "string"
                  },
                  "kind": "array"
                }
              }
            },
            {
              "docs": {
                "comment": "A string, such as \"A\", that you want to compare against a list\nof strings."
              },
              "name": "value",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "fqn": "@aws-cdk/cdk.ICfnConditionExpression"
          }
        },
        {
          "docs": {
            "comment": "Returns true if each member in a list of strings matches at least one value\nin a second list of strings.",
            "return": "an FnCondition token"
          },
          "name": "conditionEachMemberIn",
          "parameters": [
            {
              "docs": {
                "comment": "A list of strings, such as \"A\", \"B\", \"C\". AWS\nCloudFormation checks whether each member in the strings_to_check parameter\nis in the strings_to_match parameter."
              },
              "name": "stringsToCheck",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "string"
                  },
                  "kind": "array"
                }
              }
            },
            {
              "docs": {
                "comment": "A list of strings, such as \"A\", \"B\", \"C\". Each member\nin the strings_to_match parameter is compared against the members of the\nstrings_to_check parameter."
              },
              "name": "stringsToMatch",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "fqn": "@aws-cdk/cdk.ICfnConditionExpression"
          }
        },
        {
          "docs": {
            "comment": "Returns all values for a specified parameter type.",
            "return": "a token represented as a string array"
          },
          "name": "refAll",
          "parameters": [
            {
              "docs": {
                "comment": "An AWS-specific parameter type, such as\nAWS::EC2::SecurityGroup::Id or AWS::EC2::VPC::Id. For more information, see\nParameters in the AWS CloudFormation User Guide."
              },
              "name": "parameterType",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "comment": "Returns an attribute value or list of values for a specific parameter and\nattribute.",
            "return": "a token represented as a string"
          },
          "name": "valueOf",
          "parameters": [
            {
              "docs": {
                "comment": "The name of a parameter for which you want to\nretrieve attribute values. The parameter must be declared in the Parameters\nsection of the template."
              },
              "name": "parameterOrLogicalId",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "comment": "The name of an attribute from which you want to retrieve a\nvalue."
              },
              "name": "attribute",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "comment": "Returns a list of all attribute values for a given parameter type and\nattribute.",
            "return": "a token represented as a string array"
          },
          "name": "valueOfAll",
          "parameters": [
            {
              "docs": {
                "comment": "An AWS-specific parameter type, such as\nAWS::EC2::SecurityGroup::Id or AWS::EC2::VPC::Id. For more information, see\nParameters in the AWS CloudFormation User Guide."
              },
              "name": "parameterType",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "comment": "The name of an attribute from which you want to retrieve a\nvalue. For more information about attributes, see Supported Attributes."
              },
              "name": "attribute",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        }
      ],
      "name": "Fn"
    },
    "@aws-cdk/cdk.HashedAddressingScheme": {
      "assembly": "@aws-cdk/cdk",
      "docs": {
        "comment": "Renders a hashed ID for a resource.\n\nIn order to make sure logical IDs are unique and stable, we hash the resource\nconstruct tree path (i.e. toplevel/secondlevel/.../myresource) and add it as\na suffix to the path components joined without a separator (CloudFormation\nIDs only allow alphanumeric characters).\n\nThe result will be:\n\n   <path.join('')><md5(path.join('/')>\n     \"human\"      \"hash\"\n\nIf the \"human\" part of the ID exceeds 240 characters, we simply trim it so\nthe total ID doesn't exceed CloudFormation's 255 character limit.\n\nWe only take 8 characters from the md5 hash (0.000005 chance of collision).\n\nSpecial cases:\n\n- If the path only contains a single component (i.e. it's a top-level\n   resource), we won't add the hash to it. The hash is not needed for\n   disamiguation and also, it allows for a more straightforward migration an\n   existing CloudFormation template to a CDK stack without logical ID changes\n   (or renames).\n- For aesthetic reasons, if the last components of the path are the same\n   (i.e. `L1/L2/Pipeline/Pipeline`), they will be de-duplicated to make the\n   resulting human portion of the ID more pleasing: `L1L2Pipeline<HASH>`\n   instead of `L1L2PipelinePipeline<HASH>`\n- If a component is named \"Default\" it will be omitted from the path. This\n   allows refactoring higher level abstractions around constructs without affecting\n   the IDs of already deployed resources.\n- If a component is named \"Resource\" it will be omitted from the user-visible\n   path, but included in the hash. This reduces visual noise in the human readable\n   part of the identifier."
      },
      "fqn": "@aws-cdk/cdk.HashedAddressingScheme",
      "initializer": {
        "initializer": true
      },
      "interfaces": [
        {
          "fqn": "@aws-cdk/cdk.IAddressingScheme"
        }
      ],
      "kind": "class",
      "methods": [
        {
          "docs": {
            "comment": "Return the logical ID for the given list of Construct names on the path."
          },
          "name": "allocateAddress",
          "overrides": {
            "fqn": "@aws-cdk/cdk.IAddressingScheme"
          },
          "parameters": [
            {
              "name": "addressComponents",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "string"
                  },
                  "kind": "array"
                }
              }
            }
          ],
          "returns": {
            "primitive": "string"
          }
        }
      ],
      "name": "HashedAddressingScheme"
    },
    "@aws-cdk/cdk.IAddressingScheme": {
      "assembly": "@aws-cdk/cdk",
      "docs": {
        "comment": "Interface for classes that implementation logical ID assignment strategies"
      },
      "fqn": "@aws-cdk/cdk.IAddressingScheme",
      "kind": "interface",
      "methods": [
        {
          "abstract": true,
          "docs": {
            "comment": "Return the logical ID for the given list of Construct names on the path."
          },
          "name": "allocateAddress",
          "parameters": [
            {
              "name": "addressComponents",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "string"
                  },
                  "kind": "array"
                }
              }
            }
          ],
          "returns": {
            "primitive": "string"
          }
        }
      ],
      "name": "IAddressingScheme"
    },
    "@aws-cdk/cdk.IAspect": {
      "assembly": "@aws-cdk/cdk",
      "docs": {
        "comment": "Represents an Aspect"
      },
      "fqn": "@aws-cdk/cdk.IAspect",
      "kind": "interface",
      "methods": [
        {
          "abstract": true,
          "docs": {
            "comment": "All aspects can visit an IConstruct"
          },
          "name": "visit",
          "parameters": [
            {
              "name": "node",
              "type": {
                "fqn": "@aws-cdk/cdk.IConstruct"
              }
            }
          ]
        }
      ],
      "name": "IAspect"
    },
    "@aws-cdk/cdk.ICfnConditionExpression": {
      "assembly": "@aws-cdk/cdk",
      "docs": {
        "comment": "Represents a CloudFormation element that can be used within a Condition.\n\nYou can use intrinsic functions, such as ``Fn.conditionIf``,\n``Fn.conditionEquals``, and ``Fn.conditionNot``, to conditionally create\nstack resources. These conditions are evaluated based on input parameters\nthat you declare when you create or update a stack. After you define all your\nconditions, you can associate them with resources or resource properties in\nthe Resources and Outputs sections of a template.\n\nYou define all conditions in the Conditions section of a template except for\n``Fn.conditionIf`` conditions. You can use the ``Fn.conditionIf`` condition\nin the metadata attribute, update policy attribute, and property values in\nthe Resources section and Outputs sections of a template.\n\nYou might use conditions when you want to reuse a template that can create\nresources in different contexts, such as a test environment versus a\nproduction environment. In your template, you can add an EnvironmentType\ninput parameter, which accepts either prod or test as inputs. For the\nproduction environment, you might include Amazon EC2 instances with certain\ncapabilities; however, for the test environment, you want to use less\ncapabilities to save costs. With conditions, you can define which resources\nare created and how they're configured for each environment type."
      },
      "fqn": "@aws-cdk/cdk.ICfnConditionExpression",
      "kind": "interface",
      "methods": [
        {
          "abstract": true,
          "docs": {
            "comment": "Returns a JSON node that represents this condition expression"
          },
          "name": "resolve",
          "parameters": [
            {
              "name": "context",
              "type": {
                "fqn": "@aws-cdk/cdk.ResolveContext"
              }
            }
          ],
          "returns": {
            "primitive": "any"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "Returns a string token representation of this condition expression, which\nresolves to the CloudFormation condition JSON during synthesis.\n\nYou can use `toString` when you wish to embed a condition expression\nin a property value that accepts a `string`. For example:\n\n```ts\n   * new sqs.Queue(this, 'MyQueue', {\n   *   queueName: Fn.conditionIf('Condition', 'Hello', 'World').toString()\n   * });\n   * ```\n\nNOTE: we need this explicitly here despite the fact that in JavaScript this would\n\"just work\" since conditions are eventually tokens that implement `toString`,\nin order for jsii languages like Java to proxy this to jsii."
          },
          "name": "toString",
          "returns": {
            "primitive": "string"
          }
        }
      ],
      "name": "ICfnConditionExpression"
    },
    "@aws-cdk/cdk.IConstruct": {
      "assembly": "@aws-cdk/cdk",
      "docs": {
        "comment": "Represents a construct."
      },
      "fqn": "@aws-cdk/cdk.IConstruct",
      "interfaces": [
        {
          "fqn": "@aws-cdk/cdk.IDependable"
        }
      ],
      "kind": "interface",
      "name": "IConstruct",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "comment": "The construct node in the scope tree."
          },
          "immutable": true,
          "name": "node",
          "type": {
            "fqn": "@aws-cdk/cdk.ConstructNode"
          }
        }
      ]
    },
    "@aws-cdk/cdk.IDependable": {
      "assembly": "@aws-cdk/cdk",
      "docs": {
        "comment": "A set of constructs that can be depended upon\n\nThis interface can be used to take an (ordering) dependency on a set of\nconstructs. An ordering dependency implies that the resources represented by\nthose constructs are deployed before the resources depending ON them are\ndeployed."
      },
      "fqn": "@aws-cdk/cdk.IDependable",
      "kind": "interface",
      "name": "IDependable",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "comment": "The set of constructs that form the root of this dependable\n\nAll resources under all returned constructs are included in the ordering\ndependency."
          },
          "immutable": true,
          "name": "dependencyRoots",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/cdk.IConstruct"
              },
              "kind": "array"
            }
          }
        }
      ]
    },
    "@aws-cdk/cdk.IResolvedValuePostProcessor": {
      "assembly": "@aws-cdk/cdk",
      "docs": {
        "comment": "A Token that can post-process the complete resolved value, after resolve() has recursed over it"
      },
      "fqn": "@aws-cdk/cdk.IResolvedValuePostProcessor",
      "kind": "interface",
      "methods": [
        {
          "abstract": true,
          "docs": {
            "comment": "Process the completely resolved value, after full recursion/resolution has happened"
          },
          "name": "postProcess",
          "parameters": [
            {
              "name": "input",
              "type": {
                "primitive": "any"
              }
            },
            {
              "name": "context",
              "type": {
                "fqn": "@aws-cdk/cdk.ResolveContext"
              }
            }
          ],
          "returns": {
            "primitive": "any"
          }
        }
      ],
      "name": "IResolvedValuePostProcessor"
    },
    "@aws-cdk/cdk.IResourceOptions": {
      "assembly": "@aws-cdk/cdk",
      "fqn": "@aws-cdk/cdk.IResourceOptions",
      "kind": "interface",
      "name": "IResourceOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "comment": "A condition to associate with this resource. This means that only if the condition evaluates to 'true' when the stack\nis deployed, the resource will be included. This is provided to allow CDK projects to produce legacy templates, but noramlly\nthere is no need to use it in CDK projects."
          },
          "name": "condition",
          "type": {
            "fqn": "@aws-cdk/cdk.CfnCondition",
            "optional": true
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "Associate the CreationPolicy attribute with a resource to prevent its status from reaching create complete until\nAWS CloudFormation receives a specified number of success signals or the timeout period is exceeded. To signal a\nresource, you can use the cfn-signal helper script or SignalResource API. AWS CloudFormation publishes valid signals\nto the stack events so that you track the number of signals sent."
          },
          "name": "creationPolicy",
          "type": {
            "fqn": "@aws-cdk/cdk.CreationPolicy",
            "optional": true
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "With the DeletionPolicy attribute you can preserve or (in some cases) backup a resource when its stack is deleted.\nYou specify a DeletionPolicy attribute for each resource that you want to control. If a resource has no DeletionPolicy\nattribute, AWS CloudFormation deletes the resource by default. Note that this capability also applies to update operations\nthat lead to resources being removed."
          },
          "name": "deletionPolicy",
          "type": {
            "fqn": "@aws-cdk/cdk.DeletionPolicy",
            "optional": true
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "Metadata associated with the CloudFormation resource. This is not the same as the construct metadata which can be added\nusing construct.addMetadata(), but would not appear in the CloudFormation template automatically."
          },
          "name": "metadata",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            },
            "optional": true
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "Use the UpdatePolicy attribute to specify how AWS CloudFormation handles updates to the AWS::AutoScaling::AutoScalingGroup\nresource. AWS CloudFormation invokes one of three update policies depending on the type of change you make or whether a\nscheduled action is associated with the Auto Scaling group."
          },
          "name": "updatePolicy",
          "type": {
            "fqn": "@aws-cdk/cdk.UpdatePolicy",
            "optional": true
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "Use the UpdateReplacePolicy attribute to retain or (in some cases) backup the existing physical instance of a resource\nwhen it is replaced during a stack update operation."
          },
          "name": "updateReplacePolicy",
          "type": {
            "fqn": "@aws-cdk/cdk.DeletionPolicy",
            "optional": true
          }
        }
      ]
    },
    "@aws-cdk/cdk.ISessionStore": {
      "assembly": "@aws-cdk/cdk",
      "fqn": "@aws-cdk/cdk.ISessionStore",
      "kind": "interface",
      "methods": [
        {
          "abstract": true,
          "docs": {
            "return": "true if the file `fileName` exists in the store."
          },
          "name": "exists",
          "parameters": [
            {
              "docs": {
                "comment": "The name of the file or directory to look up."
              },
              "name": "name",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "List all top-level files that were emitted to the store."
          },
          "name": "list",
          "returns": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "Do not allow further writes into the store."
          },
          "name": "lock"
        },
        {
          "abstract": true,
          "docs": {
            "comment": "Creates a directory and returns it's full path.",
            "throws": "if a directory by that name already exists in the session or if the session has already been finalized."
          },
          "name": "mkdir",
          "parameters": [
            {
              "docs": {
                "comment": "The name of the directory to create."
              },
              "name": "directoryName",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "Returns the list of files in a directory.",
            "throws": "if there is no directory artifact under this name"
          },
          "name": "readdir",
          "parameters": [
            {
              "docs": {
                "comment": "The name of the artifact"
              },
              "name": "directoryName",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "Reads a file from the store.",
            "throws": "if the file is not found"
          },
          "name": "readFile",
          "parameters": [
            {
              "docs": {
                "comment": "The name of the file."
              },
              "name": "fileName",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "primitive": "any"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "Reads a JSON object from the store."
          },
          "name": "readJson",
          "parameters": [
            {
              "name": "fileName",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "primitive": "any"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "Writes a file into the store."
          },
          "name": "writeFile",
          "parameters": [
            {
              "docs": {
                "comment": "The name of the file."
              },
              "name": "artifactName",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "comment": "The contents of the file."
              },
              "name": "data",
              "type": {
                "primitive": "any"
              }
            }
          ]
        },
        {
          "abstract": true,
          "docs": {
            "comment": "Writes a formatted JSON output file to the store"
          },
          "name": "writeJson",
          "parameters": [
            {
              "docs": {
                "comment": "the name of the artifact"
              },
              "name": "artifactName",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "comment": "the JSON object"
              },
              "name": "json",
              "type": {
                "primitive": "any"
              }
            }
          ]
        }
      ],
      "name": "ISessionStore"
    },
    "@aws-cdk/cdk.ISynthesisSession": {
      "assembly": "@aws-cdk/cdk",
      "fqn": "@aws-cdk/cdk.ISynthesisSession",
      "kind": "interface",
      "methods": [
        {
          "abstract": true,
          "name": "addArtifact",
          "parameters": [
            {
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "droplet",
              "type": {
                "fqn": "@aws-cdk/cx-api.Artifact"
              }
            }
          ]
        },
        {
          "abstract": true,
          "name": "addBuildStep",
          "parameters": [
            {
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "step",
              "type": {
                "fqn": "@aws-cdk/cx-api.BuildStep"
              }
            }
          ]
        },
        {
          "abstract": true,
          "name": "getArtifact",
          "parameters": [
            {
              "name": "id",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "fqn": "@aws-cdk/cx-api.Artifact"
          }
        },
        {
          "abstract": true,
          "name": "tryGetArtifact",
          "parameters": [
            {
              "name": "id",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "fqn": "@aws-cdk/cx-api.Artifact",
            "optional": true
          }
        }
      ],
      "name": "ISynthesisSession",
      "properties": [
        {
          "abstract": true,
          "immutable": true,
          "name": "manifest",
          "type": {
            "fqn": "@aws-cdk/cx-api.AssemblyManifest"
          }
        },
        {
          "abstract": true,
          "immutable": true,
          "name": "store",
          "type": {
            "fqn": "@aws-cdk/cdk.ISessionStore"
          }
        }
      ]
    },
    "@aws-cdk/cdk.ISynthesizable": {
      "assembly": "@aws-cdk/cdk",
      "fqn": "@aws-cdk/cdk.ISynthesizable",
      "kind": "interface",
      "methods": [
        {
          "abstract": true,
          "name": "synthesize",
          "parameters": [
            {
              "name": "session",
              "type": {
                "fqn": "@aws-cdk/cdk.ISynthesisSession"
              }
            }
          ]
        }
      ],
      "name": "ISynthesizable"
    },
    "@aws-cdk/cdk.ITaggable": {
      "assembly": "@aws-cdk/cdk",
      "fqn": "@aws-cdk/cdk.ITaggable",
      "kind": "interface",
      "name": "ITaggable",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "comment": "TagManager to set, remove and format tags"
          },
          "immutable": true,
          "name": "tags",
          "type": {
            "fqn": "@aws-cdk/cdk.TagManager"
          }
        }
      ]
    },
    "@aws-cdk/cdk.ITemplateOptions": {
      "assembly": "@aws-cdk/cdk",
      "docs": {
        "comment": "CloudFormation template options for a stack."
      },
      "fqn": "@aws-cdk/cdk.ITemplateOptions",
      "kind": "interface",
      "name": "ITemplateOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "comment": "Gets or sets the description of this stack.\nIf provided, it will be included in the CloudFormation template's \"Description\" attribute."
          },
          "name": "description",
          "type": {
            "optional": true,
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "Metadata associated with the CloudFormation template."
          },
          "name": "metadata",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            },
            "optional": true
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "Gets or sets the AWSTemplateFormatVersion field of the CloudFormation template."
          },
          "name": "templateFormatVersion",
          "type": {
            "optional": true,
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "Gets or sets the top-level template transform for this stack (e.g. \"AWS::Serverless-2016-10-31\")."
          },
          "name": "transform",
          "type": {
            "optional": true,
            "primitive": "string"
          }
        }
      ]
    },
    "@aws-cdk/cdk.InMemoryStore": {
      "assembly": "@aws-cdk/cdk",
      "fqn": "@aws-cdk/cdk.InMemoryStore",
      "initializer": {
        "initializer": true
      },
      "interfaces": [
        {
          "fqn": "@aws-cdk/cdk.ISessionStore"
        }
      ],
      "kind": "class",
      "methods": [
        {
          "name": "exists",
          "overrides": {
            "fqn": "@aws-cdk/cdk.ISessionStore"
          },
          "parameters": [
            {
              "name": "name",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "primitive": "boolean"
          }
        },
        {
          "docs": {
            "comment": "List all top-level files that were emitted to the store."
          },
          "name": "list",
          "overrides": {
            "fqn": "@aws-cdk/cdk.ISessionStore"
          },
          "returns": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "comment": "Do not allow further writes into the store."
          },
          "name": "lock",
          "overrides": {
            "fqn": "@aws-cdk/cdk.ISessionStore"
          }
        },
        {
          "docs": {
            "comment": "Creates a directory and returns it's full path."
          },
          "name": "mkdir",
          "overrides": {
            "fqn": "@aws-cdk/cdk.ISessionStore"
          },
          "parameters": [
            {
              "name": "directoryName",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "comment": "Returns the list of files in a directory."
          },
          "name": "readdir",
          "overrides": {
            "fqn": "@aws-cdk/cdk.ISessionStore"
          },
          "parameters": [
            {
              "name": "directoryName",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "comment": "Reads a file from the store."
          },
          "name": "readFile",
          "overrides": {
            "fqn": "@aws-cdk/cdk.ISessionStore"
          },
          "parameters": [
            {
              "name": "fileName",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "primitive": "any"
          }
        },
        {
          "docs": {
            "comment": "Reads a JSON object from the store."
          },
          "name": "readJson",
          "overrides": {
            "fqn": "@aws-cdk/cdk.ISessionStore"
          },
          "parameters": [
            {
              "name": "fileName",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "primitive": "any"
          }
        },
        {
          "docs": {
            "comment": "Writes a file into the store."
          },
          "name": "writeFile",
          "overrides": {
            "fqn": "@aws-cdk/cdk.ISessionStore"
          },
          "parameters": [
            {
              "name": "fileName",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "data",
              "type": {
                "primitive": "any"
              }
            }
          ]
        },
        {
          "docs": {
            "comment": "Writes a formatted JSON output file to the store"
          },
          "name": "writeJson",
          "overrides": {
            "fqn": "@aws-cdk/cdk.ISessionStore"
          },
          "parameters": [
            {
              "name": "fileName",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "json",
              "type": {
                "primitive": "any"
              }
            }
          ]
        }
      ],
      "name": "InMemoryStore"
    },
    "@aws-cdk/cdk.Include": {
      "assembly": "@aws-cdk/cdk",
      "base": {
        "fqn": "@aws-cdk/cdk.CfnElement"
      },
      "docs": {
        "comment": "Includes a CloudFormation template into a stack. All elements of the template will be merged into\nthe current stack, together with any elements created programmatically."
      },
      "fqn": "@aws-cdk/cdk.Include",
      "initializer": {
        "docs": {
          "comment": "Creates an adopted template construct. The template will be incorporated into the stack as-is with no changes at all.\nThis means that logical IDs of entities within this template may conflict with logical IDs of entities that are part of the\nstack."
        },
        "initializer": true,
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "@aws-cdk/cdk.Construct"
            }
          },
          {
            "docs": {
              "comment": "The ID of this construct"
            },
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/cdk.IncludeProps"
            }
          }
        ]
      },
      "kind": "class",
      "name": "Include",
      "properties": [
        {
          "docs": {
            "comment": "The included template."
          },
          "immutable": true,
          "name": "template",
          "type": {
            "primitive": "json"
          }
        }
      ]
    },
    "@aws-cdk/cdk.IncludeProps": {
      "assembly": "@aws-cdk/cdk",
      "datatype": true,
      "fqn": "@aws-cdk/cdk.IncludeProps",
      "kind": "interface",
      "name": "IncludeProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "comment": "The CloudFormation template to include in the stack (as is)."
          },
          "immutable": true,
          "name": "template",
          "type": {
            "primitive": "json"
          }
        }
      ]
    },
    "@aws-cdk/cdk.LogicalIDs": {
      "assembly": "@aws-cdk/cdk",
      "docs": {
        "comment": "Class that keeps track of the logical IDs that are assigned to resources\n\nSupports renaming the generated IDs."
      },
      "fqn": "@aws-cdk/cdk.LogicalIDs",
      "initializer": {
        "initializer": true,
        "parameters": [
          {
            "name": "namingScheme",
            "type": {
              "fqn": "@aws-cdk/cdk.IAddressingScheme"
            }
          }
        ]
      },
      "kind": "class",
      "methods": [
        {
          "docs": {
            "comment": "Throw an error if not all renames have been used\n\nThis is to assure that users didn't make typoes when registering renames."
          },
          "name": "assertAllRenamesApplied"
        },
        {
          "docs": {
            "comment": "Return the logical ID for the given stack element"
          },
          "name": "getLogicalId",
          "parameters": [
            {
              "name": "cfnElement",
              "type": {
                "fqn": "@aws-cdk/cdk.CfnElement"
              }
            }
          ],
          "returns": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "comment": "Rename a logical ID from an old ID to a new ID"
          },
          "name": "renameLogical",
          "parameters": [
            {
              "name": "oldId",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "newId",
              "type": {
                "primitive": "string"
              }
            }
          ]
        }
      ],
      "name": "LogicalIDs",
      "properties": [
        {
          "immutable": true,
          "name": "namingScheme",
          "type": {
            "fqn": "@aws-cdk/cdk.IAddressingScheme"
          }
        }
      ]
    },
    "@aws-cdk/cdk.ManifestOptions": {
      "assembly": "@aws-cdk/cdk",
      "datatype": true,
      "fqn": "@aws-cdk/cdk.ManifestOptions",
      "kind": "interface",
      "name": "ManifestOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "comment": "Emit the legacy manifest (`cdk.out`) when the session is closed (alongside `manifest.json`).",
            "default": "false"
          },
          "immutable": true,
          "name": "legacyManifest",
          "type": {
            "optional": true,
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "Include runtime information (module versions) in manifest.",
            "default": "true"
          },
          "immutable": true,
          "name": "runtimeInformation",
          "type": {
            "optional": true,
            "primitive": "boolean"
          }
        }
      ]
    },
    "@aws-cdk/cdk.MetadataEntry": {
      "assembly": "@aws-cdk/cdk",
      "datatype": true,
      "docs": {
        "comment": "An metadata entry in the construct."
      },
      "fqn": "@aws-cdk/cdk.MetadataEntry",
      "kind": "interface",
      "name": "MetadataEntry",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "comment": "A stack trace for when the entry was created."
          },
          "immutable": true,
          "name": "trace",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "The type of the metadata entry."
          },
          "immutable": true,
          "name": "type",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "The data."
          },
          "immutable": true,
          "name": "data",
          "type": {
            "optional": true,
            "primitive": "any"
          }
        }
      ]
    },
    "@aws-cdk/cdk.OutgoingReference": {
      "assembly": "@aws-cdk/cdk",
      "datatype": true,
      "fqn": "@aws-cdk/cdk.OutgoingReference",
      "kind": "interface",
      "name": "OutgoingReference",
      "properties": [
        {
          "abstract": true,
          "immutable": true,
          "name": "reference",
          "type": {
            "fqn": "@aws-cdk/cdk.Reference"
          }
        },
        {
          "abstract": true,
          "immutable": true,
          "name": "source",
          "type": {
            "fqn": "@aws-cdk/cdk.IConstruct"
          }
        }
      ]
    },
    "@aws-cdk/cdk.Reference": {
      "assembly": "@aws-cdk/cdk",
      "base": {
        "fqn": "@aws-cdk/cdk.Token"
      },
      "docs": {
        "comment": "A Token that represents a reference between two constructs\n\nReferences are recorded."
      },
      "fqn": "@aws-cdk/cdk.Reference",
      "initializer": {
        "initializer": true,
        "parameters": [
          {
            "name": "value",
            "type": {
              "primitive": "any"
            }
          },
          {
            "name": "displayName",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "target",
            "type": {
              "fqn": "@aws-cdk/cdk.Construct"
            }
          }
        ]
      },
      "kind": "class",
      "methods": [
        {
          "docs": {
            "comment": "Check whether this is actually a Reference"
          },
          "name": "isReference",
          "parameters": [
            {
              "name": "x",
              "type": {
                "fqn": "@aws-cdk/cdk.Token"
              }
            }
          ],
          "returns": {
            "primitive": "boolean"
          },
          "static": true
        }
      ],
      "name": "Reference",
      "properties": [
        {
          "immutable": true,
          "name": "target",
          "type": {
            "fqn": "@aws-cdk/cdk.Construct"
          }
        }
      ]
    },
    "@aws-cdk/cdk.RemovalPolicy": {
      "assembly": "@aws-cdk/cdk",
      "fqn": "@aws-cdk/cdk.RemovalPolicy",
      "kind": "enum",
      "members": [
        {
          "docs": {
            "comment": "This is the default removal policy for most resources. It means that when the resource\nis removed from the app, it will be physically destroyed."
          },
          "name": "Destroy"
        },
        {
          "docs": {
            "comment": "This uses the 'Retain' DeletionPolicy, which will cause the resource to be retained\nin the account, but orphaned from the stack."
          },
          "name": "Orphan"
        },
        {
          "docs": {
            "comment": "This will apply the 'Retain' DeletionPolicy and also add metadata for the toolkit\nto apply a CloudFormation stack policy which forbids the deletion of resource."
          },
          "name": "Forbid"
        }
      ],
      "name": "RemovalPolicy"
    },
    "@aws-cdk/cdk.RemoveTag": {
      "assembly": "@aws-cdk/cdk",
      "base": {
        "fqn": "@aws-cdk/cdk.TagBase"
      },
      "docs": {
        "comment": "The RemoveTag Aspect will handle removing tags from this node and children"
      },
      "fqn": "@aws-cdk/cdk.RemoveTag",
      "initializer": {
        "initializer": true,
        "parameters": [
          {
            "name": "key",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/cdk.TagProps",
              "optional": true
            }
          }
        ]
      },
      "kind": "class",
      "methods": [
        {
          "name": "applyTag",
          "overrides": {
            "fqn": "@aws-cdk/cdk.TagBase"
          },
          "parameters": [
            {
              "name": "resource",
              "type": {
                "fqn": "@aws-cdk/cdk.ITaggable"
              }
            }
          ],
          "protected": true
        }
      ],
      "name": "RemoveTag"
    },
    "@aws-cdk/cdk.ResolveContext": {
      "assembly": "@aws-cdk/cdk",
      "datatype": true,
      "docs": {
        "comment": "Current resolution context for tokens"
      },
      "fqn": "@aws-cdk/cdk.ResolveContext",
      "kind": "interface",
      "name": "ResolveContext",
      "properties": [
        {
          "abstract": true,
          "immutable": true,
          "name": "prefix",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "immutable": true,
          "name": "scope",
          "type": {
            "fqn": "@aws-cdk/cdk.IConstruct"
          }
        }
      ]
    },
    "@aws-cdk/cdk.ResourceSignal": {
      "assembly": "@aws-cdk/cdk",
      "datatype": true,
      "docs": {
        "comment": "When AWS CloudFormation creates the associated resource, configures the number of required success signals and\nthe length of time that AWS CloudFormation waits for those signals."
      },
      "fqn": "@aws-cdk/cdk.ResourceSignal",
      "kind": "interface",
      "name": "ResourceSignal",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "comment": "The number of success signals AWS CloudFormation must receive before it sets the resource status as CREATE_COMPLETE.\nIf the resource receives a failure signal or doesn't receive the specified number of signals before the timeout period\nexpires, the resource creation fails and AWS CloudFormation rolls the stack back."
          },
          "immutable": true,
          "name": "count",
          "type": {
            "optional": true,
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "The length of time that AWS CloudFormation waits for the number of signals that was specified in the Count property.\nThe timeout period starts after AWS CloudFormation starts creating the resource, and the timeout expires no sooner\nthan the time you specify but can occur shortly thereafter. The maximum time that you can specify is 12 hours."
          },
          "immutable": true,
          "name": "timeout",
          "type": {
            "optional": true,
            "primitive": "string"
          }
        }
      ]
    },
    "@aws-cdk/cdk.Root": {
      "assembly": "@aws-cdk/cdk",
      "base": {
        "fqn": "@aws-cdk/cdk.Construct"
      },
      "docs": {
        "comment": "Represents the root of a construct tree.\nNo scope and no name."
      },
      "fqn": "@aws-cdk/cdk.Root",
      "initializer": {
        "initializer": true
      },
      "kind": "class",
      "name": "Root"
    },
    "@aws-cdk/cdk.RuleAssertion": {
      "assembly": "@aws-cdk/cdk",
      "datatype": true,
      "docs": {
        "comment": "A rule assertion."
      },
      "fqn": "@aws-cdk/cdk.RuleAssertion",
      "kind": "interface",
      "name": "RuleAssertion",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "comment": "The assertion."
          },
          "immutable": true,
          "name": "assert",
          "type": {
            "fqn": "@aws-cdk/cdk.ICfnConditionExpression"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "The assertion description."
          },
          "immutable": true,
          "name": "assertDescription",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "@aws-cdk/cdk.SSMParameterProvider": {
      "assembly": "@aws-cdk/cdk",
      "docs": {
        "comment": "Context provider that will read values from the SSM parameter store in the indicated account and region"
      },
      "fqn": "@aws-cdk/cdk.SSMParameterProvider",
      "initializer": {
        "initializer": true,
        "parameters": [
          {
            "name": "context",
            "type": {
              "fqn": "@aws-cdk/cdk.Construct"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/cdk.SSMParameterProviderProps"
            }
          }
        ]
      },
      "kind": "class",
      "methods": [
        {
          "docs": {
            "comment": "Return the SSM parameter string with the indicated key"
          },
          "name": "parameterValue",
          "parameters": [
            {
              "name": "defaultValue",
              "type": {
                "optional": true,
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "primitive": "any"
          }
        }
      ],
      "name": "SSMParameterProvider"
    },
    "@aws-cdk/cdk.SSMParameterProviderProps": {
      "assembly": "@aws-cdk/cdk",
      "datatype": true,
      "fqn": "@aws-cdk/cdk.SSMParameterProviderProps",
      "kind": "interface",
      "name": "SSMParameterProviderProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "comment": "The name of the parameter to lookup"
          },
          "immutable": true,
          "name": "parameterName",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "@aws-cdk/cdk.ScopedAws": {
      "assembly": "@aws-cdk/cdk",
      "docs": {
        "comment": "Accessor for scoped pseudo parameters\n\nThese pseudo parameters are anchored to a stack somewhere in the construct\ntree, and their values will be exported automatically."
      },
      "fqn": "@aws-cdk/cdk.ScopedAws",
      "initializer": {
        "initializer": true,
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "@aws-cdk/cdk.Construct"
            }
          }
        ]
      },
      "kind": "class",
      "name": "ScopedAws",
      "properties": [
        {
          "immutable": true,
          "name": "accountId",
          "type": {
            "primitive": "string"
          }
        },
        {
          "immutable": true,
          "name": "notificationArns",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "immutable": true,
          "name": "partition",
          "type": {
            "primitive": "string"
          }
        },
        {
          "immutable": true,
          "name": "region",
          "type": {
            "primitive": "string"
          }
        },
        {
          "immutable": true,
          "name": "scope",
          "type": {
            "fqn": "@aws-cdk/cdk.Construct"
          }
        },
        {
          "immutable": true,
          "name": "stackId",
          "type": {
            "primitive": "string"
          }
        },
        {
          "immutable": true,
          "name": "stackName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "immutable": true,
          "name": "urlSuffix",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "@aws-cdk/cdk.SecretValue": {
      "assembly": "@aws-cdk/cdk",
      "base": {
        "fqn": "@aws-cdk/cdk.Token"
      },
      "docs": {
        "comment": "Work with secret values in the CDK\n\nSecret values in the CDK (such as those retrieved from SecretsManager) are\nrepresented as regular strings, just like other values that are only\navailable at deployment time.\n\nTo help you avoid accidental mistakes which would lead to you putting your\nsecret values directly into a CloudFormation template, constructs that take\nsecret values will not allow you to pass in a literal secret value. They do\nso by calling `Secret.assertSafeSecret()`.\n\nYou can escape the check by calling `Secret.plainTex()`, but doing\nso is highly discouraged."
      },
      "fqn": "@aws-cdk/cdk.SecretValue",
      "initializer": {
        "docs": {
          "comment": "Creates a token that resolves to `value`.\n\nIf value is a function, the function is evaluated upon resolution and\nthe value it returns will be used as the token's value.\n\ndisplayName is used to represent the Token when it's embedded into a string; it\nwill look something like this:\n\n    \"embedded in a larger string is ${Token[DISPLAY_NAME.123]}\"\n\nThis value is used as a hint to humans what the meaning of the Token is,\nand does not have any effect on the evaluation.\n\nMust contain only alphanumeric and simple separator characters (_.:-)."
        },
        "initializer": true,
        "parameters": [
          {
            "docs": {
              "comment": "What this token will evaluate to, literal or function."
            },
            "name": "valueOrFunction",
            "type": {
              "optional": true,
              "primitive": "any"
            }
          },
          {
            "docs": {
              "comment": "A human-readable display hint for this Token"
            },
            "name": "displayName",
            "type": {
              "optional": true,
              "primitive": "string"
            }
          }
        ]
      },
      "kind": "class",
      "methods": [
        {
          "docs": {
            "comment": "Obtain the secret value through a CloudFormation dynamic reference.\n\nIf possible, use `SecretValue.ssmSecure` or `SecretValue.secretsManager` directly."
          },
          "name": "cfnDynamicReference",
          "parameters": [
            {
              "docs": {
                "comment": "The dynamic reference to use."
              },
              "name": "ref",
              "type": {
                "fqn": "@aws-cdk/cdk.CfnDynamicReference"
              }
            }
          ],
          "returns": {
            "fqn": "@aws-cdk/cdk.SecretValue"
          },
          "static": true
        },
        {
          "docs": {
            "comment": "Obtain the secret value through a CloudFormation parameter.\n\nGenerally, this is not a recommended approach. AWS Secrets Manager is the\nrecommended way to reference secrets."
          },
          "name": "cfnParameter",
          "parameters": [
            {
              "docs": {
                "comment": "The CloudFormation parameter to use."
              },
              "name": "param",
              "type": {
                "fqn": "@aws-cdk/cdk.CfnParameter"
              }
            }
          ],
          "returns": {
            "fqn": "@aws-cdk/cdk.SecretValue"
          },
          "static": true
        },
        {
          "docs": {
            "comment": "Construct a literal secret value for use with secret-aware constructs\n\n*Do not use this method for any secrets that you care about.*\n\nThe only reasonable use case for using this method is when you are testing."
          },
          "name": "plainText",
          "parameters": [
            {
              "name": "secret",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "fqn": "@aws-cdk/cdk.SecretValue"
          },
          "static": true
        },
        {
          "docs": {
            "comment": "Creates a `SecretValue` with a value which is dynamically loaded from AWS Secrets Manager."
          },
          "name": "secretsManager",
          "parameters": [
            {
              "docs": {
                "comment": "The ID or ARN of the secret"
              },
              "name": "secretId",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "comment": "Options"
              },
              "name": "options",
              "type": {
                "fqn": "@aws-cdk/cdk.SecretsManagerSecretOptions",
                "optional": true
              }
            }
          ],
          "returns": {
            "fqn": "@aws-cdk/cdk.SecretValue"
          },
          "static": true
        },
        {
          "docs": {
            "comment": "Use a secret value stored from a Systems Manager (SSM) parameter."
          },
          "name": "ssmSecure",
          "parameters": [
            {
              "docs": {
                "comment": "The name of the parameter in the Systems Manager\nParameter Store. The parameter name is case-sensitive."
              },
              "name": "parameterName",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "comment": "An integer that specifies the version of the parameter to\nuse. You must specify the exact version. You cannot currently specify that\nAWS CloudFormation use the latest version of a parameter."
              },
              "name": "version",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "fqn": "@aws-cdk/cdk.SecretValue"
          },
          "static": true
        }
      ],
      "name": "SecretValue"
    },
    "@aws-cdk/cdk.SecretsManagerSecretOptions": {
      "assembly": "@aws-cdk/cdk",
      "datatype": true,
      "docs": {
        "comment": "Options for referencing a secret value from Secrets Manager."
      },
      "fqn": "@aws-cdk/cdk.SecretsManagerSecretOptions",
      "kind": "interface",
      "name": "SecretsManagerSecretOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "comment": "The key of a JSON field to retrieve. This can only be used if the secret\nstores a JSON object.",
            "default": "- returns all the content stored in the Secrets Manager secret."
          },
          "immutable": true,
          "name": "jsonField",
          "type": {
            "optional": true,
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "Specifies the unique identifier of the version of the secret you want to use.\n\nCan specify at most one of `versionId` and `versionStage`.",
            "default": "AWSCURRENT"
          },
          "immutable": true,
          "name": "versionId",
          "type": {
            "optional": true,
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "Specified the secret version that you want to retrieve by the staging label attached to the version.\n\nCan specify at most one of `versionId` and `versionStage`.",
            "default": "AWSCURRENT"
          },
          "immutable": true,
          "name": "versionStage",
          "type": {
            "optional": true,
            "primitive": "string"
          }
        }
      ]
    },
    "@aws-cdk/cdk.Stack": {
      "assembly": "@aws-cdk/cdk",
      "base": {
        "fqn": "@aws-cdk/cdk.Construct"
      },
      "docs": {
        "comment": "A root construct which represents a single CloudFormation stack."
      },
      "fqn": "@aws-cdk/cdk.Stack",
      "initializer": {
        "docs": {
          "comment": "Creates a new stack."
        },
        "initializer": true,
        "parameters": [
          {
            "docs": {
              "comment": "Parent of this stack, usually a Program instance."
            },
            "name": "scope",
            "type": {
              "fqn": "@aws-cdk/cdk.Construct",
              "optional": true
            }
          },
          {
            "docs": {
              "comment": "The name of the CloudFormation stack. Defaults to \"Stack\"."
            },
            "name": "name",
            "type": {
              "optional": true,
              "primitive": "string"
            }
          },
          {
            "docs": {
              "comment": "Stack properties."
            },
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/cdk.StackProps",
              "optional": true
            }
          }
        ]
      },
      "kind": "class",
      "methods": [
        {
          "docs": {
            "comment": "Adds a metadata annotation \"aws:cdk:physical-name\" to the construct if physicalName\nis non-null. This can be used later by tools and aspects to determine if resources\nhave been created with physical names."
          },
          "name": "annotatePhysicalName",
          "parameters": [
            {
              "name": "construct",
              "type": {
                "fqn": "@aws-cdk/cdk.Construct"
              }
            },
            {
              "name": "physicalName",
              "type": {
                "optional": true,
                "primitive": "string"
              }
            }
          ],
          "static": true
        },
        {
          "docs": {
            "comment": "Return whether the given object is a Stack.\n\nWe do attribute detection since we can't reliably use 'instanceof'."
          },
          "name": "isStack",
          "parameters": [
            {
              "name": "x",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "primitive": "boolean"
          },
          "static": true
        },
        {
          "docs": {
            "comment": "Add a dependency between this stack and another stack"
          },
          "name": "addDependency",
          "parameters": [
            {
              "name": "stack",
              "type": {
                "fqn": "@aws-cdk/cdk.Stack"
              }
            },
            {
              "name": "reason",
              "type": {
                "optional": true,
                "primitive": "string"
              }
            }
          ]
        },
        {
          "docs": {
            "comment": "Return the stacks this stack depends on"
          },
          "name": "dependencies",
          "returns": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/cdk.Stack"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "comment": "Looks up a resource by path.",
            "return": "The Resource or undefined if not found"
          },
          "name": "findResource",
          "parameters": [
            {
              "name": "path",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "fqn": "@aws-cdk/cdk.CfnResource",
            "optional": true
          }
        },
        {
          "docs": {
            "comment": "Creates an ARN from components.\n\nIf `partition`, `region` or `account` are not specified, the stack's\npartition, region and account will be used.\n\nIf any component is the empty string, an empty string will be inserted\ninto the generated ARN at the location that component corresponds to.\n\nThe ARN will be formatted as follows:\n\n   arn:{partition}:{service}:{region}:{account}:{resource}{sep}}{resource-name}\n\nThe required ARN pieces that are omitted will be taken from the stack that\nthe 'scope' is attached to. If all ARN pieces are supplied, the supplied scope\ncan be 'undefined'."
          },
          "name": "formatArn",
          "parameters": [
            {
              "name": "components",
              "type": {
                "fqn": "@aws-cdk/cdk.ArnComponents"
              }
            }
          ],
          "returns": {
            "primitive": "string"
          }
        },
        {
          "name": "parentApp",
          "returns": {
            "fqn": "@aws-cdk/cdk.App",
            "optional": true
          }
        },
        {
          "docs": {
            "comment": "Given an ARN, parses it and returns components.\n\nIf the ARN is a concrete string, it will be parsed and validated. The\nseparator (`sep`) will be set to '/' if the 6th component includes a '/',\nin which case, `resource` will be set to the value before the '/' and\n`resourceName` will be the rest. In case there is no '/', `resource` will\nbe set to the 6th components and `resourceName` will be set to the rest\nof the string.\n\nIf the ARN includes tokens (or is a token), the ARN cannot be validated,\nsince we don't have the actual value yet at the time of this function\ncall. You will have to know the separator and the type of ARN. The\nresulting `ArnComponents` object will contain tokens for the\nsubexpressions of the ARN, not string literals. In this case this\nfunction cannot properly parse the complete final resourceName (path) out\nof ARNs that use '/' to both separate the 'resource' from the\n'resourceName' AND to subdivide the resourceName further. For example, in\nS3 ARNs:\n\n    arn:aws:s3:::my_corporate_bucket/path/to/exampleobject.png\n\nAfter parsing the resourceName will not contain\n'path/to/exampleobject.png' but simply 'path'. This is a limitation\nbecause there is no slicing functionality in CloudFormation templates.",
            "return": "an ArnComponents object which allows access to the various\ncomponents of the ARN."
          },
          "name": "parseArn",
          "parameters": [
            {
              "name": "arn",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "sepIfToken",
              "type": {
                "optional": true,
                "primitive": "string"
              }
            },
            {
              "docs": {
                "comment": "Whether there is a name component in the ARN at all. For\nexample, SNS Topics ARNs have the 'resource' component contain the topic\nname, and no 'resourceName' component."
              },
              "name": "hasName",
              "type": {
                "optional": true,
                "primitive": "boolean"
              }
            }
          ],
          "returns": {
            "fqn": "@aws-cdk/cdk.ArnComponents"
          }
        },
        {
          "docs": {
            "comment": "Prepare stack\n\nFind all CloudFormation references and tell them we're consuming them.\n\nFind all dependencies as well and add the appropriate DependsOn fields."
          },
          "name": "prepare",
          "overrides": {
            "fqn": "@aws-cdk/cdk.Construct"
          },
          "protected": true
        },
        {
          "docs": {
            "comment": "Rename a generated logical identities"
          },
          "name": "renameLogical",
          "parameters": [
            {
              "name": "oldId",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "newId",
              "type": {
                "primitive": "string"
              }
            }
          ]
        },
        {
          "docs": {
            "comment": "Indicate that a context key was expected\n\nContains instructions on how the key should be supplied."
          },
          "name": "reportMissingContext",
          "parameters": [
            {
              "docs": {
                "comment": "Key that uniquely identifies this missing context."
              },
              "name": "key",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "comment": "The set of parameters needed to obtain the context (specific to context provider)."
              },
              "name": "details",
              "type": {
                "fqn": "@aws-cdk/cx-api.MissingContext"
              }
            }
          ]
        },
        {
          "docs": {
            "comment": "Returns the AWS account ID of this Stack,\nor throws an exception if the account ID is not set in the environment.",
            "return": "the AWS account ID of this Stack"
          },
          "name": "requireAccountId",
          "parameters": [
            {
              "docs": {
                "comment": "more information about why is the account ID required"
              },
              "name": "why",
              "type": {
                "optional": true,
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "return": "The region in which this stack is deployed. Throws if region is not defined."
          },
          "name": "requireRegion",
          "parameters": [
            {
              "docs": {
                "comment": "more information about why region is required."
              },
              "name": "why",
              "type": {
                "optional": true,
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "comment": "Sets the value of a CloudFormation parameter."
          },
          "name": "setParameterValue",
          "parameters": [
            {
              "docs": {
                "comment": "The parameter to set the value for"
              },
              "name": "parameter",
              "type": {
                "fqn": "@aws-cdk/cdk.CfnParameter"
              }
            },
            {
              "docs": {
                "comment": "The value, can use `${}` notation to reference other assembly block attributes."
              },
              "name": "value",
              "type": {
                "primitive": "string"
              }
            }
          ]
        },
        {
          "name": "synthesize",
          "parameters": [
            {
              "name": "session",
              "type": {
                "fqn": "@aws-cdk/cdk.ISynthesisSession"
              }
            }
          ],
          "protected": true
        }
      ],
      "name": "Stack",
      "properties": [
        {
          "docs": {
            "comment": "The account in which this stack is defined\n\nEither returns the literal account for this stack if it was specified\nliterally upon Stack construction, or a symbolic value that will evaluate\nto the correct account at deployment time."
          },
          "immutable": true,
          "name": "accountId",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "comment": "Should the Stack be deployed when running `cdk deploy` without arguments\n(and listed when running `cdk synth` without arguments).\nSetting this to `false` is useful when you have a Stack in your CDK app\nthat you don't want to deploy using the CDK toolkit -\nfor example, because you're planning on deploying it through CodePipeline.\n\nBy default, this is `true`."
          },
          "immutable": true,
          "name": "autoDeploy",
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "docs": {
            "comment": "The environment in which this stack is deployed."
          },
          "immutable": true,
          "name": "env",
          "type": {
            "fqn": "@aws-cdk/cdk.Environment"
          }
        },
        {
          "docs": {
            "comment": "Returns the environment specification for this stack (aws://account/region)."
          },
          "immutable": true,
          "name": "environment",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "comment": "Logical ID generation strategy"
          },
          "immutable": true,
          "name": "logicalIds",
          "type": {
            "fqn": "@aws-cdk/cdk.LogicalIDs"
          }
        },
        {
          "docs": {
            "comment": "Lists all missing contextual information.\nThis is returned when the stack is synthesized under the 'missing' attribute\nand allows tooling to obtain the context and re-synthesize."
          },
          "immutable": true,
          "name": "missingContext",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/cx-api.MissingContext"
              },
              "kind": "map"
            }
          }
        },
        {
          "docs": {
            "comment": "The CloudFormation stack name.\n\nThis is the stack name either configuration via the `stackName` property\nor automatically derived from the construct path."
          },
          "immutable": true,
          "name": "name",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "comment": "Returns the list of notification Amazon Resource Names (ARNs) for the current stack."
          },
          "immutable": true,
          "name": "notificationArns",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "comment": "The partition in which this stack is defined"
          },
          "immutable": true,
          "name": "partition",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "comment": "The region in which this stack is defined\n\nEither returns the literal region for this stack if it was specified\nliterally upon Stack construction, or a symbolic value that will evaluate\nto the correct region at deployment time."
          },
          "immutable": true,
          "name": "region",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "comment": "The ID of the stack",
            "example": "After resolving, looks like arn:aws:cloudformation:us-west-2:123456789012:stack/teststack/51af3dc0-da77-11e4-872e-1234567db123"
          },
          "immutable": true,
          "name": "stackId",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "comment": "The name of the stack currently being deployed\n\nOnly available at deployment time; this will always return an unresolved value."
          },
          "immutable": true,
          "name": "stackName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "comment": "Options for CloudFormation template (like version, transform, description)."
          },
          "immutable": true,
          "name": "templateOptions",
          "type": {
            "fqn": "@aws-cdk/cdk.ITemplateOptions"
          }
        },
        {
          "docs": {
            "comment": "The Amazon domain suffix for the region in which this stack is defined"
          },
          "immutable": true,
          "name": "urlSuffix",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "@aws-cdk/cdk.StackProps": {
      "assembly": "@aws-cdk/cdk",
      "datatype": true,
      "fqn": "@aws-cdk/cdk.StackProps",
      "kind": "interface",
      "name": "StackProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "comment": "Should the Stack be deployed when running `cdk deploy` without arguments\n(and listed when running `cdk synth` without arguments).\nSetting this to `false` is useful when you have a Stack in your CDK app\nthat you don't want to deploy using the CDK toolkit -\nfor example, because you're planning on deploying it through CodePipeline.",
            "default": "true"
          },
          "immutable": true,
          "name": "autoDeploy",
          "type": {
            "optional": true,
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "The AWS environment (account/region) where this stack will be deployed.\n\nIf not supplied, the `default-account` and `default-region` context parameters will be\nused. If they are undefined, it will not be possible to deploy the stack."
          },
          "immutable": true,
          "name": "env",
          "type": {
            "fqn": "@aws-cdk/cdk.Environment",
            "optional": true
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "Strategy for logical ID generation\n\nOptional. If not supplied, the HashedNamingScheme will be used."
          },
          "immutable": true,
          "name": "namingScheme",
          "type": {
            "fqn": "@aws-cdk/cdk.IAddressingScheme",
            "optional": true
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "Name to deploy the stack with",
            "default": "Derived from construct path"
          },
          "immutable": true,
          "name": "stackName",
          "type": {
            "optional": true,
            "primitive": "string"
          }
        }
      ]
    },
    "@aws-cdk/cdk.StringListCfnOutput": {
      "assembly": "@aws-cdk/cdk",
      "base": {
        "fqn": "@aws-cdk/cdk.Construct"
      },
      "docs": {
        "comment": "An output for a list of strings.\n\nExports a list of Tokens via an CfnOutput variable, and return a list of Tokens\nthat selects the imported values for them."
      },
      "fqn": "@aws-cdk/cdk.StringListCfnOutput",
      "initializer": {
        "initializer": true,
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "@aws-cdk/cdk.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/cdk.StringListCfnOutputProps"
            }
          }
        ]
      },
      "kind": "class",
      "methods": [
        {
          "docs": {
            "comment": "Return an array of imported values for this CfnOutput"
          },
          "name": "makeImportValues",
          "returns": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        }
      ],
      "name": "StringListCfnOutput",
      "properties": [
        {
          "docs": {
            "comment": "Number of elements in the stringlist"
          },
          "immutable": true,
          "name": "length",
          "type": {
            "primitive": "number"
          }
        }
      ]
    },
    "@aws-cdk/cdk.StringListCfnOutputProps": {
      "assembly": "@aws-cdk/cdk",
      "datatype": true,
      "docs": {
        "comment": "Properties for ListOutput"
      },
      "fqn": "@aws-cdk/cdk.StringListCfnOutputProps",
      "kind": "interface",
      "name": "StringListCfnOutputProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "comment": "The list of primitives to export"
          },
          "immutable": true,
          "name": "values",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "A condition from the \"Conditions\" section to associate with this output\nvalue. If the condition evaluates to `false`, this output value will not\nbe included in the stack."
          },
          "immutable": true,
          "name": "condition",
          "type": {
            "fqn": "@aws-cdk/cdk.CfnCondition",
            "optional": true
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "A String type that describes the output value.\nThe description can be a maximum of 4 K in length."
          },
          "immutable": true,
          "name": "description",
          "type": {
            "optional": true,
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "Disables the automatic allocation of an export name for this output.",
            "default": "false, which means that an export name is either explicitly\nspecified or allocated based on the output's logical ID and stack name."
          },
          "immutable": true,
          "name": "disableExport",
          "type": {
            "optional": true,
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "The name used to export the value of this output across stacks. To import\nthe value from another stack, use `FnImportValue(export)`. You can create\nan import value token by calling `output.makeImportValue()`.",
            "default": "The default behavior is to automatically allocate an export name\nfor outputs based on the stack name and the output's logical ID. To\ncreate an output without an export, set `disableExport: true`."
          },
          "immutable": true,
          "name": "export",
          "type": {
            "optional": true,
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "The separator to use to separate stringified values",
            "default": "\",\""
          },
          "immutable": true,
          "name": "separator",
          "type": {
            "optional": true,
            "primitive": "string"
          }
        }
      ]
    },
    "@aws-cdk/cdk.SynthesisOptions": {
      "assembly": "@aws-cdk/cdk",
      "datatype": true,
      "fqn": "@aws-cdk/cdk.SynthesisOptions",
      "interfaces": [
        {
          "fqn": "@aws-cdk/cdk.ManifestOptions"
        }
      ],
      "kind": "interface",
      "name": "SynthesisOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "comment": "Whether synthesis should skip the validation phase.",
            "default": "false"
          },
          "immutable": true,
          "name": "skipValidation",
          "type": {
            "optional": true,
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "The file store used for this session.",
            "default": "InMemoryStore"
          },
          "immutable": true,
          "name": "store",
          "type": {
            "fqn": "@aws-cdk/cdk.ISessionStore",
            "optional": true
          }
        }
      ]
    },
    "@aws-cdk/cdk.SynthesisSession": {
      "assembly": "@aws-cdk/cdk",
      "fqn": "@aws-cdk/cdk.SynthesisSession",
      "initializer": {
        "initializer": true,
        "parameters": [
          {
            "name": "options",
            "type": {
              "fqn": "@aws-cdk/cdk.SynthesisOptions"
            }
          }
        ]
      },
      "interfaces": [
        {
          "fqn": "@aws-cdk/cdk.ISynthesisSession"
        }
      ],
      "kind": "class",
      "methods": [
        {
          "docs": {
            "return": "true if `obj` implements `ISynthesizable`."
          },
          "name": "isSynthesizable",
          "parameters": [
            {
              "name": "obj",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "primitive": "boolean"
          },
          "static": true
        },
        {
          "name": "addArtifact",
          "overrides": {
            "fqn": "@aws-cdk/cdk.ISynthesisSession"
          },
          "parameters": [
            {
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "artifact",
              "type": {
                "fqn": "@aws-cdk/cx-api.Artifact"
              }
            }
          ]
        },
        {
          "name": "addBuildStep",
          "overrides": {
            "fqn": "@aws-cdk/cdk.ISynthesisSession"
          },
          "parameters": [
            {
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "step",
              "type": {
                "fqn": "@aws-cdk/cx-api.BuildStep"
              }
            }
          ]
        },
        {
          "name": "close",
          "parameters": [
            {
              "name": "options",
              "type": {
                "fqn": "@aws-cdk/cdk.ManifestOptions",
                "optional": true
              }
            }
          ],
          "returns": {
            "fqn": "@aws-cdk/cx-api.AssemblyManifest"
          }
        },
        {
          "name": "getArtifact",
          "overrides": {
            "fqn": "@aws-cdk/cdk.ISynthesisSession"
          },
          "parameters": [
            {
              "name": "id",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "fqn": "@aws-cdk/cx-api.Artifact"
          }
        },
        {
          "name": "tryGetArtifact",
          "overrides": {
            "fqn": "@aws-cdk/cdk.ISynthesisSession"
          },
          "parameters": [
            {
              "name": "id",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "fqn": "@aws-cdk/cx-api.Artifact",
            "optional": true
          }
        }
      ],
      "name": "SynthesisSession",
      "properties": [
        {
          "immutable": true,
          "name": "manifest",
          "overrides": {
            "fqn": "@aws-cdk/cdk.ISynthesisSession"
          },
          "type": {
            "fqn": "@aws-cdk/cx-api.AssemblyManifest"
          }
        },
        {
          "immutable": true,
          "name": "store",
          "overrides": {
            "fqn": "@aws-cdk/cdk.ISynthesisSession"
          },
          "type": {
            "fqn": "@aws-cdk/cdk.ISessionStore"
          }
        }
      ]
    },
    "@aws-cdk/cdk.Synthesizer": {
      "assembly": "@aws-cdk/cdk",
      "fqn": "@aws-cdk/cdk.Synthesizer",
      "initializer": {
        "initializer": true
      },
      "kind": "class",
      "methods": [
        {
          "name": "synthesize",
          "parameters": [
            {
              "name": "root",
              "type": {
                "fqn": "@aws-cdk/cdk.IConstruct"
              }
            },
            {
              "name": "options",
              "type": {
                "fqn": "@aws-cdk/cdk.SynthesisOptions",
                "optional": true
              }
            }
          ],
          "returns": {
            "fqn": "@aws-cdk/cdk.ISynthesisSession"
          }
        }
      ],
      "name": "Synthesizer"
    },
    "@aws-cdk/cdk.Tag": {
      "assembly": "@aws-cdk/cdk",
      "base": {
        "fqn": "@aws-cdk/cdk.TagBase"
      },
      "docs": {
        "comment": "The Tag Aspect will handle adding a tag to this node and cascading tags to children"
      },
      "fqn": "@aws-cdk/cdk.Tag",
      "initializer": {
        "initializer": true,
        "parameters": [
          {
            "name": "key",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "value",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/cdk.TagProps",
              "optional": true
            }
          }
        ]
      },
      "kind": "class",
      "methods": [
        {
          "name": "applyTag",
          "overrides": {
            "fqn": "@aws-cdk/cdk.TagBase"
          },
          "parameters": [
            {
              "name": "resource",
              "type": {
                "fqn": "@aws-cdk/cdk.ITaggable"
              }
            }
          ],
          "protected": true
        }
      ],
      "name": "Tag",
      "properties": [
        {
          "docs": {
            "comment": "The string value of the tag"
          },
          "immutable": true,
          "name": "value",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "@aws-cdk/cdk.TagBase": {
      "abstract": true,
      "assembly": "@aws-cdk/cdk",
      "docs": {
        "comment": "The common functionality for Tag and Remove Tag Aspects"
      },
      "fqn": "@aws-cdk/cdk.TagBase",
      "initializer": {
        "initializer": true,
        "parameters": [
          {
            "name": "key",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/cdk.TagProps",
              "optional": true
            }
          }
        ]
      },
      "interfaces": [
        {
          "fqn": "@aws-cdk/cdk.IAspect"
        }
      ],
      "kind": "class",
      "methods": [
        {
          "abstract": true,
          "name": "applyTag",
          "parameters": [
            {
              "name": "resource",
              "type": {
                "fqn": "@aws-cdk/cdk.ITaggable"
              }
            }
          ],
          "protected": true
        },
        {
          "docs": {
            "comment": "All aspects can visit an IConstruct"
          },
          "name": "visit",
          "overrides": {
            "fqn": "@aws-cdk/cdk.IAspect"
          },
          "parameters": [
            {
              "name": "construct",
              "type": {
                "fqn": "@aws-cdk/cdk.IConstruct"
              }
            }
          ]
        }
      ],
      "name": "TagBase",
      "properties": [
        {
          "docs": {
            "comment": "The string key for the tag"
          },
          "immutable": true,
          "name": "key",
          "type": {
            "primitive": "string"
          }
        },
        {
          "immutable": true,
          "name": "props",
          "protected": true,
          "type": {
            "fqn": "@aws-cdk/cdk.TagProps"
          }
        }
      ]
    },
    "@aws-cdk/cdk.TagManager": {
      "assembly": "@aws-cdk/cdk",
      "docs": {
        "comment": "TagManager facilitates a common implementation of tagging for Constructs."
      },
      "fqn": "@aws-cdk/cdk.TagManager",
      "initializer": {
        "initializer": true,
        "parameters": [
          {
            "name": "tagType",
            "type": {
              "fqn": "@aws-cdk/cdk.TagType"
            }
          },
          {
            "name": "resourceTypeName",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "tagStructure",
            "type": {
              "optional": true,
              "primitive": "any"
            }
          }
        ]
      },
      "kind": "class",
      "methods": [
        {
          "name": "applyTagAspectHere",
          "parameters": [
            {
              "name": "include",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "string"
                  },
                  "kind": "array"
                },
                "optional": true
              }
            },
            {
              "name": "exclude",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "string"
                  },
                  "kind": "array"
                },
                "optional": true
              }
            }
          ],
          "returns": {
            "primitive": "boolean"
          }
        },
        {
          "docs": {
            "comment": "Removes the specified tag from the array if it exists"
          },
          "name": "removeTag",
          "parameters": [
            {
              "docs": {
                "comment": "The tag to remove"
              },
              "name": "key",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "comment": "The priority of the remove operation"
              },
              "name": "priority",
              "type": {
                "primitive": "number"
              }
            }
          ]
        },
        {
          "docs": {
            "comment": "Renders tags into the proper format based on TagType"
          },
          "name": "renderTags",
          "returns": {
            "primitive": "any"
          }
        },
        {
          "docs": {
            "comment": "Adds the specified tag to the array of tags"
          },
          "name": "setTag",
          "parameters": [
            {
              "name": "key",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "value",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "priority",
              "type": {
                "optional": true,
                "primitive": "number"
              }
            },
            {
              "name": "applyToLaunchedInstances",
              "type": {
                "optional": true,
                "primitive": "boolean"
              }
            }
          ]
        }
      ],
      "name": "TagManager"
    },
    "@aws-cdk/cdk.TagProps": {
      "assembly": "@aws-cdk/cdk",
      "datatype": true,
      "docs": {
        "comment": "Properties for a tag"
      },
      "fqn": "@aws-cdk/cdk.TagProps",
      "kind": "interface",
      "name": "TagProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "comment": "Whether the tag should be applied to instances in an AutoScalingGroup",
            "default": "true"
          },
          "immutable": true,
          "name": "applyToLaunchedInstances",
          "type": {
            "optional": true,
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "An array of Resource Types that will not receive this tag\n\nAn empty array will allow this tag to be applied to all resources. A\nnon-empty array will apply this tag only if the Resource type is not in\nthis array.",
            "default": "[]"
          },
          "immutable": true,
          "name": "excludeResourceTypes",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            },
            "optional": true
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "An array of Resource Types that will receive this tag\n\nAn empty array will match any Resource. A non-empty array will apply this\ntag only to Resource types that are included in this array.",
            "default": "[]"
          },
          "immutable": true,
          "name": "includeResourceTypes",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            },
            "optional": true
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "Priority of the tag operation\n\nHigher or equal priority tags will take precedence.\n\nSetting priority will enable the user to control tags when they need to not\nfollow the default precedence pattern of last applied and closest to the\nconstruct in the tree.",
            "default": "Default priorities:\n\n- 100 for {@link SetTag}\n- 200 for {@link RemoveTag}\n- 50 for tags added directly to CloudFormation resources"
          },
          "immutable": true,
          "name": "priority",
          "type": {
            "optional": true,
            "primitive": "number"
          }
        }
      ]
    },
    "@aws-cdk/cdk.TagType": {
      "assembly": "@aws-cdk/cdk",
      "fqn": "@aws-cdk/cdk.TagType",
      "kind": "enum",
      "members": [
        {
          "name": "Standard"
        },
        {
          "name": "AutoScalingGroup"
        },
        {
          "name": "Map"
        },
        {
          "name": "NotTaggable"
        }
      ],
      "name": "TagType"
    },
    "@aws-cdk/cdk.Token": {
      "assembly": "@aws-cdk/cdk",
      "docs": {
        "comment": "Represents a special or lazily-evaluated value.\n\nCan be used to delay evaluation of a certain value in case, for example,\nthat it requires some context or late-bound data. Can also be used to\nmark values that need special processing at document rendering time.\n\nTokens can be embedded into strings while retaining their original\nsemantics."
      },
      "fqn": "@aws-cdk/cdk.Token",
      "initializer": {
        "docs": {
          "comment": "Creates a token that resolves to `value`.\n\nIf value is a function, the function is evaluated upon resolution and\nthe value it returns will be used as the token's value.\n\ndisplayName is used to represent the Token when it's embedded into a string; it\nwill look something like this:\n\n    \"embedded in a larger string is ${Token[DISPLAY_NAME.123]}\"\n\nThis value is used as a hint to humans what the meaning of the Token is,\nand does not have any effect on the evaluation.\n\nMust contain only alphanumeric and simple separator characters (_.:-)."
        },
        "initializer": true,
        "parameters": [
          {
            "docs": {
              "comment": "What this token will evaluate to, literal or function."
            },
            "name": "valueOrFunction",
            "type": {
              "optional": true,
              "primitive": "any"
            }
          },
          {
            "docs": {
              "comment": "A human-readable display hint for this Token"
            },
            "name": "displayName",
            "type": {
              "optional": true,
              "primitive": "string"
            }
          }
        ]
      },
      "kind": "class",
      "methods": [
        {
          "docs": {
            "comment": "Returns true if obj is a token (i.e. has the resolve() method or is a string\nthat includes token markers), or it's a listifictaion of a Token string."
          },
          "name": "unresolved",
          "parameters": [
            {
              "docs": {
                "comment": "The object to test."
              },
              "name": "obj",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "primitive": "boolean"
          },
          "static": true
        },
        {
          "docs": {
            "return": "The resolved value for this token."
          },
          "name": "resolve",
          "parameters": [
            {
              "name": "_context",
              "type": {
                "fqn": "@aws-cdk/cdk.ResolveContext"
              }
            }
          ],
          "returns": {
            "primitive": "any"
          }
        },
        {
          "docs": {
            "comment": "Turn this Token into JSON\n\nThis gets called by JSON.stringify(). We want to prohibit this, because\nit's not possible to do this properly, so we just throw an error here."
          },
          "name": "toJSON",
          "returns": {
            "primitive": "any"
          }
        },
        {
          "docs": {
            "comment": "Return a string list representation of this token\n\nCall this if the Token intrinsically evaluates to a list of strings.\nIf so, you can represent the Token in a similar way in the type\nsystem.\n\nNote that even though the Token is represented as a list of strings, you\nstill cannot do any operations on it such as concatenation, indexing,\nor taking its length. The only useful operations you can do to these lists\nis constructing a `FnJoin` or a `FnSelect` on it."
          },
          "name": "toList",
          "returns": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "docs": {
            "comment": "Return a reversible string representation of this token\n\nIf the Token is initialized with a literal, the stringified value of the\nliteral is returned. Otherwise, a special quoted string representation\nof the Token is returned that can be embedded into other strings.\n\nStrings with quoted Tokens in them can be restored back into\ncomplex values with the Tokens restored by calling `resolve()`\non the string."
          },
          "name": "toString",
          "returns": {
            "primitive": "string"
          }
        }
      ],
      "name": "Token",
      "properties": [
        {
          "docs": {
            "comment": "A human-readable display hint for this Token"
          },
          "immutable": true,
          "name": "displayName",
          "type": {
            "optional": true,
            "primitive": "string"
          }
        },
        {
          "docs": {
            "comment": "What this token will evaluate to, literal or function."
          },
          "immutable": true,
          "name": "valueOrFunction",
          "type": {
            "optional": true,
            "primitive": "any"
          }
        }
      ]
    },
    "@aws-cdk/cdk.UpdatePolicy": {
      "assembly": "@aws-cdk/cdk",
      "datatype": true,
      "docs": {
        "comment": "Use the UpdatePolicy attribute to specify how AWS CloudFormation handles updates to the AWS::AutoScaling::AutoScalingGroup\nresource. AWS CloudFormation invokes one of three update policies depending on the type of change you make or whether a\nscheduled action is associated with the Auto Scaling group."
      },
      "fqn": "@aws-cdk/cdk.UpdatePolicy",
      "kind": "interface",
      "name": "UpdatePolicy",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "comment": "Specifies whether an Auto Scaling group and the instances it contains are replaced during an update. During replacement,\nAWS CloudFormation retains the old group until it finishes creating the new one. If the update fails, AWS CloudFormation\ncan roll back to the old Auto Scaling group and delete the new Auto Scaling group."
          },
          "immutable": true,
          "name": "autoScalingReplacingUpdate",
          "type": {
            "fqn": "@aws-cdk/cdk.AutoScalingReplacingUpdate",
            "optional": true
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "To specify how AWS CloudFormation handles rolling updates for an Auto Scaling group, use the AutoScalingRollingUpdate\npolicy. Rolling updates enable you to specify whether AWS CloudFormation updates instances that are in an Auto Scaling\ngroup in batches or all at once."
          },
          "immutable": true,
          "name": "autoScalingRollingUpdate",
          "type": {
            "fqn": "@aws-cdk/cdk.AutoScalingRollingUpdate",
            "optional": true
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "To specify how AWS CloudFormation handles updates for the MinSize, MaxSize, and DesiredCapacity properties when\nthe AWS::AutoScaling::AutoScalingGroup resource has an associated scheduled action, use the AutoScalingScheduledAction\npolicy."
          },
          "immutable": true,
          "name": "autoScalingScheduledAction",
          "type": {
            "fqn": "@aws-cdk/cdk.AutoScalingScheduledAction",
            "optional": true
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "To perform an AWS CodeDeploy deployment when the version changes on an AWS::Lambda::Alias resource,\nuse the CodeDeployLambdaAliasUpdate update policy."
          },
          "immutable": true,
          "name": "codeDeployLambdaAliasUpdate",
          "type": {
            "fqn": "@aws-cdk/cdk.CodeDeployLambdaAliasUpdate",
            "optional": true
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "To modify a replication group's shards by adding or removing shards, rather than replacing the entire\nAWS::ElastiCache::ReplicationGroup resource, use the UseOnlineResharding update policy."
          },
          "immutable": true,
          "name": "useOnlineResharding",
          "type": {
            "optional": true,
            "primitive": "boolean"
          }
        }
      ]
    },
    "@aws-cdk/cdk.ValidationError": {
      "assembly": "@aws-cdk/cdk",
      "fqn": "@aws-cdk/cdk.ValidationError",
      "initializer": {
        "initializer": true,
        "parameters": [
          {
            "name": "source",
            "type": {
              "fqn": "@aws-cdk/cdk.IConstruct"
            }
          },
          {
            "name": "message",
            "type": {
              "primitive": "string"
            }
          }
        ]
      },
      "kind": "class",
      "name": "ValidationError",
      "properties": [
        {
          "immutable": true,
          "name": "message",
          "type": {
            "primitive": "string"
          }
        },
        {
          "immutable": true,
          "name": "source",
          "type": {
            "fqn": "@aws-cdk/cdk.IConstruct"
          }
        }
      ]
    },
    "@aws-cdk/cdk.ValidationResult": {
      "assembly": "@aws-cdk/cdk",
      "docs": {
        "comment": "Representation of validation results\n\nModels a tree of validation errors so that we have as much information as possible\nabout the failure that occurred."
      },
      "fqn": "@aws-cdk/cdk.ValidationResult",
      "initializer": {
        "initializer": true,
        "parameters": [
          {
            "name": "errorMessage",
            "type": {
              "optional": true,
              "primitive": "string"
            }
          },
          {
            "name": "results",
            "type": {
              "fqn": "@aws-cdk/cdk.ValidationResults",
              "optional": true
            }
          }
        ]
      },
      "kind": "class",
      "methods": [
        {
          "docs": {
            "comment": "Turn a failed validation into an exception"
          },
          "name": "assertSuccess"
        },
        {
          "docs": {
            "comment": "Return a string rendering of the tree of validation failures"
          },
          "name": "errorTree",
          "returns": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "comment": "Wrap this result with an error message, if it concerns an error"
          },
          "name": "prefix",
          "parameters": [
            {
              "name": "message",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "fqn": "@aws-cdk/cdk.ValidationResult"
          }
        }
      ],
      "name": "ValidationResult",
      "properties": [
        {
          "immutable": true,
          "name": "errorMessage",
          "type": {
            "primitive": "string"
          }
        },
        {
          "immutable": true,
          "name": "isSuccess",
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "immutable": true,
          "name": "results",
          "type": {
            "fqn": "@aws-cdk/cdk.ValidationResults"
          }
        }
      ]
    },
    "@aws-cdk/cdk.ValidationResults": {
      "assembly": "@aws-cdk/cdk",
      "docs": {
        "comment": "A collection of validation results"
      },
      "fqn": "@aws-cdk/cdk.ValidationResults",
      "initializer": {
        "initializer": true,
        "parameters": [
          {
            "name": "results",
            "type": {
              "collection": {
                "elementtype": {
                  "fqn": "@aws-cdk/cdk.ValidationResult"
                },
                "kind": "array"
              },
              "optional": true
            }
          }
        ]
      },
      "kind": "class",
      "methods": [
        {
          "name": "collect",
          "parameters": [
            {
              "name": "result",
              "type": {
                "fqn": "@aws-cdk/cdk.ValidationResult"
              }
            }
          ]
        },
        {
          "name": "errorTreeList",
          "returns": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "comment": "Wrap up all validation results into a single tree node\n\nIf there are failures in the collection, add a message, otherwise\nreturn a success."
          },
          "name": "wrap",
          "parameters": [
            {
              "name": "message",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "fqn": "@aws-cdk/cdk.ValidationResult"
          }
        }
      ],
      "name": "ValidationResults",
      "properties": [
        {
          "immutable": true,
          "name": "isSuccess",
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "name": "results",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/cdk.ValidationResult"
              },
              "kind": "array"
            }
          }
        }
      ]
    }
  },
  "version": "0.28.0",
  "fingerprint": "OYRpOdMsW6LlNOC5iarpwN5JSxq0KVR3AYW+FEUkh+A="
}
