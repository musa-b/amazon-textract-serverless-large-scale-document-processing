"use strict";
const lib_1 = require("../lib");
module.exports = {
    'mappings can be added as another type of entity, and mapping.findInMap can be used to get a token'(test) {
        const stack = new lib_1.Stack();
        const mapping = new lib_1.CfnMapping(stack, 'MyMapping', { mapping: {
                TopLevelKey1: {
                    SecondLevelKey1: [1, 2, 3],
                    SecondLevelKey2: { Hello: 'World' }
                },
                TopLevelKey2: {
                    SecondLevelKey1: [99, 99, 99]
                }
            } });
        // findInMap can be used to take a reference
        new lib_1.CfnResource(stack, 'MyResource', {
            type: 'R',
            properties: {
                RefToValueInMap: mapping.findInMap('TopLevelKey1', 'SecondLevelKey1')
            }
        });
        test.throws(() => mapping.findInMap('NotFoundTopLevel', 'NotFound'), 'cant take a reference on a non existing key');
        test.throws(() => mapping.findInMap('TopLevelKey1', 'NotFound'), 'cant take a reference on a non existing key');
        // set value can be used to set/modify a specific value
        mapping.setValue('TopLevelKey2', 'SecondLevelKey2', 'Hi');
        mapping.setValue('TopLevelKey1', 'SecondLevelKey1', [1, 2, 3, 4]);
        test.deepEqual(stack._toCloudFormation(), { Mappings: { MyMapping: { TopLevelKey1: { SecondLevelKey1: [1, 2, 3, 4],
                        SecondLevelKey2: { Hello: 'World' } },
                    TopLevelKey2: { SecondLevelKey1: [99, 99, 99], SecondLevelKey2: 'Hi' } } },
            Resources: { MyResource: { Type: 'R',
                    Properties: { RefToValueInMap: { 'Fn::FindInMap': ['MyMapping', 'TopLevelKey1', 'SecondLevelKey1'] } } } } });
        test.done();
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC5tYXBwaW5ncy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInRlc3QubWFwcGluZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBLGdDQUF3RDtBQUV4RCxpQkFBUztJQUNQLG1HQUFtRyxDQUFDLElBQVU7UUFDNUcsTUFBTSxLQUFLLEdBQUcsSUFBSSxXQUFLLEVBQUUsQ0FBQztRQUMxQixNQUFNLE9BQU8sR0FBRyxJQUFJLGdCQUFVLENBQUMsS0FBSyxFQUFFLFdBQVcsRUFBRSxFQUFFLE9BQU8sRUFBRTtnQkFDNUQsWUFBWSxFQUFFO29CQUNaLGVBQWUsRUFBRSxDQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFFO29CQUM1QixlQUFlLEVBQUUsRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFO2lCQUNwQztnQkFDRCxZQUFZLEVBQUU7b0JBQ1osZUFBZSxFQUFFLENBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUU7aUJBQ2hDO2FBQ0YsRUFBRSxDQUFDLENBQUM7UUFFTCw0Q0FBNEM7UUFDNUMsSUFBSSxpQkFBVyxDQUFDLEtBQUssRUFBRSxZQUFZLEVBQUU7WUFDbkMsSUFBSSxFQUFFLEdBQUc7WUFDVCxVQUFVLEVBQUU7Z0JBQ1YsZUFBZSxFQUFFLE9BQU8sQ0FBQyxTQUFTLENBQUMsY0FBYyxFQUFFLGlCQUFpQixDQUFDO2FBQ3RFO1NBQ0YsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLGtCQUFrQixFQUFFLFVBQVUsQ0FBQyxFQUFFLDZDQUE2QyxDQUFDLENBQUM7UUFDcEgsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLGNBQWMsRUFBRSxVQUFVLENBQUMsRUFBRSw2Q0FBNkMsQ0FBQyxDQUFDO1FBRWhILHVEQUF1RDtRQUN2RCxPQUFPLENBQUMsUUFBUSxDQUFDLGNBQWMsRUFBRSxpQkFBaUIsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUMxRCxPQUFPLENBQUMsUUFBUSxDQUFDLGNBQWMsRUFBRSxpQkFBaUIsRUFBRSxDQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBRSxDQUFDLENBQUM7UUFFcEUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsaUJBQWlCLEVBQUUsRUFBRSxFQUFFLFFBQVEsRUFDbEQsRUFBRSxTQUFTLEVBQ1IsRUFBRSxZQUFZLEVBQ2IsRUFBRSxlQUFlLEVBQUUsQ0FBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUU7d0JBQ2pDLGVBQWUsRUFBRSxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsRUFBRTtvQkFDdEMsWUFBWSxFQUFFLEVBQUUsZUFBZSxFQUFFLENBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUUsRUFBRSxlQUFlLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRTtZQUM5RSxTQUFTLEVBQ1YsRUFBRSxVQUFVLEVBQ1QsRUFBRSxJQUFJLEVBQUUsR0FBRztvQkFDWCxVQUFVLEVBQ1QsRUFBRSxlQUFlLEVBQ2hCLEVBQUUsZUFBZSxFQUFFLENBQUUsV0FBVyxFQUFFLGNBQWMsRUFBRSxpQkFBaUIsQ0FBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBRXhGLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNkLENBQUM7Q0FDRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVGVzdCB9IGZyb20gJ25vZGV1bml0JztcbmltcG9ydCB7IENmbk1hcHBpbmcsIENmblJlc291cmNlLCBTdGFjayB9IGZyb20gJy4uL2xpYic7XG5cbmV4cG9ydCA9IHtcbiAgJ21hcHBpbmdzIGNhbiBiZSBhZGRlZCBhcyBhbm90aGVyIHR5cGUgb2YgZW50aXR5LCBhbmQgbWFwcGluZy5maW5kSW5NYXAgY2FuIGJlIHVzZWQgdG8gZ2V0IGEgdG9rZW4nKHRlc3Q6IFRlc3QpIHtcbiAgICBjb25zdCBzdGFjayA9IG5ldyBTdGFjaygpO1xuICAgIGNvbnN0IG1hcHBpbmcgPSBuZXcgQ2ZuTWFwcGluZyhzdGFjaywgJ015TWFwcGluZycsIHsgbWFwcGluZzoge1xuICAgICAgVG9wTGV2ZWxLZXkxOiB7XG4gICAgICAgIFNlY29uZExldmVsS2V5MTogWyAxLCAyLCAzIF0sXG4gICAgICAgIFNlY29uZExldmVsS2V5MjogeyBIZWxsbzogJ1dvcmxkJyB9XG4gICAgICB9LFxuICAgICAgVG9wTGV2ZWxLZXkyOiB7XG4gICAgICAgIFNlY29uZExldmVsS2V5MTogWyA5OSwgOTksIDk5IF1cbiAgICAgIH1cbiAgICB9IH0pO1xuXG4gICAgLy8gZmluZEluTWFwIGNhbiBiZSB1c2VkIHRvIHRha2UgYSByZWZlcmVuY2VcbiAgICBuZXcgQ2ZuUmVzb3VyY2Uoc3RhY2ssICdNeVJlc291cmNlJywge1xuICAgICAgdHlwZTogJ1InLFxuICAgICAgcHJvcGVydGllczoge1xuICAgICAgICBSZWZUb1ZhbHVlSW5NYXA6IG1hcHBpbmcuZmluZEluTWFwKCdUb3BMZXZlbEtleTEnLCAnU2Vjb25kTGV2ZWxLZXkxJylcbiAgICAgIH1cbiAgICB9KTtcbiAgICB0ZXN0LnRocm93cygoKSA9PiBtYXBwaW5nLmZpbmRJbk1hcCgnTm90Rm91bmRUb3BMZXZlbCcsICdOb3RGb3VuZCcpLCAnY2FudCB0YWtlIGEgcmVmZXJlbmNlIG9uIGEgbm9uIGV4aXN0aW5nIGtleScpO1xuICAgIHRlc3QudGhyb3dzKCgpID0+IG1hcHBpbmcuZmluZEluTWFwKCdUb3BMZXZlbEtleTEnLCAnTm90Rm91bmQnKSwgJ2NhbnQgdGFrZSBhIHJlZmVyZW5jZSBvbiBhIG5vbiBleGlzdGluZyBrZXknKTtcblxuICAgIC8vIHNldCB2YWx1ZSBjYW4gYmUgdXNlZCB0byBzZXQvbW9kaWZ5IGEgc3BlY2lmaWMgdmFsdWVcbiAgICBtYXBwaW5nLnNldFZhbHVlKCdUb3BMZXZlbEtleTInLCAnU2Vjb25kTGV2ZWxLZXkyJywgJ0hpJyk7XG4gICAgbWFwcGluZy5zZXRWYWx1ZSgnVG9wTGV2ZWxLZXkxJywgJ1NlY29uZExldmVsS2V5MScsIFsgMSwgMiwgMywgNCBdKTtcblxuICAgIHRlc3QuZGVlcEVxdWFsKHN0YWNrLl90b0Nsb3VkRm9ybWF0aW9uKCksIHsgTWFwcGluZ3M6XG4gICAgICB7IE15TWFwcGluZzpcbiAgICAgICAgIHsgVG9wTGV2ZWxLZXkxOlxuICAgICAgICAgIHsgU2Vjb25kTGV2ZWxLZXkxOiBbIDEsIDIsIDMsIDQgXSxcbiAgICAgICAgICBTZWNvbmRMZXZlbEtleTI6IHsgSGVsbG86ICdXb3JsZCcgfSB9LFxuICAgICAgICAgVG9wTGV2ZWxLZXkyOiB7IFNlY29uZExldmVsS2V5MTogWyA5OSwgOTksIDk5IF0sIFNlY29uZExldmVsS2V5MjogJ0hpJyB9IH0gfSxcbiAgICAgICBSZXNvdXJjZXM6XG4gICAgICB7IE15UmVzb3VyY2U6XG4gICAgICAgICB7IFR5cGU6ICdSJyxcbiAgICAgICAgIFByb3BlcnRpZXM6XG4gICAgICAgICAgeyBSZWZUb1ZhbHVlSW5NYXA6XG4gICAgICAgICAgIHsgJ0ZuOjpGaW5kSW5NYXAnOiBbICdNeU1hcHBpbmcnLCAnVG9wTGV2ZWxLZXkxJywgJ1NlY29uZExldmVsS2V5MScgXSB9IH0gfSB9IH0pO1xuXG4gICAgdGVzdC5kb25lKCk7XG4gIH0sXG59O1xuIl19