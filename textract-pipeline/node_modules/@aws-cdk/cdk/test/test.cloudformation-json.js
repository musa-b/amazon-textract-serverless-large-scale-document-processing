"use strict";
const lib_1 = require("../lib");
const evaluate_cfn_1 = require("./evaluate-cfn");
/**
 * Return two Tokens, one of which evaluates to a Token directly, one which evaluates to it lazily
 */
function tokensThatResolveTo(value) {
    return [
        new lib_1.Token(value),
        new lib_1.Token(() => value)
    ];
}
module.exports = {
    'plain JSON.stringify() on a Token fails'(test) {
        // GIVEN
        const token = new lib_1.Token(() => 'value');
        // WHEN
        test.throws(() => {
            JSON.stringify({ token });
        });
        test.done();
    },
    'string tokens can be JSONified and JSONification can be reversed'(test) {
        const stack = new lib_1.Stack();
        for (const token of tokensThatResolveTo('woof woof')) {
            // GIVEN
            const fido = { name: 'Fido', speaks: token };
            // WHEN
            const resolved = stack.node.resolve(lib_1.CloudFormationJSON.stringify(fido, stack));
            // THEN
            test.deepEqual(evaluate_cfn_1.evaluateCFN(resolved), '{"name":"Fido","speaks":"woof woof"}');
        }
        test.done();
    },
    'string tokens can be embedded while being JSONified'(test) {
        const stack = new lib_1.Stack();
        for (const token of tokensThatResolveTo('woof woof')) {
            // GIVEN
            const fido = { name: 'Fido', speaks: `deep ${token}` };
            // WHEN
            const resolved = stack.node.resolve(lib_1.CloudFormationJSON.stringify(fido, stack));
            // THEN
            test.deepEqual(evaluate_cfn_1.evaluateCFN(resolved), '{"name":"Fido","speaks":"deep woof woof"}');
        }
        test.done();
    },
    'integer Tokens behave correctly in stringification and JSONification'(test) {
        // GIVEN
        const stack = new lib_1.Stack();
        const num = new lib_1.Token(() => 1);
        const embedded = `the number is ${num}`;
        // WHEN
        test.equal(evaluate_cfn_1.evaluateCFN(stack.node.resolve(embedded)), "the number is 1");
        test.equal(evaluate_cfn_1.evaluateCFN(stack.node.resolve(lib_1.CloudFormationJSON.stringify({ embedded }, stack))), "{\"embedded\":\"the number is 1\"}");
        test.equal(evaluate_cfn_1.evaluateCFN(stack.node.resolve(lib_1.CloudFormationJSON.stringify({ num }, stack))), "{\"num\":1}");
        test.done();
    },
    'tokens in strings survive additional TokenJSON.stringification()'(test) {
        // GIVEN
        const stack = new lib_1.Stack();
        for (const token of tokensThatResolveTo('pong!')) {
            // WHEN
            const stringified = lib_1.CloudFormationJSON.stringify(`ping? ${token}`, stack);
            // THEN
            test.equal(evaluate_cfn_1.evaluateCFN(stack.node.resolve(stringified)), '"ping? pong!"');
        }
        test.done();
    },
    'intrinsic Tokens embed correctly in JSONification'(test) {
        // GIVEN
        const stack = new lib_1.Stack();
        const bucketName = new lib_1.Token({ Ref: 'MyBucket' });
        // WHEN
        const resolved = stack.node.resolve(lib_1.CloudFormationJSON.stringify({ theBucket: bucketName }, stack));
        // THEN
        const context = { MyBucket: 'TheName' };
        test.equal(evaluate_cfn_1.evaluateCFN(resolved, context), '{"theBucket":"TheName"}');
        test.done();
    },
    'fake intrinsics are serialized to objects'(test) {
        const stack = new lib_1.Stack();
        const fakeIntrinsics = new lib_1.Token(() => ({
            a: {
                'Fn::GetArtifactAtt': {
                    key: 'val',
                },
            },
            b: {
                'Fn::GetParam': [
                    'val1',
                    'val2',
                ],
            },
        }));
        const stringified = lib_1.CloudFormationJSON.stringify(fakeIntrinsics, stack);
        test.equal(evaluate_cfn_1.evaluateCFN(stack.node.resolve(stringified)), '{"a":{"Fn::GetArtifactAtt":{"key":"val"}},"b":{"Fn::GetParam":["val1","val2"]}}');
        test.done();
    },
    'embedded string literals in intrinsics are escaped when calling TokenJSON.stringify()'(test) {
        // GIVEN
        const stack = new lib_1.Stack();
        const token = lib_1.Fn.join('', ['Hello', 'This\nIs', 'Very "cool"']);
        // WHEN
        const resolved = stack.node.resolve(lib_1.CloudFormationJSON.stringify({
            literal: 'I can also "contain" quotes',
            token
        }, stack));
        // THEN
        const expected = '{"literal":"I can also \\"contain\\" quotes","token":"HelloThis\\nIsVery \\"cool\\""}';
        test.equal(evaluate_cfn_1.evaluateCFN(resolved), expected);
        test.done();
    },
    'Tokens in Tokens are handled correctly'(test) {
        // GIVEN
        const stack = new lib_1.Stack();
        const bucketName = new lib_1.Token({ Ref: 'MyBucket' });
        const combinedName = lib_1.Fn.join('', ['The bucket name is ', bucketName.toString()]);
        // WHEN
        const resolved = stack.node.resolve(lib_1.CloudFormationJSON.stringify({ theBucket: combinedName }, stack));
        // THEN
        const context = { MyBucket: 'TheName' };
        test.equal(evaluate_cfn_1.evaluateCFN(resolved, context), '{"theBucket":"The bucket name is TheName"}');
        test.done();
    },
    'Doubly nested strings evaluate correctly in JSON context'(test) {
        // WHEN
        const stack = new lib_1.Stack();
        const fidoSays = new lib_1.Token(() => 'woof');
        // WHEN
        const resolved = stack.node.resolve(lib_1.CloudFormationJSON.stringify({
            information: `Did you know that Fido says: ${fidoSays}`
        }, stack));
        // THEN
        test.deepEqual(evaluate_cfn_1.evaluateCFN(resolved), '{"information":"Did you know that Fido says: woof"}');
        test.done();
    },
    'Doubly nested intrinsics evaluate correctly in JSON context'(test) {
        // GIVEN
        const stack = new lib_1.Stack();
        const fidoSays = new lib_1.Token(() => ({ Ref: 'Something' }));
        // WHEN
        const resolved = stack.node.resolve(lib_1.CloudFormationJSON.stringify({
            information: `Did you know that Fido says: ${fidoSays}`
        }, stack));
        // THEN
        const context = { Something: 'woof woof' };
        test.deepEqual(evaluate_cfn_1.evaluateCFN(resolved, context), '{"information":"Did you know that Fido says: woof woof"}');
        test.done();
    },
    'Quoted strings in embedded JSON context are escaped'(test) {
        // GIVEN
        const stack = new lib_1.Stack();
        const fidoSays = new lib_1.Token(() => '"woof"');
        // WHEN
        const resolved = stack.node.resolve(lib_1.CloudFormationJSON.stringify({
            information: `Did you know that Fido says: ${fidoSays}`
        }, stack));
        // THEN
        test.deepEqual(evaluate_cfn_1.evaluateCFN(resolved), '{"information":"Did you know that Fido says: \\"woof\\""}');
        test.done();
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC5jbG91ZGZvcm1hdGlvbi1qc29uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidGVzdC5jbG91ZGZvcm1hdGlvbi1qc29uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSxnQ0FBOEQ7QUFDOUQsaURBQTZDO0FBdU03Qzs7R0FFRztBQUNILFNBQVMsbUJBQW1CLENBQUMsS0FBVTtJQUNyQyxPQUFPO1FBQ0wsSUFBSSxXQUFLLENBQUMsS0FBSyxDQUFDO1FBQ2hCLElBQUksV0FBSyxDQUFDLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztLQUN2QixDQUFDO0FBQ0osQ0FBQztBQTdNRCxpQkFBUztJQUNQLHlDQUF5QyxDQUFDLElBQVU7UUFDbEQsUUFBUTtRQUNSLE1BQU0sS0FBSyxHQUFHLElBQUksV0FBSyxDQUFDLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBRXZDLE9BQU87UUFDUCxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRTtZQUNmLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO1FBQzVCLENBQUMsQ0FBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ2QsQ0FBQztJQUVELGtFQUFrRSxDQUFDLElBQVU7UUFDM0UsTUFBTSxLQUFLLEdBQUcsSUFBSSxXQUFLLEVBQUUsQ0FBQztRQUUxQixLQUFLLE1BQU0sS0FBSyxJQUFJLG1CQUFtQixDQUFDLFdBQVcsQ0FBQyxFQUFFO1lBQ3BELFFBQVE7WUFDUixNQUFNLElBQUksR0FBRyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxDQUFDO1lBRTdDLE9BQU87WUFDUCxNQUFNLFFBQVEsR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyx3QkFBa0IsQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUM7WUFFL0UsT0FBTztZQUNQLElB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QUM7UUFDMUIsTUFBTSxRQUFRLEdBQUcsSUFBSSxXQUFLLENBQUMsR0FBRyxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUM7UUFFM0MsT0FBTztRQUNQLE1BQU0sUUFBUSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLHdCQUFrQixDQUFDLFNBQVMsQ0FBQztZQUMvRCxXQUFXLEVBQUUsZ0NBQWdDLFFBQVEsRUFBRTtTQUN4RCxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFFWCxPQUFPO1FBQ1AsSUFBSSxDQUFDLFNBQVMsQ0FBQywwQkFBVyxDQUFDLFFBQVEsQ0FBQyxFQUFFLDJEQUEyRCxDQUFDLENBQUM7UUFFbkcsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ2QsQ0FBQztDQUNGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUZXN0IH0gZnJvbSAnbm9kZXVuaXQnO1xuaW1wb3J0IHsgQ2xvdWRGb3JtYXRpb25KU09OLCBGbiwgU3RhY2ssIFRva2VuIH0gZnJvbSAnLi4vbGliJztcbmltcG9ydCB7IGV2YWx1YXRlQ0ZOIH0gZnJvbSAnLi9ldmFsdWF0ZS1jZm4nO1xuXG5leHBvcnQgPSB7XG4gICdwbGFpbiBKU09OLnN0cmluZ2lmeSgpIG9uIGEgVG9rZW4gZmFpbHMnKHRlc3Q6IFRlc3QpIHtcbiAgICAvLyBHSVZFTlxuICAgIGNvbnN0IHRva2VuID0gbmV3IFRva2VuKCgpID0+ICd2YWx1ZScpO1xuXG4gICAgLy8gV0hFTlxuICAgIHRlc3QudGhyb3dzKCgpID0+IHtcbiAgICAgIEpTT04uc3RyaW5naWZ5KHsgdG9rZW4gfSk7XG4gICAgfSk7XG5cbiAgICB0ZXN0LmRvbmUoKTtcbiAgfSxcblxuICAnc3RyaW5nIHRva2VucyBjYW4gYmUgSlNPTmlmaWVkIGFuZCBKU09OaWZpY2F0aW9uIGNhbiBiZSByZXZlcnNlZCcodGVzdDogVGVzdCkge1xuICAgIGNvbnN0IHN0YWNrID0gbmV3IFN0YWNrKCk7XG5cbiAgICBmb3IgKGNvbnN0IHRva2VuIG9mIHRva2Vuc1RoYXRSZXNvbHZlVG8oJ3dvb2Ygd29vZicpKSB7XG4gICAgICAvLyBHSVZFTlxuICAgICAgY29uc3QgZmlkbyA9IHsgbmFtZTogJ0ZpZG8nLCBzcGVha3M6IHRva2VuIH07XG5cbiAgICAgIC8vIFdIRU5cbiAgICAgIGNvbnN0IHJlc29sdmVkID0gc3RhY2subm9kZS5yZXNvbHZlKENsb3VkRm9ybWF0aW9uSlNPTi5zdHJpbmdpZnkoZmlkbywgc3RhY2spKTtcblxuICAgICAgLy8gVEhFTlxuICAgICAgdGVzdC5kZWVwRXF1YWwoZXZhbHVhdGVDRk4ocmVzb2x2ZWQpLCAne1wibmFtZVwiOlwiRmlkb1wiLFwic3BlYWtzXCI6XCJ3b29mIHdvb2ZcIn0nKTtcbiAgICB9XG5cbiAgICB0ZXN0LmRvbmUoKTtcbiAgfSxcblxuICAnc3RyaW5nIHRva2VucyBjYW4gYmUgZW1iZWRkZWQgd2hpbGUgYmVpbmcgSlNPTmlmaWVkJyh0ZXN0OiBUZXN0KSB7XG4gICAgY29uc3Qgc3RhY2sgPSBuZXcgU3RhY2soKTtcblxuICAgIGZvciAoY29uc3QgdG9rZW4gb2YgdG9rZW5zVGhhdFJlc29sdmVUbygnd29vZiB3b29mJykpIHtcbiAgICAgIC8vIEdJVkVOXG4gICAgICBjb25zdCBmaWRvID0geyBuYW1lOiAnRmlkbycsIHNwZWFrczogYGRlZXAgJHt0b2tlbn1gIH07XG5cbiAgICAgIC8vIFdIRU5cbiAgICAgIGNvbnN0IHJlc29sdmVkID0gc3RhY2subm9kZS5yZXNvbHZlKENsb3VkRm9ybWF0aW9uSlNPTi5zdHJpbmdpZnkoZmlkbywgc3RhY2spKTtcblxuICAgICAgLy8gVEhFTlxuICAgICAgdGVzdC5kZWVwRXF1YWwoZXZhbHVhdGVDRk4ocmVzb2x2ZWQpLCAne1wibmFtZVwiOlwiRmlkb1wiLFwic3BlYWtzXCI6XCJkZWVwIHdvb2Ygd29vZlwifScpO1xuICAgIH1cblxuICAgIHRlc3QuZG9uZSgpO1xuICB9LFxuXG4gICdpbnRlZ2VyIFRva2VucyBiZWhhdmUgY29ycmVjdGx5IGluIHN0cmluZ2lmaWNhdGlvbiBhbmQgSlNPTmlmaWNhdGlvbicodGVzdDogVGVzdCkge1xuICAgIC8vIEdJVkVOXG4gICAgY29uc3Qgc3RhY2sgPSBuZXcgU3RhY2soKTtcbiAgICBjb25zdCBudW0gPSBuZXcgVG9rZW4oKCkgPT4gMSk7XG4gICAgY29uc3QgZW1iZWRkZWQgPSBgdGhlIG51bWJlciBpcyAke251bX1gO1xuXG4gICAgLy8gV0hFTlxuICAgIHRlc3QuZXF1YWwoZXZhbHVhdGVDRk4oc3RhY2subm9kZS5yZXNvbHZlKGVtYmVkZGVkKSksIFwidGhlIG51bWJlciBpcyAxXCIpO1xuICAgIHRlc3QuZXF1YWwoZXZhbHVhdGVDRk4oc3RhY2subm9kZS5yZXNvbHZlKENsb3VkRm9ybWF0aW9uSlNPTi5zdHJpbmdpZnkoeyBlbWJlZGRlZCB9LCBzdGFjaykpKSwgXCJ7XFxcImVtYmVkZGVkXFxcIjpcXFwidGhlIG51bWJlciBpcyAxXFxcIn1cIik7XG4gICAgdGVzdC5lcXVhbChldmFsdWF0ZUNGTihzdGFjay5ub2RlLnJlc29sdmUoQ2xvdWRGb3JtYXRpb25KU09OLnN0cmluZ2lmeSh7IG51bSB9LCBzdGFjaykpKSwgXCJ7XFxcIm51bVxcXCI6MX1cIik7XG5cbiAgICB0ZXN0LmRvbmUoKTtcbiAgfSxcblxuICAndG9rZW5zIGluIHN0cmluZ3Mgc3Vydml2ZSBhZGRpdGlvbmFsIFRva2VuSlNPTi5zdHJpbmdpZmljYXRpb24oKScodGVzdDogVGVzdCkge1xuICAgIC8vIEdJVkVOXG4gICAgY29uc3Qgc3RhY2sgPSBuZXcgU3RhY2soKTtcbiAgICBmb3IgKGNvbnN0IHRva2VuIG9mIHRva2Vuc1RoYXRSZXNvbHZlVG8oJ3BvbmchJykpIHtcbiAgICAgIC8vIFdIRU5cbiAgICAgIGNvbnN0IHN0cmluZ2lmaWVkID0gQ2xvdWRGb3JtYXRpb25KU09OLnN0cmluZ2lmeShgcGluZz8gJHt0b2tlbn1gLCBzdGFjayk7XG5cbiAgICAgIC8vIFRIRU5cbiAgICAgIHRlc3QuZXF1YWwoZXZhbHVhdGVDRk4oc3RhY2subm9kZS5yZXNvbHZlKHN0cmluZ2lmaWVkKSksICdcInBpbmc/IHBvbmchXCInKTtcbiAgICB9XG5cbiAgICB0ZXN0LmRvbmUoKTtcbiAgfSxcblxuICAnaW50cmluc2ljIFRva2VucyBlbWJlZCBjb3JyZWN0bHkgaW4gSlNPTmlmaWNhdGlvbicodGVzdDogVGVzdCkge1xuICAgIC8vIEdJVkVOXG4gICAgY29uc3Qgc3RhY2sgPSBuZXcgU3RhY2soKTtcbiAgICBjb25zdCBidWNrZXROYW1lID0gbmV3IFRva2VuKHsgUmVmOiAnTXlCdWNrZXQnIH0pO1xuXG4gICAgLy8gV0hFTlxuICAgIGNvbnN0IHJlc29sdmVkID0gc3RhY2subm9kZS5yZXNvbHZlKENsb3VkRm9ybWF0aW9uSlNPTi5zdHJpbmdpZnkoeyB0aGVCdWNrZXQ6IGJ1Y2tldE5hbWUgfSwgc3RhY2spKTtcblxuICAgIC8vIFRIRU5cbiAgICBjb25zdCBjb250ZXh0ID0ge015QnVja2V0OiAnVGhlTmFtZSd9O1xuICAgIHRlc3QuZXF1YWwoZXZhbHVhdGVDRk4ocmVzb2x2ZWQsIGNvbnRleHQpLCAne1widGhlQnVja2V0XCI6XCJUaGVOYW1lXCJ9Jyk7XG5cbiAgICB0ZXN0LmRvbmUoKTtcbiAgfSxcblxuICAnZmFrZSBpbnRyaW5zaWNzIGFyZSBzZXJpYWxpemVkIHRvIG9iamVjdHMnKHRlc3Q6IFRlc3QpIHtcbiAgICBjb25zdCBzdGFjayA9IG5ldyBTdGFjaygpO1xuICAgIGNvbnN0IGZha2VJbnRyaW5zaWNzID0gbmV3IFRva2VuKCgpID0+ICh7XG4gICAgICBhOiB7XG4gICAgICAgICdGbjo6R2V0QXJ0aWZhY3RBdHQnOiB7XG4gICAgICAgICAga2V5OiAndmFsJyxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgICBiOiB7XG4gICAgICAgICdGbjo6R2V0UGFyYW0nOiBbXG4gICAgICAgICAgJ3ZhbDEnLFxuICAgICAgICAgICd2YWwyJyxcbiAgICAgICAgXSxcbiAgICAgIH0sXG4gICAgfSkpO1xuXG4gICAgY29uc3Qgc3RyaW5naWZpZWQgPSBDbG91ZEZvcm1hdGlvbkpTT04uc3RyaW5naWZ5KGZha2VJbnRyaW5zaWNzLCBzdGFjayk7XG4gICAgdGVzdC5lcXVhbChldmFsdWF0ZUNGTihzdGFjay5ub2RlLnJlc29sdmUoc3RyaW5naWZpZWQpKSxcbiAgICAgICAgJ3tcImFcIjp7XCJGbjo6R2V0QXJ0aWZhY3RBdHRcIjp7XCJrZXlcIjpcInZhbFwifX0sXCJiXCI6e1wiRm46OkdldFBhcmFtXCI6W1widmFsMVwiLFwidmFsMlwiXX19Jyk7XG5cbiAgICB0ZXN0LmRvbmUoKTtcbiAgfSxcblxuICAnZW1iZWRkZWQgc3RyaW5nIGxpdGVyYWxzIGluIGludHJpbnNpY3MgYXJlIGVzY2FwZWQgd2hlbiBjYWxsaW5nIFRva2VuSlNPTi5zdHJpbmdpZnkoKScodGVzdDogVGVzdCkge1xuICAgIC8vIEdJVkVOXG4gICAgY29uc3Qgc3RhY2sgPSBuZXcgU3RhY2soKTtcbiAgICBjb25zdCB0b2tlbiA9IEZuLmpvaW4oJycsIFsgJ0hlbGxvJywgJ1RoaXNcXG5JcycsICdWZXJ5IFwiY29vbFwiJyBdKTtcblxuICAgIC8vIFdIRU5cbiAgICBjb25zdCByZXNvbHZlZCA9IHN0YWNrLm5vZGUucmVzb2x2ZShDbG91ZEZvcm1hdGlvbkpTT04uc3RyaW5naWZ5KHtcbiAgICAgIGxpdGVyYWw6ICdJIGNhbiBhbHNvIFwiY29udGFpblwiIHF1b3RlcycsXG4gICAgICB0b2tlblxuICAgIH0sIHN0YWNrKSk7XG5cbiAgICAvLyBUSEVOXG4gICAgY29uc3QgZXhwZWN0ZWQgPSAne1wibGl0ZXJhbFwiOlwiSSBjYW4gYWxzbyBcXFxcXCJjb250YWluXFxcXFwiIHF1b3Rlc1wiLFwidG9rZW5cIjpcIkhlbGxvVGhpc1xcXFxuSXNWZXJ5IFxcXFxcImNvb2xcXFxcXCJcIn0nO1xuICAgIHRlc3QuZXF1YWwoZXZhbHVhdGVDRk4ocmVzb2x2ZWQpLCBleHBlY3RlZCk7XG5cbiAgICB0ZXN0LmRvbmUoKTtcbiAgfSxcblxuICAnVG9rZW5zIGluIFRva2VucyBhcmUgaGFuZGxlZCBjb3JyZWN0bHknKHRlc3Q6IFRlc3QpIHtcbiAgICAvLyBHSVZFTlxuICAgIGNvbnN0IHN0YWNrID0gbmV3IFN0YWNrKCk7XG4gICAgY29uc3QgYnVja2V0TmFtZSA9IG5ldyBUb2tlbih7IFJlZjogJ015QnVja2V0JyB9KTtcbiAgICBjb25zdCBjb21iaW5lZE5hbWUgPSBGbi5qb2luKCcnLCBbICdUaGUgYnVja2V0IG5hbWUgaXMgJywgYnVja2V0TmFtZS50b1N0cmluZygpIF0pO1xuXG4gICAgLy8gV0hFTlxuICAgIGNvbnN0IHJlc29sdmVkID0gc3RhY2subm9kZS5yZXNvbHZlKENsb3VkRm9ybWF0aW9uSlNPTi5zdHJpbmdpZnkoeyB0aGVCdWNrZXQ6IGNvbWJpbmVkTmFtZSB9LCBzdGFjaykpO1xuXG4gICAgLy8gVEhFTlxuICAgIGNvbnN0IGNvbnRleHQgPSB7TXlCdWNrZXQ6ICdUaGVOYW1lJ307XG4gICAgdGVzdC5lcXVhbChldmFsdWF0ZUNGTihyZXNvbHZlZCwgY29udGV4dCksICd7XCJ0aGVCdWNrZXRcIjpcIlRoZSBidWNrZXQgbmFtZSBpcyBUaGVOYW1lXCJ9Jyk7XG5cbiAgICB0ZXN0LmRvbmUoKTtcbiAgfSxcblxuICAnRG91Ymx5IG5lc3RlZCBzdHJpbmdzIGV2YWx1YXRlIGNvcnJlY3RseSBpbiBKU09OIGNvbnRleHQnKHRlc3Q6IFRlc3QpIHtcbiAgICAvLyBXSEVOXG4gICAgY29uc3Qgc3RhY2sgPSBuZXcgU3RhY2soKTtcbiAgICBjb25zdCBmaWRvU2F5cyA9IG5ldyBUb2tlbigoKSA9PiAnd29vZicpO1xuXG4gICAgLy8gV0hFTlxuICAgIGNvbnN0IHJlc29sdmVkID0gc3RhY2subm9kZS5yZXNvbHZlKENsb3VkRm9ybWF0aW9uSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgaW5mb3JtYXRpb246IGBEaWQgeW91IGtub3cgdGhhdCBGaWRvIHNheXM6ICR7Zmlkb1NheXN9YFxuICAgIH0sIHN0YWNrKSk7XG5cbiAgICAvLyBUSEVOXG4gICAgdGVzdC5kZWVwRXF1YWwoZXZhbHVhdGVDRk4ocmVzb2x2ZWQpLCAne1wiaW5mb3JtYXRpb25cIjpcIkRpZCB5b3Uga25vdyB0aGF0IEZpZG8gc2F5czogd29vZlwifScpO1xuXG4gICAgdGVzdC5kb25lKCk7XG4gIH0sXG5cbiAgJ0RvdWJseSBuZXN0ZWQgaW50cmluc2ljcyBldmFsdWF0ZSBjb3JyZWN0bHkgaW4gSlNPTiBjb250ZXh0Jyh0ZXN0OiBUZXN0KSB7XG4gICAgLy8gR0lWRU5cbiAgICBjb25zdCBzdGFjayA9IG5ldyBTdGFjaygpO1xuICAgIGNvbnN0IGZpZG9TYXlzID0gbmV3IFRva2VuKCgpID0+ICh7IFJlZjogJ1NvbWV0aGluZycgfSkpO1xuXG4gICAgLy8gV0hFTlxuICAgIGNvbnN0IHJlc29sdmVkID0gc3RhY2subm9kZS5yZXNvbHZlKENsb3VkRm9ybWF0aW9uSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgaW5mb3JtYXRpb246IGBEaWQgeW91IGtub3cgdGhhdCBGaWRvIHNheXM6ICR7Zmlkb1NheXN9YFxuICAgIH0sIHN0YWNrKSk7XG5cbiAgICAvLyBUSEVOXG4gICAgY29uc3QgY29udGV4dCA9IHtTb21ldGhpbmc6ICd3b29mIHdvb2YnfTtcbiAgICB0ZXN0LmRlZXBFcXVhbChldmFsdWF0ZUNGTihyZXNvbHZlZCwgY29udGV4dCksICd7XCJpbmZvcm1hdGlvblwiOlwiRGlkIHlvdSBrbm93IHRoYXQgRmlkbyBzYXlzOiB3b29mIHdvb2ZcIn0nKTtcblxuICAgIHRlc3QuZG9uZSgpO1xuICB9LFxuXG4gICdRdW90ZWQgc3RyaW5ncyBpbiBlbWJlZGRlZCBKU09OIGNvbnRleHQgYXJlIGVzY2FwZWQnKHRlc3Q6IFRlc3QpIHtcbiAgICAvLyBHSVZFTlxuICAgIGNvbnN0IHN0YWNrID0gbmV3IFN0YWNrKCk7XG4gICAgY29uc3QgZmlkb1NheXMgPSBuZXcgVG9rZW4oKCkgPT4gJ1wid29vZlwiJyk7XG5cbiAgICAvLyBXSEVOXG4gICAgY29uc3QgcmVzb2x2ZWQgPSBzdGFjay5ub2RlLnJlc29sdmUoQ2xvdWRGb3JtYXRpb25KU09OLnN0cmluZ2lmeSh7XG4gICAgICBpbmZvcm1hdGlvbjogYERpZCB5b3Uga25vdyB0aGF0IEZpZG8gc2F5czogJHtmaWRvU2F5c31gXG4gICAgfSwgc3RhY2spKTtcblxuICAgIC8vIFRIRU5cbiAgICB0ZXN0LmRlZXBFcXVhbChldmFsdWF0ZUNGTihyZXNvbHZlZCksICd7XCJpbmZvcm1hdGlvblwiOlwiRGlkIHlvdSBrbm93IHRoYXQgRmlkbyBzYXlzOiBcXFxcXCJ3b29mXFxcXFwiXCJ9Jyk7XG5cbiAgICB0ZXN0LmRvbmUoKTtcbiAgfSxcbn07XG5cbi8qKlxuICogUmV0dXJuIHR3byBUb2tlbnMsIG9uZSBvZiB3aGljaCBldmFsdWF0ZXMgdG8gYSBUb2tlbiBkaXJlY3RseSwgb25lIHdoaWNoIGV2YWx1YXRlcyB0byBpdCBsYXppbHlcbiAqL1xuZnVuY3Rpb24gdG9rZW5zVGhhdFJlc29sdmVUbyh2YWx1ZTogYW55KTogVG9rZW5bXSB7XG4gIHJldHVybiBbXG4gICAgbmV3IFRva2VuKHZhbHVlKSxcbiAgICBuZXcgVG9rZW4oKCkgPT4gdmFsdWUpXG4gIF07XG59XG4iXX0=