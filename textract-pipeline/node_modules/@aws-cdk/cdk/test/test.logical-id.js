"use strict";
const lib_1 = require("../lib");
/**
 * These tests are executed once (for specific ID schemes)
 */
const uniqueTests = {
    'if the naming scheme uniquifies with a hash we can have the same concatenated identifier'(test) {
        // GIVEN
        const stack = new lib_1.Stack(undefined, 'TestStack', { namingScheme: new lib_1.HashedAddressingScheme() });
        const A = new lib_1.Construct(stack, 'A');
        new lib_1.CfnResource(A, 'BC', { type: 'Resource' });
        // WHEN
        const AB = new lib_1.Construct(stack, 'AB');
        new lib_1.CfnResource(AB, 'C', { type: 'Resource' });
        // THEN: no exception
        test.done();
    },
    'special case: if the resource is top-level, a hash is not added'(test) {
        // GIVEN
        const stack = new lib_1.Stack(undefined, 'TestStack', { namingScheme: new lib_1.HashedAddressingScheme() });
        // WHEN
        const r = new lib_1.CfnResource(stack, 'MyAwesomeness', { type: 'Resource' });
        // THEN
        test.equal(stack.node.resolve(r.logicalId), 'MyAwesomeness');
        test.done();
    },
    'Logical IDs can be renamed at the stack level'(test) {
        // GIVEN
        const stack = new lib_1.Stack();
        stack.renameLogical('ParentThingResource75D1D9CB', 'Renamed');
        // WHEN
        const parent = new lib_1.Construct(stack, 'Parent');
        new lib_1.CfnResource(parent, 'ThingResource', { type: 'AWS::TAAS::Thing' });
        // THEN
        const template = stack._toCloudFormation();
        test.ok('Renamed' in template.Resources);
        test.done();
    },
    'Renames for objects that don\'t exist fail'(test) {
        // GIVEN
        const stack = new lib_1.Stack();
        stack.renameLogical('DOESNOTEXIST', 'Renamed');
        // WHEN
        new lib_1.Construct(stack, 'Parent');
        // THEN
        test.throws(() => {
            stack._toCloudFormation();
        });
        test.done();
    },
    'ID Renames that collide with existing IDs should fail'(test) {
        // GIVEN
        const stack = new lib_1.Stack();
        stack.renameLogical('ParentThingResource1916E7808', 'ParentThingResource2F19948CB');
        // WHEN
        const parent = new lib_1.Construct(stack, 'Parent');
        new lib_1.CfnResource(parent, 'ThingResource1', { type: 'AWS::TAAS::Thing' });
        // THEN
        test.throws(() => {
            new lib_1.CfnResource(parent, 'ThingResource2', { type: 'AWS::TAAS::Thing' });
        });
        test.done();
    },
    'hashed naming scheme filters constructs named "Resource" from the human portion'(test) {
        // GIVEN
        const stack = new lib_1.Stack();
        // WHEN
        const parent = new lib_1.Construct(stack, 'Parent');
        const child1 = new lib_1.Construct(parent, 'Child');
        const child2 = new lib_1.Construct(child1, 'Resource');
        new lib_1.CfnResource(child2, 'HeyThere', { type: 'AWS::TAAS::Thing' });
        // THEN
        const template = stack._toCloudFormation();
        test.deepEqual(template, {
            Resources: {
                ParentChildHeyThere35220347: {
                    Type: 'AWS::TAAS::Thing'
                }
            }
        });
        test.done();
    },
    'can transparently wrap constructs using "Default" id'(test) {
        // GIVEN
        const stack1 = new lib_1.Stack();
        const parent1 = new lib_1.Construct(stack1, 'Parent');
        new lib_1.CfnResource(parent1, 'HeyThere', { type: 'AWS::TAAS::Thing' });
        const template1 = stack1._toCloudFormation();
        // AND
        const theId1 = Object.keys(template1.Resources)[0];
        test.equal('AWS::TAAS::Thing', template1.Resources[theId1].Type);
        // WHEN
        const stack2 = new lib_1.Stack();
        const parent2 = new lib_1.Construct(stack2, 'Parent');
        const invisibleWrapper = new lib_1.Construct(parent2, 'Default');
        new lib_1.CfnResource(invisibleWrapper, 'HeyThere', { type: 'AWS::TAAS::Thing' });
        const template2 = stack1._toCloudFormation();
        const theId2 = Object.keys(template2.Resources)[0];
        test.equal('AWS::TAAS::Thing', template2.Resources[theId2].Type);
        // THEN: same ID, same object
        test.equal(theId1, theId2);
        test.done();
    },
    'non-alphanumeric characters are removed from the human part of the logical ID'(test) {
        const scheme = new lib_1.HashedAddressingScheme();
        const val1 = scheme.allocateAddress(['Foo-bar', 'B00m', 'Hello_World', '&&Horray Horray.']);
        const val2 = scheme.allocateAddress(['Foobar', 'B00m', 'HelloWorld', 'HorrayHorray']);
        // same human part, different hash
        test.deepEqual(val1, 'FoobarB00mHelloWorldHorrayHorray640E99FB');
        test.deepEqual(val2, 'FoobarB00mHelloWorldHorrayHorray744334FD');
        test.done();
    },
    'non-alphanumeric characters are removed even if the ID has only one component'(test) {
        const scheme = new lib_1.HashedAddressingScheme();
        const val1 = scheme.allocateAddress(['Foo-bar']);
        // same human part, different hash
        test.deepEqual(val1, 'Foobar');
        test.done();
    }
};
const schemes = {
    "hashing scheme": new lib_1.HashedAddressingScheme(),
};
/**
 * These tests are executed for all generators
 */
const allSchemesTests = {
    'empty identifiers are not allowed'(scheme, test) {
        // GIVEN
        const stack = new lib_1.Stack(undefined, 'TestStack', { namingScheme: scheme });
        // WHEN
        test.throws(() => {
            new lib_1.CfnResource(stack, '.', { type: 'R' });
        });
        test.done();
    },
    'too large identifiers are truncated yet still remain unique'(scheme, test) {
        // GIVEN
        const stack = new lib_1.Stack(undefined, 'TestStack', { namingScheme: scheme });
        const A = new lib_1.Construct(stack, generateString(100));
        const B = new lib_1.Construct(A, generateString(100));
        // WHEN
        const firstPart = generateString(60);
        // The shared part has now exceeded the maximum length of CloudFormation identifiers
        // so the identity generator will have to something smart
        const C1 = new lib_1.CfnResource(B, firstPart + generateString(40), { type: 'Resource' });
        const C2 = new lib_1.CfnResource(B, firstPart + generateString(40), { type: 'Resource' });
        // THEN
        test.ok(C1.logicalId.length <= 255);
        test.ok(C2.logicalId.length <= 255);
        test.notEqual(C1, C2);
        test.done();
    },
    'Refs and dependencies will correctly reflect renames done at the stack level'(scheme, test) {
        // GIVEN
        const stack = new lib_1.Stack(undefined, 'TestStack', { namingScheme: scheme });
        stack.renameLogical('OriginalName', 'NewName');
        // WHEN
        const c1 = new lib_1.CfnResource(stack, 'OriginalName', { type: 'R1' });
        const ref = c1.ref;
        const c2 = new lib_1.CfnResource(stack, 'Construct2', { type: 'R2', properties: { ReferenceToR1: ref } });
        c2.node.addDependency(c1);
        // THEN
        stack.node.prepareTree();
        test.deepEqual(stack._toCloudFormation(), {
            Resources: {
                NewName: {
                    Type: 'R1'
                },
                Construct2: {
                    Type: 'R2',
                    Properties: {
                        ReferenceToR1: { Ref: 'NewName' }
                    },
                    DependsOn: ['NewName']
                }
            }
        });
        test.done();
    },
};
// Combine the one-off tests and generate tests for each scheme
const exp = uniqueTests;
Object.keys(schemes).forEach(schemeName => {
    const scheme = schemes[schemeName];
    Object.keys(allSchemesTests).forEach(testName => {
        const testFunction = allSchemesTests[testName];
        exp[`${schemeName}: ${testName}`] = (test) => {
            testFunction(scheme, test);
        };
    });
});
function generateString(chars) {
    let s = '';
    for (let i = 0; i < chars; ++i) {
        s += randomAlpha();
    }
    return s;
    function randomAlpha() {
        return String.fromCharCode('a'.charCodeAt(0) + Math.floor(Math.random() * 26));
    }
}
module.exports = exp;
//# sourceMappingURL=data:application/json;base64,