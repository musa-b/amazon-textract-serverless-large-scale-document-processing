"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cdk = require("@aws-cdk/cdk");
const records_1 = require("./records");
const route53_generated_1 = require("./route53.generated");
const util_1 = require("./util");
class HostedZone extends cdk.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        /**
         * VPCs to which this hosted zone will be added
         */
        this.vpcs = new Array();
        util_1.validateZoneName(props.zoneName);
        const hostedZone = new route53_generated_1.CfnHostedZone(this, 'Resource', {
            name: props.zoneName + '.',
            hostedZoneConfig: props.comment ? { comment: props.comment } : undefined,
            queryLoggingConfig: props.queryLogsLogGroupArn ? { cloudWatchLogsLogGroupArn: props.queryLogsLogGroupArn } : undefined,
            vpcs: new cdk.Token(() => this.vpcs.length === 0 ? undefined : this.vpcs)
        });
        this.hostedZoneId = hostedZone.ref;
        this.hostedZoneNameServers = hostedZone.hostedZoneNameServers;
        this.zoneName = props.zoneName;
        for (const vpc of props.vpcs || []) {
            this.addVpc(vpc);
        }
    }
    /**
     * Imports a hosted zone from another stack.
     */
    static import(scope, id, props) {
        return new ImportedHostedZone(scope, id, props);
    }
    export() {
        return {
            hostedZoneId: new cdk.CfnOutput(this, 'HostedZoneId', { value: this.hostedZoneId }).makeImportValue(),
            zoneName: this.zoneName,
        };
    }
    /**
     * Add another VPC to this private hosted zone.
     *
     * @param vpc the other VPC to add.
     */
    addVpc(vpc) {
        this.vpcs.push({ vpcId: vpc.vpcId, vpcRegion: vpc.vpcRegion });
    }
}
exports.HostedZone = HostedZone;
/**
 * Create a Route53 public hosted zone.
 */
class PublicHostedZone extends HostedZone {
    constructor(scope, id, props) {
        super(scope, id, props);
    }
    addVpc(_vpc) {
        throw new Error('Cannot associate public hosted zones with a VPC');
    }
    /**
     * Adds a delegation from this zone to a designated zone.
     *
     * @param delegate the zone being delegated to.
     * @param opts     options for creating the DNS record, if any.
     */
    addDelegation(delegate, opts = {}) {
        new records_1.ZoneDelegationRecord(this, `${this.zoneName} -> ${delegate.zoneName}`, {
            zone: this,
            delegatedZoneName: delegate.zoneName,
            nameServers: delegate.hostedZoneNameServers,
            comment: opts.comment,
            ttl: opts.ttl,
        });
    }
}
exports.PublicHostedZone = PublicHostedZone;
/**
 * Create a Route53 private hosted zone for use in one or more VPCs.
 *
 * Note that `enableDnsHostnames` and `enableDnsSupport` must have been enabled
 * for the VPC you're configuring for private hosted zones.
 */
class PrivateHostedZone extends HostedZone {
    constructor(scope, id, props) {
        super(scope, id, props);
        this.addVpc(props.vpc);
    }
}
exports.PrivateHostedZone = PrivateHostedZone;
/**
 * Imported hosted zone
 */
class ImportedHostedZone extends cdk.Construct {
    constructor(scope, name, props) {
        super(scope, name);
        this.props = props;
        this.hostedZoneId = props.hostedZoneId;
        this.zoneName = props.zoneName;
    }
    export() {
        return this.props;
    }
}
//# sourceMappingURL=data:application/json;base64,