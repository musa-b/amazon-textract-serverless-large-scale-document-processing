"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const iam = require("@aws-cdk/aws-iam");
const cdk = require("@aws-cdk/cdk");
const applicationautoscaling_generated_1 = require("./applicationautoscaling.generated");
const step_scaling_policy_1 = require("./step-scaling-policy");
const target_tracking_scaling_policy_1 = require("./target-tracking-scaling-policy");
/**
 * Define a scalable target
 */
class ScalableTarget extends cdk.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        this.actions = new Array();
        if (props.maxCapacity < 0) {
            throw new RangeError(`maxCapacity cannot be negative, got: ${props.maxCapacity}`);
        }
        if (props.minCapacity < 0) {
            throw new RangeError(`minCapacity cannot be negative, got: ${props.minCapacity}`);
        }
        if (props.maxCapacity < props.minCapacity) {
            throw new RangeError(`minCapacity (${props.minCapacity}) should be lower than maxCapacity (${props.maxCapacity})`);
        }
        this.role = props.role || new iam.Role(this, 'Role', {
            assumedBy: new iam.ServicePrincipal('application-autoscaling.amazonaws.com')
        });
        const resource = new applicationautoscaling_generated_1.CfnScalableTarget(this, 'Resource', {
            maxCapacity: props.maxCapacity,
            minCapacity: props.minCapacity,
            resourceId: props.resourceId,
            roleArn: this.role.roleArn,
            scalableDimension: props.scalableDimension,
            scheduledActions: this.actions,
            serviceNamespace: props.serviceNamespace
        });
        this.scalableTargetId = resource.scalableTargetId;
    }
    /**
     * Add a policy statement to the role's policy
     */
    addToRolePolicy(statement) {
        this.role.addToPolicy(statement);
    }
    /**
     * Scale out or in based on time
     */
    scaleOnSchedule(id, action) {
        if (action.minCapacity === undefined && action.maxCapacity === undefined) {
            throw new Error(`You must supply at least one of minCapacity or maxCapacity, got ${JSON.stringify(action)}`);
        }
        this.actions.push({
            scheduledActionName: id,
            schedule: action.schedule,
            startTime: action.startTime,
            endTime: action.endTime,
            scalableTargetAction: {
                maxCapacity: action.maxCapacity,
                minCapacity: action.minCapacity
            },
        });
    }
    /**
     * Scale out or in, in response to a metric
     */
    scaleOnMetric(id, props) {
        return new step_scaling_policy_1.StepScalingPolicy(this, id, Object.assign({}, props, { scalingTarget: this }));
    }
    /**
     * Scale out or in in order to keep a metric around a target value
     */
    scaleToTrackMetric(id, props) {
        return new target_tracking_scaling_policy_1.TargetTrackingScalingPolicy(this, id, Object.assign({}, props, { scalingTarget: this }));
    }
}
exports.ScalableTarget = ScalableTarget;
/**
 * The service that supports Application AutoScaling
 */
var ServiceNamespace;
(function (ServiceNamespace) {
    /**
     * Elastic Container Service
     */
    ServiceNamespace["Ecs"] = "ecs";
    /**
     * Elastic Map Reduce
     */
    ServiceNamespace["ElasticMapReduce"] = "elasticmapreduce";
    /**
     * Elastic Compute Cloud
     */
    ServiceNamespace["Ec2"] = "ec2";
    /**
     * App Stream
     */
    ServiceNamespace["AppStream"] = "appstream";
    /**
     * Dynamo DB
     */
    ServiceNamespace["DynamoDb"] = "dynamodb";
    /**
     * Relational Database Service
     */
    ServiceNamespace["Rds"] = "rds";
    /**
     * SageMaker
     */
    ServiceNamespace["SageMaker"] = "sagemaker";
    /**
     * Custom Resource
     */
    ServiceNamespace["CustomResource"] = "custom-resource";
})(ServiceNamespace = exports.ServiceNamespace || (exports.ServiceNamespace = {}));
//# sourceMappingURL=data:application/json;base64,