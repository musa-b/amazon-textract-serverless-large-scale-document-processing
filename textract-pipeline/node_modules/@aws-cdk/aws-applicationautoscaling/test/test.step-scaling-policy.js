"use strict";
const assert_1 = require("@aws-cdk/assert");
const cloudwatch = require("@aws-cdk/aws-cloudwatch");
const cdk = require("@aws-cdk/cdk");
const fc = require("fast-check");
const util_1 = require("./util");
const util_2 = require("./util");
/**
 * Synthesize the given step scaling setup to a template
 */
function setupStepScaling(intervals) {
    const stack = new cdk.Stack();
    const target = util_2.createScalableTarget(stack);
    target.scaleOnMetric('ScaleInterval', {
        metric: new cloudwatch.Metric({ namespace: 'Test', metricName: 'Success' }),
        scalingSteps: intervals
    });
    return new ScalingStackTemplate(assert_1.SynthUtils.toCloudFormation(stack));
}
class ScalingStackTemplate {
    constructor(template) {
        this.template = template;
        this.lowerPolicy = 'TargetScaleIntervalLowerPolicy6F26D597';
        this.lowerAlarm = 'TargetScaleIntervalLowerAlarm4B5CE869';
        this.upperPolicy = 'TargetScaleIntervalUpperPolicy7C751132';
        this.upperAlarm = 'TargetScaleIntervalUpperAlarm69FD1BBB';
    }
    get lowerThreshold() {
        return this.threshold(this.lowerAlarm);
    }
    get upperThreshold() {
        return this.threshold(this.upperAlarm);
    }
    get lowerSteps() {
        return this.steps(this.lowerPolicy);
    }
    get upperSteps() {
        return this.steps(this.upperPolicy);
    }
    allStepsAbsolute() {
        const ret = new Array();
        const lowerThreshold = this.lowerThreshold;
        if (lowerThreshold !== undefined) {
            ret.push(...this.lowerSteps.map(x => makeAbsolute(lowerThreshold, x)));
        }
        const upperThreshold = this.upperThreshold;
        if (upperThreshold !== undefined) {
            ret.push(...this.upperSteps.map(x => makeAbsolute(upperThreshold, x)));
        }
        return ret;
    }
    resource(id) {
        return this.template.Resources[id];
    }
    threshold(id) {
        return apply(this.resource(id), x => x.Properties.Threshold);
    }
    steps(id) {
        return apply(this.resource(id), x => x.Properties.StepScalingPolicyConfiguration.StepAdjustments);
    }
}
function makeAbsolute(threshold, step) {
    return concrete({
        MetricIntervalLowerBound: apply(step.MetricIntervalLowerBound, x => x + threshold),
        MetricIntervalUpperBound: apply(step.MetricIntervalUpperBound, x => x + threshold),
        ScalingAdjustment: step.ScalingAdjustment
    });
}
function overlaps(a, b) {
    return (a.MetricIntervalLowerBound < b.MetricIntervalUpperBound
        && a.MetricIntervalUpperBound > b.MetricIntervalLowerBound);
}
function concrete(step) {
    return {
        MetricIntervalLowerBound: ifUndefined(step.MetricIntervalLowerBound, -Infinity),
        MetricIntervalUpperBound: ifUndefined(step.MetricIntervalUpperBound, Infinity),
        ScalingAdjustment: step.ScalingAdjustment
    };
}
function ifUndefined(x, def) {
    return x !== undefined ? x : def;
}
function apply(x, f) {
    if (x === undefined) {
        return undefined;
    }
    return f(x);
}
/**
 * Helper function to print variables in case of a failing property check
 */
function reportFalse(cond, ...repr) {
    if (!cond) {
        // tslint:disable-next-line:no-console
        console.error('PROPERTY FAILS ON:', ...repr);
    }
    return cond;
}
module.exports = {
    'alarm thresholds are valid numbers'(test) {
        fc.assert(fc.property(util_1.arbitrary_input_intervals(), (intervals) => {
            const template = setupStepScaling(intervals);
            const lowerThreshold = template.lowerThreshold;
            const upperThreshold = template.upperThreshold;
            return reportFalse((lowerThreshold === undefined || (lowerThreshold > 0 && lowerThreshold !== Infinity))
                && (upperThreshold === undefined || (upperThreshold > 0 && upperThreshold !== Infinity)), lowerThreshold, upperThreshold);
        }));
        test.done();
    },
    'generated step intervals are valid intervals'(test) {
        fc.assert(fc.property(util_1.arbitrary_input_intervals(), (intervals) => {
            const template = setupStepScaling(intervals);
            const steps = template.allStepsAbsolute();
            return reportFalse(steps.every(step => {
                return step.MetricIntervalLowerBound < step.MetricIntervalUpperBound;
            }), steps, 'template', JSON.stringify(template, undefined, 2));
        }));
        test.done();
    },
    'generated step intervals are nonoverlapping'(test) {
        fc.assert(fc.property(util_1.arbitrary_input_intervals(), (intervals) => {
            const template = setupStepScaling(intervals);
            const steps = template.allStepsAbsolute();
            for (let i = 0; i < steps.length; i++) {
                const compareTo = steps.slice(i + 1);
                if (compareTo.some(x => overlaps(steps[i], x))) {
                    return reportFalse(false, steps);
                }
            }
            return true;
        }), { verbose: true });
        test.done();
    },
    'all template intervals occur in input array'(test) {
        fc.assert(fc.property(util_1.arbitrary_input_intervals(), (intervals) => {
            const template = setupStepScaling(intervals);
            const steps = template.allStepsAbsolute();
            return steps.every(step => {
                return reportFalse(intervals.find(interval => {
                    const acceptableLowerBounds = step.MetricIntervalLowerBound === -Infinity ? [undefined, 0] : [undefined, step.MetricIntervalLowerBound];
                    // tslint:disable-next-line:max-line-length
                    const acceptableUpperBounds = step.MetricIntervalUpperBound === Infinity ? [undefined, Infinity] : [undefined, step.MetricIntervalUpperBound];
                    return (acceptableLowerBounds.includes(interval.lower) && acceptableUpperBounds.includes(interval.upper));
                }) !== undefined, step, intervals);
            });
        }));
        test.done();
    },
    'lower alarm uses lower policy'(test) {
        fc.assert(fc.property(util_1.arbitrary_input_intervals(), (intervals) => {
            const template = setupStepScaling(intervals);
            const alarm = template.resource(template.lowerAlarm);
            fc.pre(alarm !== undefined);
            return reportFalse(alarm.Properties.AlarmActions[0].Ref === template.lowerPolicy, alarm);
        }));
        test.done();
    },
    'upper alarm uses upper policy'(test) {
        fc.assert(fc.property(util_1.arbitrary_input_intervals(), (intervals) => {
            const template = setupStepScaling(intervals);
            const alarm = template.resource(template.upperAlarm);
            fc.pre(alarm !== undefined);
            return reportFalse(alarm.Properties.AlarmActions[0].Ref === template.upperPolicy, alarm);
        }));
        test.done();
    },
};
//# sourceMappingURL=data:application/json;base64,