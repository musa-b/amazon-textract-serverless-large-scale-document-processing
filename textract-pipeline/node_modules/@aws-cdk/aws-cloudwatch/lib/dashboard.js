"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cdk_1 = require("@aws-cdk/cdk");
const cloudwatch_generated_1 = require("./cloudwatch.generated");
const layout_1 = require("./layout");
/**
 * A CloudWatch dashboard
 */
class Dashboard extends cdk_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        this.rows = [];
        // WORKAROUND -- Dashboard cannot be updated if the DashboardName is missing.
        // This is a bug in CloudFormation, but we don't want CDK users to have a bad
        // experience. We'll generate a name here if you did not supply one.
        // See: https://github.com/awslabs/aws-cdk/issues/213
        const dashboardName = (props && props.dashboardName) || new cdk_1.Token(() => this.generateDashboardName()).toString();
        this.dashboard = new cloudwatch_generated_1.CfnDashboard(this, 'Resource', {
            dashboardName,
            dashboardBody: new cdk_1.Token(() => {
                const column = new layout_1.Column(...this.rows);
                column.position(0, 0);
                return this.node.stringifyJson({ widgets: column.toJson() });
            }).toString()
        });
    }
    /**
     * Add a widget to the dashboard.
     *
     * Widgets given in multiple calls to add() will be laid out stacked on
     * top of each other.
     *
     * Multiple widgets added in the same call to add() will be laid out next
     * to each other.
     */
    add(...widgets) {
        if (widgets.length === 0) {
            return;
        }
        const w = widgets.length > 1 ? new layout_1.Row(...widgets) : widgets[0];
        this.rows.push(w);
    }
    /**
     * Generate a unique dashboard name in case the user didn't supply one
     */
    generateDashboardName() {
        // Combination of stack name and LogicalID, which are guaranteed to be unique.
        return this.node.stack.name + '-' + this.dashboard.logicalId;
    }
}
exports.Dashboard = Dashboard;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGFzaGJvYXJkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZGFzaGJvYXJkLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsc0NBQWdEO0FBQ2hELGlFQUFzRDtBQUN0RCxxQ0FBdUM7QUFZdkM7O0dBRUc7QUFDSCxNQUFhLFNBQVUsU0FBUSxlQUFTO0lBSXRDLFlBQVksS0FBZ0IsRUFBRSxFQUFVLEVBQUUsS0FBc0I7UUFDOUQsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUpGLFNBQUksR0FBYyxFQUFFLENBQUM7UUFNcEMsNkVBQTZFO1FBQzdFLDZFQUE2RTtRQUM3RSxvRUFBb0U7UUFDcEUscURBQXFEO1FBQ3JELE1BQU0sYUFBYSxHQUFHLENBQUMsS0FBSyxJQUFJLEtBQUssQ0FBQyxhQUFhLENBQUMsSUFBSSxJQUFJLFdBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMscUJBQXFCLEVBQUUsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBRWpILElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxtQ0FBWSxDQUFDLElBQUksRUFBRSxVQUFVLEVBQUU7WUFDbEQsYUFBYTtZQUNiLGFBQWEsRUFBRSxJQUFJLFdBQUssQ0FBQyxHQUFHLEVBQUU7Z0JBQzVCLE1BQU0sTUFBTSxHQUFHLElBQUksZUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUN4QyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztnQkFDdEIsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxFQUFFLE9BQU8sRUFBRSxNQUFNLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBQy9ELENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRTtTQUNkLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRDs7Ozs7Ozs7T0FRRztJQUNJLEdBQUcsQ0FBQyxHQUFHLE9BQWtCO1FBQzlCLElBQUksT0FBTyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7WUFDeEIsT0FBTztTQUNSO1FBRUQsTUFBTSxDQUFDLEdBQUcsT0FBTyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksWUFBRyxDQUFDLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNoRSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNwQixDQUFDO0lBRUQ7O09BRUc7SUFDSyxxQkFBcUI7UUFDM0IsOEVBQThFO1FBQzlFLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQztJQUMvRCxDQUFDO0NBQ0Y7QUFoREQsOEJBZ0RDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29uc3RydWN0LCBUb2tlbiB9IGZyb20gXCJAYXdzLWNkay9jZGtcIjtcbmltcG9ydCB7IENmbkRhc2hib2FyZCB9IGZyb20gJy4vY2xvdWR3YXRjaC5nZW5lcmF0ZWQnO1xuaW1wb3J0IHsgQ29sdW1uLCBSb3cgfSBmcm9tIFwiLi9sYXlvdXRcIjtcbmltcG9ydCB7IElXaWRnZXQgfSBmcm9tIFwiLi93aWRnZXRcIjtcblxuZXhwb3J0IGludGVyZmFjZSBEYXNoYm9hcmRQcm9wcyB7XG4gIC8qKlxuICAgKiBOYW1lIG9mIHRoZSBkYXNoYm9hcmRcbiAgICpcbiAgICogQGRlZmF1bHQgQXV0b21hdGljYWxseSBnZW5lcmF0ZWQgbmFtZVxuICAgKi9cbiAgcmVhZG9ubHkgZGFzaGJvYXJkTmFtZT86IHN0cmluZztcbn1cblxuLyoqXG4gKiBBIENsb3VkV2F0Y2ggZGFzaGJvYXJkXG4gKi9cbmV4cG9ydCBjbGFzcyBEYXNoYm9hcmQgZXh0ZW5kcyBDb25zdHJ1Y3Qge1xuICBwcml2YXRlIHJlYWRvbmx5IHJvd3M6IElXaWRnZXRbXSA9IFtdO1xuICBwcml2YXRlIHJlYWRvbmx5IGRhc2hib2FyZDogQ2ZuRGFzaGJvYXJkO1xuXG4gIGNvbnN0cnVjdG9yKHNjb3BlOiBDb25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzPzogRGFzaGJvYXJkUHJvcHMpIHtcbiAgICBzdXBlcihzY29wZSwgaWQpO1xuXG4gICAgLy8gV09SS0FST1VORCAtLSBEYXNoYm9hcmQgY2Fubm90IGJlIHVwZGF0ZWQgaWYgdGhlIERhc2hib2FyZE5hbWUgaXMgbWlzc2luZy5cbiAgICAvLyBUaGlzIGlzIGEgYnVnIGluIENsb3VkRm9ybWF0aW9uLCBidXQgd2UgZG9uJ3Qgd2FudCBDREsgdXNlcnMgdG8gaGF2ZSBhIGJhZFxuICAgIC8vIGV4cGVyaWVuY2UuIFdlJ2xsIGdlbmVyYXRlIGEgbmFtZSBoZXJlIGlmIHlvdSBkaWQgbm90IHN1cHBseSBvbmUuXG4gICAgLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vYXdzbGFicy9hd3MtY2RrL2lzc3Vlcy8yMTNcbiAgICBjb25zdCBkYXNoYm9hcmROYW1lID0gKHByb3BzICYmIHByb3BzLmRhc2hib2FyZE5hbWUpIHx8IG5ldyBUb2tlbigoKSA9PiB0aGlzLmdlbmVyYXRlRGFzaGJvYXJkTmFtZSgpKS50b1N0cmluZygpO1xuXG4gICAgdGhpcy5kYXNoYm9hcmQgPSBuZXcgQ2ZuRGFzaGJvYXJkKHRoaXMsICdSZXNvdXJjZScsIHtcbiAgICAgIGRhc2hib2FyZE5hbWUsXG4gICAgICBkYXNoYm9hcmRCb2R5OiBuZXcgVG9rZW4oKCkgPT4ge1xuICAgICAgICBjb25zdCBjb2x1bW4gPSBuZXcgQ29sdW1uKC4uLnRoaXMucm93cyk7XG4gICAgICAgIGNvbHVtbi5wb3NpdGlvbigwLCAwKTtcbiAgICAgICAgcmV0dXJuIHRoaXMubm9kZS5zdHJpbmdpZnlKc29uKHsgd2lkZ2V0czogY29sdW1uLnRvSnNvbigpIH0pO1xuICAgICAgfSkudG9TdHJpbmcoKVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZCBhIHdpZGdldCB0byB0aGUgZGFzaGJvYXJkLlxuICAgKlxuICAgKiBXaWRnZXRzIGdpdmVuIGluIG11bHRpcGxlIGNhbGxzIHRvIGFkZCgpIHdpbGwgYmUgbGFpZCBvdXQgc3RhY2tlZCBvblxuICAgKiB0b3Agb2YgZWFjaCBvdGhlci5cbiAgICpcbiAgICogTXVsdGlwbGUgd2lkZ2V0cyBhZGRlZCBpbiB0aGUgc2FtZSBjYWxsIHRvIGFkZCgpIHdpbGwgYmUgbGFpZCBvdXQgbmV4dFxuICAgKiB0byBlYWNoIG90aGVyLlxuICAgKi9cbiAgcHVibGljIGFkZCguLi53aWRnZXRzOiBJV2lkZ2V0W10pIHtcbiAgICBpZiAod2lkZ2V0cy5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCB3ID0gd2lkZ2V0cy5sZW5ndGggPiAxID8gbmV3IFJvdyguLi53aWRnZXRzKSA6IHdpZGdldHNbMF07XG4gICAgdGhpcy5yb3dzLnB1c2godyk7XG4gIH1cblxuICAvKipcbiAgICogR2VuZXJhdGUgYSB1bmlxdWUgZGFzaGJvYXJkIG5hbWUgaW4gY2FzZSB0aGUgdXNlciBkaWRuJ3Qgc3VwcGx5IG9uZVxuICAgKi9cbiAgcHJpdmF0ZSBnZW5lcmF0ZURhc2hib2FyZE5hbWUoKTogc3RyaW5nIHtcbiAgICAvLyBDb21iaW5hdGlvbiBvZiBzdGFjayBuYW1lIGFuZCBMb2dpY2FsSUQsIHdoaWNoIGFyZSBndWFyYW50ZWVkIHRvIGJlIHVuaXF1ZS5cbiAgICByZXR1cm4gdGhpcy5ub2RlLnN0YWNrLm5hbWUgKyAnLScgKyB0aGlzLmRhc2hib2FyZC5sb2dpY2FsSWQ7XG4gIH1cbn1cbiJdfQ==