"use strict";
const cdk_1 = require("@aws-cdk/cdk");
const lib_1 = require("../lib");
module.exports = {
    'add metrics to graphs on either axis'(test) {
        // WHEN
        const stack = new cdk_1.Stack();
        const widget = new lib_1.GraphWidget({
            title: 'My fancy graph',
            left: [
                new lib_1.Metric({ namespace: 'CDK', metricName: 'Test' })
            ],
            right: [
                new lib_1.Metric({ namespace: 'CDK', metricName: 'Tast' })
            ]
        });
        // THEN
        test.deepEqual(stack.node.resolve(widget.toJson()), [{
                type: 'metric',
                width: 6,
                height: 6,
                properties: {
                    view: 'timeSeries',
                    title: 'My fancy graph',
                    region: { Ref: 'AWS::Region' },
                    metrics: [
                        ['CDK', 'Test', { yAxis: 'left', period: 300, stat: 'Average' }],
                        ['CDK', 'Tast', { yAxis: 'right', period: 300, stat: 'Average' }]
                    ],
                    annotations: { horizontal: [] },
                    yAxis: { left: { min: 0 }, right: { min: 0 } }
                }
            }]);
        test.done();
    },
    'label and color are respected in constructor'(test) {
        // WHEN
        const stack = new cdk_1.Stack();
        const widget = new lib_1.GraphWidget({
            left: [new lib_1.Metric({ namespace: 'CDK', metricName: 'Test', label: 'MyMetric', color: '000000' })],
        });
        // THEN
        test.deepEqual(stack.node.resolve(widget.toJson()), [{
                type: 'metric',
                width: 6,
                height: 6,
                properties: {
                    view: 'timeSeries',
                    region: { Ref: 'AWS::Region' },
                    metrics: [
                        ['CDK', 'Test', { yAxis: 'left', period: 300, stat: 'Average', label: 'MyMetric', color: '000000' }],
                    ],
                    annotations: { horizontal: [] },
                    yAxis: { left: { min: 0 }, right: { min: 0 } }
                }
            }]);
        test.done();
    },
    'singlevalue widget'(test) {
        // GIVEN
        const stack = new cdk_1.Stack();
        const metric = new lib_1.Metric({ namespace: 'CDK', metricName: 'Test' });
        // WHEN
        const widget = new lib_1.SingleValueWidget({
            metrics: [metric]
        });
        // THEN
        test.deepEqual(stack.node.resolve(widget.toJson()), [{
                type: 'metric',
                width: 6,
                height: 3,
                properties: {
                    view: 'singleValue',
                    region: { Ref: 'AWS::Region' },
                    metrics: [
                        ['CDK', 'Test', { yAxis: 'left', period: 300, stat: 'Average' }],
                    ],
                }
            }]);
        test.done();
    },
    'alarm widget'(test) {
        // GIVEN
        const stack = new cdk_1.Stack();
        const alarm = new lib_1.Metric({ namespace: 'CDK', metricName: 'Test' }).newAlarm(stack, 'Alarm', {
            evaluationPeriods: 2,
            threshold: 1000
        });
        // WHEN
        const widget = new lib_1.AlarmWidget({
            alarm,
        });
        // THEN
        test.deepEqual(stack.node.resolve(widget.toJson()), [{
                type: 'metric',
                width: 6,
                height: 6,
                properties: {
                    view: 'timeSeries',
                    region: { Ref: 'AWS::Region' },
                    annotations: {
                        alarms: [{ 'Fn::GetAtt': ['Alarm7103F465', 'Arn'] }]
                    },
                    yAxis: { left: { min: 0 } }
                }
            }]);
        test.done();
    },
    'add annotations to graph'(test) {
        // WHEN
        const stack = new cdk_1.Stack();
        const widget = new lib_1.GraphWidget({
            title: 'My fancy graph',
            left: [
                new lib_1.Metric({ namespace: 'CDK', metricName: 'Test' })
            ],
            leftAnnotations: [{
                    value: 1000,
                    color: '667788',
                    fill: lib_1.Shading.Below,
                    label: 'this is the annotation',
                }]
        });
        // THEN
        test.deepEqual(stack.node.resolve(widget.toJson()), [{
                type: 'metric',
                width: 6,
                height: 6,
                properties: {
                    view: 'timeSeries',
                    title: 'My fancy graph',
                    region: { Ref: 'AWS::Region' },
                    metrics: [
                        ['CDK', 'Test', { yAxis: 'left', period: 300, stat: 'Average' }],
                    ],
                    annotations: { horizontal: [{
                                yAxis: 'left',
                                value: 1000,
                                color: '667788',
                                fill: 'below',
                                label: 'this is the annotation',
                            }] },
                    yAxis: { left: { min: 0 }, right: { min: 0 } }
                }
            }]);
        test.done();
    },
    'convert alarm to annotation'(test) {
        // GIVEN
        const stack = new cdk_1.Stack();
        const metric = new lib_1.Metric({ namespace: 'CDK', metricName: 'Test' });
        const alarm = metric.newAlarm(stack, 'Alarm', {
            evaluationPeriods: 2,
            threshold: 1000
        });
        // WHEN
        const widget = new lib_1.GraphWidget({
            right: [metric],
            rightAnnotations: [alarm.toAnnotation()]
        });
        // THEN
        test.deepEqual(stack.node.resolve(widget.toJson()), [{
                type: 'metric',
                width: 6,
                height: 6,
                properties: {
                    view: 'timeSeries',
                    region: { Ref: 'AWS::Region' },
                    metrics: [
                        ['CDK', 'Test', { yAxis: 'right', period: 300, stat: 'Average' }],
                    ],
                    annotations: {
                        horizontal: [{
                                yAxis: 'right',
                                value: 1000,
                                label: 'Test >= 1000 for 2 datapoints within 10 minutes',
                            }]
                    },
                    yAxis: { left: { min: 0 }, right: { min: 0 } }
                }
            }]);
        test.done();
    },
};
//# sourceMappingURL=data:application/json;base64,