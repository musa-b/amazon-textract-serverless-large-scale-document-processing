"use strict";
const assert_1 = require("@aws-cdk/assert");
const kinesis = require("@aws-cdk/aws-kinesis");
const lambda = require("@aws-cdk/aws-lambda");
const cdk = require("@aws-cdk/cdk");
const sources = require("../lib");
const test_function_1 = require("./test-function");
module.exports = {
    'sufficiently complex example'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        const fn = new test_function_1.TestFunction(stack, 'Fn');
        const stream = new kinesis.Stream(stack, 'S');
        // WHEN
        fn.addEventSource(new sources.KinesisEventSource(stream, {
            startingPosition: lambda.StartingPosition.TrimHorizon
        }));
        // THEN
        assert_1.expect(stack).to(assert_1.haveResource('AWS::IAM::Policy', {
            "PolicyDocument": {
                "Statement": [
                    {
                        "Action": [
                            "kinesis:DescribeStream",
                            "kinesis:GetRecords",
                            "kinesis:GetShardIterator"
                        ],
                        "Effect": "Allow",
                        "Resource": {
                            "Fn::GetAtt": [
                                "S509448A1",
                                "Arn"
                            ]
                        }
                    }
                ],
                "Version": "2012-10-17"
            },
            "PolicyName": "FnServiceRoleDefaultPolicyC6A839BF",
            "Roles": [{
                    "Ref": "FnServiceRoleB9001A96"
                }]
        }));
        assert_1.expect(stack).to(assert_1.haveResource('AWS::Lambda::EventSourceMapping', {
            "EventSourceArn": {
                "Fn::GetAtt": [
                    "S509448A1",
                    "Arn"
                ]
            },
            "FunctionName": {
                "Ref": "Fn9270CBC0"
            },
            "BatchSize": 100,
            "StartingPosition": "TRIM_HORIZON"
        }));
        test.done();
    },
    'specific batch size'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        const fn = new test_function_1.TestFunction(stack, 'Fn');
        const stream = new kinesis.Stream(stack, 'S');
        // WHEN
        fn.addEventSource(new sources.KinesisEventSource(stream, {
            batchSize: 50,
            startingPosition: lambda.StartingPosition.Latest
        }));
        // THEN
        assert_1.expect(stack).to(assert_1.haveResource('AWS::Lambda::EventSourceMapping', {
            "EventSourceArn": {
                "Fn::GetAtt": [
                    "S509448A1",
                    "Arn"
                ]
            },
            "FunctionName": {
                "Ref": "Fn9270CBC0"
            },
            "BatchSize": 50,
            "StartingPosition": "LATEST"
        }));
        test.done();
    },
    'fails if batch size < 1'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        const fn = new test_function_1.TestFunction(stack, 'Fn');
        const stream = new kinesis.Stream(stack, 'S');
        // WHEN
        test.throws(() => fn.addEventSource(new sources.KinesisEventSource(stream, {
            batchSize: 0,
            startingPosition: lambda.StartingPosition.Latest
        })), /Maximum batch size must be between 1 and 10000 inclusive \(given 0\)/);
        test.done();
    },
    'fails if batch size > 10000'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        const fn = new test_function_1.TestFunction(stack, 'Fn');
        const stream = new kinesis.Stream(stack, 'S');
        // WHEN
        test.throws(() => fn.addEventSource(new sources.KinesisEventSource(stream, {
            batchSize: 10001,
            startingPosition: lambda.StartingPosition.Latest
        })), /Maximum batch size must be between 1 and 10000 inclusive \(given 10001\)/);
        test.done();
    },
};
//# sourceMappingURL=data:application/json;base64,