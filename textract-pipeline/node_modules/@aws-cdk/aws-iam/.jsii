{
  "author": {
    "name": "Amazon Web Services",
    "organization": true,
    "roles": [
      "author"
    ],
    "url": "https://aws.amazon.com"
  },
  "dependencies": {
    "@aws-cdk/cdk": {
      "dependencies": {
        "@aws-cdk/cx-api": {
          "peer": true,
          "targets": {
            "dotnet": {
              "assemblyOriginatorKeyFile": "../../key.snk",
              "namespace": "Amazon.CDK.CXAPI",
              "packageId": "Amazon.CDK.CXAPI",
              "signAssembly": true
            },
            "java": {
              "maven": {
                "artifactId": "cdk-cx-api",
                "groupId": "software.amazon.awscdk"
              },
              "package": "software.amazon.awscdk.cxapi"
            },
            "js": {
              "npm": "@aws-cdk/cx-api"
            },
            "python": {
              "distName": "aws-cdk.cx-api",
              "module": "aws_cdk.cx_api"
            }
          },
          "version": "0.28.0"
        }
      },
      "peer": true,
      "targets": {
        "dotnet": {
          "assemblyOriginatorKeyFile": "../../key.snk",
          "namespace": "Amazon.CDK",
          "packageId": "Amazon.CDK",
          "signAssembly": true
        },
        "java": {
          "maven": {
            "artifactId": "cdk",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk"
        },
        "js": {
          "npm": "@aws-cdk/cdk"
        },
        "python": {
          "distName": "aws-cdk.cdk",
          "module": "aws_cdk.cdk"
        }
      },
      "version": "0.28.0"
    },
    "@aws-cdk/region-info": {
      "peer": true,
      "targets": {
        "dotnet": {
          "assemblyOriginatorKeyFile": "../../key.snk",
          "namespace": "Amazon.CDK.RegionInfo",
          "packageId": "Amazon.CDK.RegionInfo",
          "signAssembly": true
        },
        "java": {
          "maven": {
            "artifactId": "cdk-region-info",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.regioninfo"
        },
        "js": {
          "npm": "@aws-cdk/region-info"
        },
        "python": {
          "distName": "aws-cdk.region-info",
          "module": "aws_cdk.region_info"
        }
      },
      "version": "0.28.0"
    }
  },
  "description": "CDK routines for easily assigning correct and minimal IAM permissions",
  "homepage": "https://github.com/awslabs/aws-cdk",
  "license": "Apache-2.0",
  "name": "@aws-cdk/aws-iam",
  "readme": {
    "markdown": "## AWS IAM Construct Library\n\nDefine a role and add permissions to it. This will automatically create and\nattach an IAM policy to the role:\n\n```ts\n    const role = new Role(this, 'MyRole', {\n      assumedBy: new ServicePrincipal('sns.amazonaws.com')\n    });\n\n    role.addToPolicy(new PolicyStatement()\n        .addAllResources()\n        .addAction('lambda:InvokeFunction'));\n```\n\nDefine a policy and attach it to groups, users and roles. Note that it is possible to attach\nthe policy either by calling `xxx.attachInlinePolicy(policy)` or `policy.attachToXxx(xxx)`.\n\n```ts\n    const user = new User(this, 'MyUser', { password: SecretValue.plainText('1234') });\n    const group = new Group(this, 'MyGroup');\n\n    const policy = new Policy(this, 'MyPolicy');\n    policy.attachToUser(user);\n    group.attachInlinePolicy(policy);\n```\n\nManaged policies can be attached using `xxx.attachManagedPolicy(arn)`:\n\n```ts\nconst group = new Group(this, 'MyGroup');\ngroup.attachManagedPolicy('arn:aws:iam::aws:policy/AdministratorAccess');\n```\n\n### Configuring an ExternalId\n\nIf you need to create roles that will be assumed by 3rd parties, it is generally a good idea to [require an `ExternalId`\nto assume them](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create_for-user_externalid.html).  Configuring\nan `ExternalId` works like this:\n\n```ts\nconst role = new iam.Role(this, 'MyRole', {\n  assumedBy: new iam.AccountPrincipal('123456789012'),\n  externalId: 'SUPPLY-ME',\n});\n```\n\n### Principals vs Identities\n\nWhen we say *Principal*, we mean an entity you grant permissions to. This\nentity can be an AWS Service, a Role, or something more abstract such as \"all\nusers in this account\" or even \"all users in this organization\". An\n*Identity* is an IAM representing a single IAM entity that can have\na policy attached, one of `Role`, `User`, or `Group`.\n\n### IAM Principals\n\nWhen defining policy statements as part of an AssumeRole policy or as part of a\nresource policy, statements would usually refer to a specific IAM principal\nunder `Principal`.\n\nIAM principals are modeled as classes that derive from the `iam.PolicyPrincipal`\nabstract class. Principal objects include principal type (string) and value\n(array of string), optional set of conditions and the action that this principal\nrequires when it is used in an assume role policy document.\n\nTo add a principal to a policy statement you can either use the abstract\n`statement.addPrincipal`, one of the concrete `addXxxPrincipal` methods:\n\n* `addAwsPrincipal`, `addArnPrincipal` or `new ArnPrincipal(arn)` for `{ \"AWS\": arn }`\n* `addAwsAccountPrincipal` or `new AccountPrincipal(accountId)` for `{ \"AWS\": account-arn }`\n* `addServicePrincipal` or `new ServicePrincipal(service)` for `{ \"Service\": service }`\n* `addAccountRootPrincipal` or `new AccountRootPrincipal()` for `{ \"AWS\": { \"Ref: \"AWS::AccountId\" } }`\n* `addCanonicalUserPrincipal` or `new CanonicalUserPrincipal(id)` for `{ \"CanonicalUser\": id }`\n* `addFederatedPrincipal` or `new FederatedPrincipal(federated, conditions, assumeAction)` for\n  `{ \"Federated\": arn }` and a set of optional conditions and the assume role action to use.\n* `addAnyPrincipal` or `new AnyPrincipal` for `{ \"AWS\": \"*\" }`\n\nIf multiple principals are added to the policy statement, they will be merged together:\n\n```ts\nconst statement = new PolicyStatement();\nstatement.addServicePrincipal('cloudwatch.amazonaws.com');\nstatement.addServicePrincipal('ec2.amazonaws.com');\nstatement.addAwsPrincipal('arn:aws:boom:boom');\n```\n\nWill result in:\n\n```json\n{\n  \"Principal\": {\n    \"Service\": [ \"cloudwatch.amazonaws.com\", \"ec2.amazonaws.com\" ],\n    \"AWS\": \"arn:aws:boom:boom\"\n  }\n}\n```\n\nThe `CompositePrincipal` class can also be used to define complex principals, for example:\n\n```ts\nconst role = new iam.Role(this, 'MyRole', {\n  assumedBy: new iam.CompositePrincipal(\n    new iam.ServicePrincipal('ec2.amazonawas.com'),\n    new iam.AccountPrincipal('1818188181818187272')\n  )\n});\n```\n\n### Features\n\n * Policy name uniqueness is enforced. If two policies by the same name are attached to the same\n   principal, the attachment will fail.\n * Policy names are not required - the CDK logical ID will be used and ensured to be unique.\n"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/awslabs/aws-cdk.git"
  },
  "schema": "jsii/1.0",
  "targets": {
    "dotnet": {
      "assemblyOriginatorKeyFile": "../../key.snk",
      "namespace": "Amazon.CDK.AWS.IAM",
      "packageId": "Amazon.CDK.AWS.IAM",
      "signAssembly": true
    },
    "java": {
      "maven": {
        "artifactId": "iam",
        "groupId": "software.amazon.awscdk"
      },
      "package": "software.amazon.awscdk.services.iam"
    },
    "js": {
      "npm": "@aws-cdk/aws-iam"
    },
    "python": {
      "distName": "aws-cdk.aws-iam",
      "module": "aws_cdk.aws_iam"
    }
  },
  "types": {
    "@aws-cdk/aws-iam.AccountPrincipal": {
      "assembly": "@aws-cdk/aws-iam",
      "base": {
        "fqn": "@aws-cdk/aws-iam.ArnPrincipal"
      },
      "fqn": "@aws-cdk/aws-iam.AccountPrincipal",
      "initializer": {
        "initializer": true,
        "parameters": [
          {
            "name": "accountId",
            "type": {
              "primitive": "any"
            }
          }
        ]
      },
      "kind": "class",
      "methods": [
        {
          "docs": {
            "comment": "Returns a string representation of an object."
          },
          "name": "toString",
          "overrides": {
            "fqn": "@aws-cdk/aws-iam.ArnPrincipal"
          },
          "returns": {
            "primitive": "string"
          }
        }
      ],
      "name": "AccountPrincipal",
      "properties": [
        {
          "immutable": true,
          "name": "accountId",
          "type": {
            "primitive": "any"
          }
        }
      ]
    },
    "@aws-cdk/aws-iam.AccountRootPrincipal": {
      "assembly": "@aws-cdk/aws-iam",
      "base": {
        "fqn": "@aws-cdk/aws-iam.AccountPrincipal"
      },
      "fqn": "@aws-cdk/aws-iam.AccountRootPrincipal",
      "initializer": {
        "initializer": true
      },
      "kind": "class",
      "methods": [
        {
          "docs": {
            "comment": "Returns a string representation of an object."
          },
          "name": "toString",
          "overrides": {
            "fqn": "@aws-cdk/aws-iam.AccountPrincipal"
          },
          "returns": {
            "primitive": "string"
          }
        }
      ],
      "name": "AccountRootPrincipal"
    },
    "@aws-cdk/aws-iam.AnyPrincipal": {
      "assembly": "@aws-cdk/aws-iam",
      "base": {
        "fqn": "@aws-cdk/aws-iam.ArnPrincipal"
      },
      "docs": {
        "comment": "A principal representing all identities in all accounts"
      },
      "fqn": "@aws-cdk/aws-iam.AnyPrincipal",
      "initializer": {
        "initializer": true
      },
      "kind": "class",
      "methods": [
        {
          "docs": {
            "comment": "Returns a string representation of an object."
          },
          "name": "toString",
          "overrides": {
            "fqn": "@aws-cdk/aws-iam.ArnPrincipal"
          },
          "returns": {
            "primitive": "string"
          }
        }
      ],
      "name": "AnyPrincipal"
    },
    "@aws-cdk/aws-iam.Anyone": {
      "assembly": "@aws-cdk/aws-iam",
      "base": {
        "fqn": "@aws-cdk/aws-iam.AnyPrincipal"
      },
      "docs": {
        "comment": "A principal representing all identities in all accounts",
        "deprecated": "use `AnyPrincipal`"
      },
      "fqn": "@aws-cdk/aws-iam.Anyone",
      "initializer": {
        "initializer": true
      },
      "kind": "class",
      "name": "Anyone"
    },
    "@aws-cdk/aws-iam.ArnPrincipal": {
      "assembly": "@aws-cdk/aws-iam",
      "base": {
        "fqn": "@aws-cdk/aws-iam.PrincipalBase"
      },
      "fqn": "@aws-cdk/aws-iam.ArnPrincipal",
      "initializer": {
        "initializer": true,
        "parameters": [
          {
            "name": "arn",
            "type": {
              "primitive": "string"
            }
          }
        ]
      },
      "kind": "class",
      "methods": [
        {
          "docs": {
            "comment": "Returns a string representation of an object."
          },
          "name": "toString",
          "overrides": {
            "fqn": "@aws-cdk/aws-iam.PrincipalBase"
          },
          "returns": {
            "primitive": "string"
          }
        }
      ],
      "name": "ArnPrincipal",
      "properties": [
        {
          "immutable": true,
          "name": "arn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "comment": "Return the policy fragment that identifies this principal in a Policy."
          },
          "immutable": true,
          "name": "policyFragment",
          "overrides": {
            "fqn": "@aws-cdk/aws-iam.PrincipalBase"
          },
          "type": {
            "fqn": "@aws-cdk/aws-iam.PrincipalPolicyFragment"
          }
        }
      ]
    },
    "@aws-cdk/aws-iam.AwsManagedPolicy": {
      "assembly": "@aws-cdk/aws-iam",
      "docs": {
        "comment": "A policy managed by AWS\n\nFor this managed policy, you only need to know the name to be able to use it.\n\nSome managed policy names start with \"service-role/\", some start with\n\"job-function/\", and some don't start with anything. Do include the\nprefix when constructing this object."
      },
      "fqn": "@aws-cdk/aws-iam.AwsManagedPolicy",
      "initializer": {
        "initializer": true,
        "parameters": [
          {
            "name": "managedPolicyName",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "scope",
            "type": {
              "fqn": "@aws-cdk/cdk.IConstruct"
            }
          }
        ]
      },
      "kind": "class",
      "name": "AwsManagedPolicy",
      "properties": [
        {
          "immutable": true,
          "name": "managedPolicyName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "comment": "The Arn of this managed policy"
          },
          "immutable": true,
          "name": "policyArn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "immutable": true,
          "name": "scope",
          "type": {
            "fqn": "@aws-cdk/cdk.IConstruct"
          }
        }
      ]
    },
    "@aws-cdk/aws-iam.CanonicalUserPrincipal": {
      "assembly": "@aws-cdk/aws-iam",
      "base": {
        "fqn": "@aws-cdk/aws-iam.PrincipalBase"
      },
      "docs": {
        "comment": "A policy prinicipal for canonicalUserIds - useful for S3 bucket policies that use\nOrigin Access identities.\n\nSee https://docs.aws.amazon.com/general/latest/gr/acct-identifiers.html\n\nand\n\nhttps://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-restricting-access-to-s3.html\n\nfor more details."
      },
      "fqn": "@aws-cdk/aws-iam.CanonicalUserPrincipal",
      "initializer": {
        "initializer": true,
        "parameters": [
          {
            "name": "canonicalUserId",
            "type": {
              "primitive": "string"
            }
          }
        ]
      },
      "kind": "class",
      "methods": [
        {
          "docs": {
            "comment": "Returns a string representation of an object."
          },
          "name": "toString",
          "overrides": {
            "fqn": "@aws-cdk/aws-iam.PrincipalBase"
          },
          "returns": {
            "primitive": "string"
          }
        }
      ],
      "name": "CanonicalUserPrincipal",
      "properties": [
        {
          "immutable": true,
          "name": "canonicalUserId",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "comment": "Return the policy fragment that identifies this principal in a Policy."
          },
          "immutable": true,
          "name": "policyFragment",
          "overrides": {
            "fqn": "@aws-cdk/aws-iam.PrincipalBase"
          },
          "type": {
            "fqn": "@aws-cdk/aws-iam.PrincipalPolicyFragment"
          }
        }
      ]
    },
    "@aws-cdk/aws-iam.CfnAccessKey": {
      "assembly": "@aws-cdk/aws-iam",
      "base": {
        "fqn": "@aws-cdk/cdk.CfnResource"
      },
      "docs": {
        "cloudformationResource": "AWS::IAM::AccessKey",
        "comment": "A CloudFormation `AWS::IAM::AccessKey`",
        "see": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-accesskey.html"
      },
      "fqn": "@aws-cdk/aws-iam.CfnAccessKey",
      "initializer": {
        "docs": {
          "comment": "Create a new `AWS::IAM::AccessKey`."
        },
        "initializer": true,
        "parameters": [
          {
            "docs": {
              "comment": "- scope in which this resource is defined"
            },
            "name": "scope",
            "type": {
              "fqn": "@aws-cdk/cdk.Construct"
            }
          },
          {
            "docs": {
              "comment": "- scoped id of the resource"
            },
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "docs": {
              "comment": "- resource properties"
            },
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-iam.CfnAccessKeyProps"
            }
          }
        ]
      },
      "kind": "class",
      "methods": [
        {
          "name": "renderProperties",
          "overrides": {
            "fqn": "@aws-cdk/cdk.CfnResource"
          },
          "parameters": [
            {
              "name": "properties",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "protected": true,
          "returns": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        }
      ],
      "name": "CfnAccessKey",
      "properties": [
        {
          "const": true,
          "docs": {
            "comment": "The CloudFormation resource type name for this resource class."
          },
          "immutable": true,
          "name": "resourceTypeName",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "immutable": true,
          "name": "accessKeyId",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "cloudformationAttribute": "SecretAccessKey"
          },
          "immutable": true,
          "name": "accessKeySecretAccessKey",
          "type": {
            "primitive": "string"
          }
        },
        {
          "immutable": true,
          "name": "propertyOverrides",
          "type": {
            "fqn": "@aws-cdk/aws-iam.CfnAccessKeyProps"
          }
        }
      ]
    },
    "@aws-cdk/aws-iam.CfnAccessKeyProps": {
      "assembly": "@aws-cdk/aws-iam",
      "datatype": true,
      "docs": {
        "comment": "Properties for defining a `AWS::IAM::AccessKey`",
        "see": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-accesskey.html"
      },
      "fqn": "@aws-cdk/aws-iam.CfnAccessKeyProps",
      "kind": "interface",
      "name": "CfnAccessKeyProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "comment": "`AWS::IAM::AccessKey.UserName`",
            "see": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-accesskey.html#cfn-iam-accesskey-username"
          },
          "immutable": true,
          "name": "userName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "`AWS::IAM::AccessKey.Serial`",
            "see": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-accesskey.html#cfn-iam-accesskey-serial"
          },
          "immutable": true,
          "name": "serial",
          "type": {
            "optional": true,
            "union": {
              "types": [
                {
                  "primitive": "number"
                },
                {
                  "fqn": "@aws-cdk/cdk.Token"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "`AWS::IAM::AccessKey.Status`",
            "see": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-accesskey.html#cfn-iam-accesskey-status"
          },
          "immutable": true,
          "name": "status",
          "type": {
            "optional": true,
            "primitive": "string"
          }
        }
      ]
    },
    "@aws-cdk/aws-iam.CfnGroup": {
      "assembly": "@aws-cdk/aws-iam",
      "base": {
        "fqn": "@aws-cdk/cdk.CfnResource"
      },
      "docs": {
        "cloudformationResource": "AWS::IAM::Group",
        "comment": "A CloudFormation `AWS::IAM::Group`",
        "see": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-group.html"
      },
      "fqn": "@aws-cdk/aws-iam.CfnGroup",
      "initializer": {
        "docs": {
          "comment": "Create a new `AWS::IAM::Group`."
        },
        "initializer": true,
        "parameters": [
          {
            "docs": {
              "comment": "- scope in which this resource is defined"
            },
            "name": "scope",
            "type": {
              "fqn": "@aws-cdk/cdk.Construct"
            }
          },
          {
            "docs": {
              "comment": "- scoped id of the resource"
            },
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "docs": {
              "comment": "- resource properties"
            },
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-iam.CfnGroupProps",
              "optional": true
            }
          }
        ]
      },
      "kind": "class",
      "methods": [
        {
          "name": "renderProperties",
          "overrides": {
            "fqn": "@aws-cdk/cdk.CfnResource"
          },
          "parameters": [
            {
              "name": "properties",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "protected": true,
          "returns": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        }
      ],
      "name": "CfnGroup",
      "properties": [
        {
          "const": true,
          "docs": {
            "comment": "The CloudFormation resource type name for this resource class."
          },
          "immutable": true,
          "name": "resourceTypeName",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "cloudformationAttribute": "Arn"
          },
          "immutable": true,
          "name": "groupArn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "immutable": true,
          "name": "groupName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "immutable": true,
          "name": "propertyOverrides",
          "type": {
            "fqn": "@aws-cdk/aws-iam.CfnGroupProps"
          }
        }
      ]
    },
    "@aws-cdk/aws-iam.CfnGroup.PolicyProperty": {
      "assembly": "@aws-cdk/aws-iam",
      "datatype": true,
      "docs": {
        "see": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-policy.html"
      },
      "fqn": "@aws-cdk/aws-iam.CfnGroup.PolicyProperty",
      "kind": "interface",
      "name": "PolicyProperty",
      "namespace": "CfnGroup",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "comment": "`CfnGroup.PolicyProperty.PolicyDocument`",
            "see": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-policy.html#cfn-iam-policies-policydocument"
          },
          "immutable": true,
          "name": "policyDocument",
          "type": {
            "union": {
              "types": [
                {
                  "primitive": "json"
                },
                {
                  "fqn": "@aws-cdk/cdk.Token"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "`CfnGroup.PolicyProperty.PolicyName`",
            "see": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-policy.html#cfn-iam-policies-policyname"
          },
          "immutable": true,
          "name": "policyName",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "@aws-cdk/aws-iam.CfnGroupProps": {
      "assembly": "@aws-cdk/aws-iam",
      "datatype": true,
      "docs": {
        "comment": "Properties for defining a `AWS::IAM::Group`",
        "see": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-group.html"
      },
      "fqn": "@aws-cdk/aws-iam.CfnGroupProps",
      "kind": "interface",
      "name": "CfnGroupProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "comment": "`AWS::IAM::Group.GroupName`",
            "see": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-group.html#cfn-iam-group-groupname"
          },
          "immutable": true,
          "name": "groupName",
          "type": {
            "optional": true,
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "`AWS::IAM::Group.ManagedPolicyArns`",
            "see": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-group.html#cfn-iam-group-managepolicyarns"
          },
          "immutable": true,
          "name": "managedPolicyArns",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            },
            "optional": true
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "`AWS::IAM::Group.Path`",
            "see": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-group.html#cfn-iam-group-path"
          },
          "immutable": true,
          "name": "path",
          "type": {
            "optional": true,
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "`AWS::IAM::Group.Policies`",
            "see": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-group.html#cfn-iam-group-policies"
          },
          "immutable": true,
          "name": "policies",
          "type": {
            "optional": true,
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/cdk.Token"
                },
                {
                  "collection": {
                    "elementtype": {
                      "union": {
                        "types": [
                          {
                            "fqn": "@aws-cdk/cdk.Token"
                          },
                          {
                            "fqn": "@aws-cdk/aws-iam.CfnGroup.PolicyProperty"
                          }
                        ]
                      }
                    },
                    "kind": "array"
                  }
                }
              ]
            }
          }
        }
      ]
    },
    "@aws-cdk/aws-iam.CfnInstanceProfile": {
      "assembly": "@aws-cdk/aws-iam",
      "base": {
        "fqn": "@aws-cdk/cdk.CfnResource"
      },
      "docs": {
        "cloudformationResource": "AWS::IAM::InstanceProfile",
        "comment": "A CloudFormation `AWS::IAM::InstanceProfile`",
        "see": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-instanceprofile.html"
      },
      "fqn": "@aws-cdk/aws-iam.CfnInstanceProfile",
      "initializer": {
        "docs": {
          "comment": "Create a new `AWS::IAM::InstanceProfile`."
        },
        "initializer": true,
        "parameters": [
          {
            "docs": {
              "comment": "- scope in which this resource is defined"
            },
            "name": "scope",
            "type": {
              "fqn": "@aws-cdk/cdk.Construct"
            }
          },
          {
            "docs": {
              "comment": "- scoped id of the resource"
            },
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "docs": {
              "comment": "- resource properties"
            },
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-iam.CfnInstanceProfileProps"
            }
          }
        ]
      },
      "kind": "class",
      "methods": [
        {
          "name": "renderProperties",
          "overrides": {
            "fqn": "@aws-cdk/cdk.CfnResource"
          },
          "parameters": [
            {
              "name": "properties",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "protected": true,
          "returns": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        }
      ],
      "name": "CfnInstanceProfile",
      "properties": [
        {
          "const": true,
          "docs": {
            "comment": "The CloudFormation resource type name for this resource class."
          },
          "immutable": true,
          "name": "resourceTypeName",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "cloudformationAttribute": "Arn"
          },
          "immutable": true,
          "name": "instanceProfileArn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "immutable": true,
          "name": "instanceProfileName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "immutable": true,
          "name": "propertyOverrides",
          "type": {
            "fqn": "@aws-cdk/aws-iam.CfnInstanceProfileProps"
          }
        }
      ]
    },
    "@aws-cdk/aws-iam.CfnInstanceProfileProps": {
      "assembly": "@aws-cdk/aws-iam",
      "datatype": true,
      "docs": {
        "comment": "Properties for defining a `AWS::IAM::InstanceProfile`",
        "see": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-instanceprofile.html"
      },
      "fqn": "@aws-cdk/aws-iam.CfnInstanceProfileProps",
      "kind": "interface",
      "name": "CfnInstanceProfileProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "comment": "`AWS::IAM::InstanceProfile.Roles`",
            "see": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-instanceprofile.html#cfn-iam-instanceprofile-roles"
          },
          "immutable": true,
          "name": "roles",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "`AWS::IAM::InstanceProfile.InstanceProfileName`",
            "see": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-instanceprofile.html#cfn-iam-instanceprofile-instanceprofilename"
          },
          "immutable": true,
          "name": "instanceProfileName",
          "type": {
            "optional": true,
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "`AWS::IAM::InstanceProfile.Path`",
            "see": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-instanceprofile.html#cfn-iam-instanceprofile-path"
          },
          "immutable": true,
          "name": "path",
          "type": {
            "optional": true,
            "primitive": "string"
          }
        }
      ]
    },
    "@aws-cdk/aws-iam.CfnManagedPolicy": {
      "assembly": "@aws-cdk/aws-iam",
      "base": {
        "fqn": "@aws-cdk/cdk.CfnResource"
      },
      "docs": {
        "cloudformationResource": "AWS::IAM::ManagedPolicy",
        "comment": "A CloudFormation `AWS::IAM::ManagedPolicy`",
        "see": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-managedpolicy.html"
      },
      "fqn": "@aws-cdk/aws-iam.CfnManagedPolicy",
      "initializer": {
        "docs": {
          "comment": "Create a new `AWS::IAM::ManagedPolicy`."
        },
        "initializer": true,
        "parameters": [
          {
            "docs": {
              "comment": "- scope in which this resource is defined"
            },
            "name": "scope",
            "type": {
              "fqn": "@aws-cdk/cdk.Construct"
            }
          },
          {
            "docs": {
              "comment": "- scoped id of the resource"
            },
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "docs": {
              "comment": "- resource properties"
            },
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-iam.CfnManagedPolicyProps"
            }
          }
        ]
      },
      "kind": "class",
      "methods": [
        {
          "name": "renderProperties",
          "overrides": {
            "fqn": "@aws-cdk/cdk.CfnResource"
          },
          "parameters": [
            {
              "name": "properties",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "protected": true,
          "returns": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        }
      ],
      "name": "CfnManagedPolicy",
      "properties": [
        {
          "const": true,
          "docs": {
            "comment": "The CloudFormation resource type name for this resource class."
          },
          "immutable": true,
          "name": "resourceTypeName",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "immutable": true,
          "name": "managedPolicyArn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "immutable": true,
          "name": "propertyOverrides",
          "type": {
            "fqn": "@aws-cdk/aws-iam.CfnManagedPolicyProps"
          }
        }
      ]
    },
    "@aws-cdk/aws-iam.CfnManagedPolicyProps": {
      "assembly": "@aws-cdk/aws-iam",
      "datatype": true,
      "docs": {
        "comment": "Properties for defining a `AWS::IAM::ManagedPolicy`",
        "see": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-managedpolicy.html"
      },
      "fqn": "@aws-cdk/aws-iam.CfnManagedPolicyProps",
      "kind": "interface",
      "name": "CfnManagedPolicyProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "comment": "`AWS::IAM::ManagedPolicy.PolicyDocument`",
            "see": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-managedpolicy.html#cfn-iam-managedpolicy-policydocument"
          },
          "immutable": true,
          "name": "policyDocument",
          "type": {
            "union": {
              "types": [
                {
                  "primitive": "json"
                },
                {
                  "fqn": "@aws-cdk/cdk.Token"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "`AWS::IAM::ManagedPolicy.Description`",
            "see": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-managedpolicy.html#cfn-iam-managedpolicy-description"
          },
          "immutable": true,
          "name": "description",
          "type": {
            "optional": true,
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "`AWS::IAM::ManagedPolicy.Groups`",
            "see": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-managedpolicy.html#cfn-iam-managedpolicy-groups"
          },
          "immutable": true,
          "name": "groups",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            },
            "optional": true
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "`AWS::IAM::ManagedPolicy.ManagedPolicyName`",
            "see": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-managedpolicy.html#cfn-iam-managedpolicy-managedpolicyname"
          },
          "immutable": true,
          "name": "managedPolicyName",
          "type": {
            "optional": true,
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "`AWS::IAM::ManagedPolicy.Path`",
            "see": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-managedpolicy.html#cfn-ec2-dhcpoptions-path"
          },
          "immutable": true,
          "name": "path",
          "type": {
            "optional": true,
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "`AWS::IAM::ManagedPolicy.Roles`",
            "see": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-managedpolicy.html#cfn-iam-managedpolicy-roles"
          },
          "immutable": true,
          "name": "roles",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            },
            "optional": true
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "`AWS::IAM::ManagedPolicy.Users`",
            "see": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-managedpolicy.html#cfn-iam-managedpolicy-users"
          },
          "immutable": true,
          "name": "users",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            },
            "optional": true
          }
        }
      ]
    },
    "@aws-cdk/aws-iam.CfnPolicy": {
      "assembly": "@aws-cdk/aws-iam",
      "base": {
        "fqn": "@aws-cdk/cdk.CfnResource"
      },
      "docs": {
        "cloudformationResource": "AWS::IAM::Policy",
        "comment": "A CloudFormation `AWS::IAM::Policy`",
        "see": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-policy.html"
      },
      "fqn": "@aws-cdk/aws-iam.CfnPolicy",
      "initializer": {
        "docs": {
          "comment": "Create a new `AWS::IAM::Policy`."
        },
        "initializer": true,
        "parameters": [
          {
            "docs": {
              "comment": "- scope in which this resource is defined"
            },
            "name": "scope",
            "type": {
              "fqn": "@aws-cdk/cdk.Construct"
            }
          },
          {
            "docs": {
              "comment": "- scoped id of the resource"
            },
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "docs": {
              "comment": "- resource properties"
            },
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-iam.CfnPolicyProps"
            }
          }
        ]
      },
      "kind": "class",
      "methods": [
        {
          "name": "renderProperties",
          "overrides": {
            "fqn": "@aws-cdk/cdk.CfnResource"
          },
          "parameters": [
            {
              "name": "properties",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "protected": true,
          "returns": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        }
      ],
      "name": "CfnPolicy",
      "properties": [
        {
          "const": true,
          "docs": {
            "comment": "The CloudFormation resource type name for this resource class."
          },
          "immutable": true,
          "name": "resourceTypeName",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "immutable": true,
          "name": "policyName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "immutable": true,
          "name": "propertyOverrides",
          "type": {
            "fqn": "@aws-cdk/aws-iam.CfnPolicyProps"
          }
        }
      ]
    },
    "@aws-cdk/aws-iam.CfnPolicyProps": {
      "assembly": "@aws-cdk/aws-iam",
      "datatype": true,
      "docs": {
        "comment": "Properties for defining a `AWS::IAM::Policy`",
        "see": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-policy.html"
      },
      "fqn": "@aws-cdk/aws-iam.CfnPolicyProps",
      "kind": "interface",
      "name": "CfnPolicyProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "comment": "`AWS::IAM::Policy.PolicyDocument`",
            "see": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-policy.html#cfn-iam-policy-policydocument"
          },
          "immutable": true,
          "name": "policyDocument",
          "type": {
            "union": {
              "types": [
                {
                  "primitive": "json"
                },
                {
                  "fqn": "@aws-cdk/cdk.Token"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "`AWS::IAM::Policy.PolicyName`",
            "see": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-policy.html#cfn-iam-policy-policyname"
          },
          "immutable": true,
          "name": "policyName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "`AWS::IAM::Policy.Groups`",
            "see": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-policy.html#cfn-iam-policy-groups"
          },
          "immutable": true,
          "name": "groups",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            },
            "optional": true
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "`AWS::IAM::Policy.Roles`",
            "see": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-policy.html#cfn-iam-policy-roles"
          },
          "immutable": true,
          "name": "roles",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            },
            "optional": true
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "`AWS::IAM::Policy.Users`",
            "see": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-policy.html#cfn-iam-policy-users"
          },
          "immutable": true,
          "name": "users",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            },
            "optional": true
          }
        }
      ]
    },
    "@aws-cdk/aws-iam.CfnRole": {
      "assembly": "@aws-cdk/aws-iam",
      "base": {
        "fqn": "@aws-cdk/cdk.CfnResource"
      },
      "docs": {
        "cloudformationResource": "AWS::IAM::Role",
        "comment": "A CloudFormation `AWS::IAM::Role`",
        "see": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html"
      },
      "fqn": "@aws-cdk/aws-iam.CfnRole",
      "initializer": {
        "docs": {
          "comment": "Create a new `AWS::IAM::Role`."
        },
        "initializer": true,
        "parameters": [
          {
            "docs": {
              "comment": "- scope in which this resource is defined"
            },
            "name": "scope",
            "type": {
              "fqn": "@aws-cdk/cdk.Construct"
            }
          },
          {
            "docs": {
              "comment": "- scoped id of the resource"
            },
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "docs": {
              "comment": "- resource properties"
            },
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-iam.CfnRoleProps"
            }
          }
        ]
      },
      "kind": "class",
      "methods": [
        {
          "name": "renderProperties",
          "overrides": {
            "fqn": "@aws-cdk/cdk.CfnResource"
          },
          "parameters": [
            {
              "name": "properties",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "protected": true,
          "returns": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        }
      ],
      "name": "CfnRole",
      "properties": [
        {
          "const": true,
          "docs": {
            "comment": "The CloudFormation resource type name for this resource class."
          },
          "immutable": true,
          "name": "resourceTypeName",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "immutable": true,
          "name": "propertyOverrides",
          "type": {
            "fqn": "@aws-cdk/aws-iam.CfnRoleProps"
          }
        },
        {
          "docs": {
            "cloudformationAttribute": "Arn"
          },
          "immutable": true,
          "name": "roleArn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "cloudformationAttribute": "RoleId"
          },
          "immutable": true,
          "name": "roleId",
          "type": {
            "primitive": "string"
          }
        },
        {
          "immutable": true,
          "name": "roleName",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "@aws-cdk/aws-iam.CfnRole.PolicyProperty": {
      "assembly": "@aws-cdk/aws-iam",
      "datatype": true,
      "docs": {
        "see": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-policy.html"
      },
      "fqn": "@aws-cdk/aws-iam.CfnRole.PolicyProperty",
      "kind": "interface",
      "name": "PolicyProperty",
      "namespace": "CfnRole",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "comment": "`CfnRole.PolicyProperty.PolicyDocument`",
            "see": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-policy.html#cfn-iam-policies-policydocument"
          },
          "immutable": true,
          "name": "policyDocument",
          "type": {
            "union": {
              "types": [
                {
                  "primitive": "json"
                },
                {
                  "fqn": "@aws-cdk/cdk.Token"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "`CfnRole.PolicyProperty.PolicyName`",
            "see": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-policy.html#cfn-iam-policies-policyname"
          },
          "immutable": true,
          "name": "policyName",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "@aws-cdk/aws-iam.CfnRoleProps": {
      "assembly": "@aws-cdk/aws-iam",
      "datatype": true,
      "docs": {
        "comment": "Properties for defining a `AWS::IAM::Role`",
        "see": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html"
      },
      "fqn": "@aws-cdk/aws-iam.CfnRoleProps",
      "kind": "interface",
      "name": "CfnRoleProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "comment": "`AWS::IAM::Role.AssumeRolePolicyDocument`",
            "see": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html#cfn-iam-role-assumerolepolicydocument"
          },
          "immutable": true,
          "name": "assumeRolePolicyDocument",
          "type": {
            "union": {
              "types": [
                {
                  "primitive": "json"
                },
                {
                  "fqn": "@aws-cdk/cdk.Token"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "`AWS::IAM::Role.ManagedPolicyArns`",
            "see": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html#cfn-iam-role-managepolicyarns"
          },
          "immutable": true,
          "name": "managedPolicyArns",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            },
            "optional": true
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "`AWS::IAM::Role.MaxSessionDuration`",
            "see": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html#cfn-iam-role-maxsessionduration"
          },
          "immutable": true,
          "name": "maxSessionDuration",
          "type": {
            "optional": true,
            "union": {
              "types": [
                {
                  "primitive": "number"
                },
                {
                  "fqn": "@aws-cdk/cdk.Token"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "`AWS::IAM::Role.Path`",
            "see": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html#cfn-iam-role-path"
          },
          "immutable": true,
          "name": "path",
          "type": {
            "optional": true,
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "`AWS::IAM::Role.PermissionsBoundary`",
            "see": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html#cfn-iam-role-permissionsboundary"
          },
          "immutable": true,
          "name": "permissionsBoundary",
          "type": {
            "optional": true,
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "`AWS::IAM::Role.Policies`",
            "see": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html#cfn-iam-role-policies"
          },
          "immutable": true,
          "name": "policies",
          "type": {
            "optional": true,
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/cdk.Token"
                },
                {
                  "collection": {
                    "elementtype": {
                      "union": {
                        "types": [
                          {
                            "fqn": "@aws-cdk/cdk.Token"
                          },
                          {
                            "fqn": "@aws-cdk/aws-iam.CfnRole.PolicyProperty"
                          }
                        ]
                      }
                    },
                    "kind": "array"
                  }
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "`AWS::IAM::Role.RoleName`",
            "see": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html#cfn-iam-role-rolename"
          },
          "immutable": true,
          "name": "roleName",
          "type": {
            "optional": true,
            "primitive": "string"
          }
        }
      ]
    },
    "@aws-cdk/aws-iam.CfnServiceLinkedRole": {
      "assembly": "@aws-cdk/aws-iam",
      "base": {
        "fqn": "@aws-cdk/cdk.CfnResource"
      },
      "docs": {
        "cloudformationResource": "AWS::IAM::ServiceLinkedRole",
        "comment": "A CloudFormation `AWS::IAM::ServiceLinkedRole`",
        "see": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-servicelinkedrole.html"
      },
      "fqn": "@aws-cdk/aws-iam.CfnServiceLinkedRole",
      "initializer": {
        "docs": {
          "comment": "Create a new `AWS::IAM::ServiceLinkedRole`."
        },
        "initializer": true,
        "parameters": [
          {
            "docs": {
              "comment": "- scope in which this resource is defined"
            },
            "name": "scope",
            "type": {
              "fqn": "@aws-cdk/cdk.Construct"
            }
          },
          {
            "docs": {
              "comment": "- scoped id of the resource"
            },
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "docs": {
              "comment": "- resource properties"
            },
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-iam.CfnServiceLinkedRoleProps"
            }
          }
        ]
      },
      "kind": "class",
      "methods": [
        {
          "name": "renderProperties",
          "overrides": {
            "fqn": "@aws-cdk/cdk.CfnResource"
          },
          "parameters": [
            {
              "name": "properties",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "protected": true,
          "returns": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        }
      ],
      "name": "CfnServiceLinkedRole",
      "properties": [
        {
          "const": true,
          "docs": {
            "comment": "The CloudFormation resource type name for this resource class."
          },
          "immutable": true,
          "name": "resourceTypeName",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "immutable": true,
          "name": "propertyOverrides",
          "type": {
            "fqn": "@aws-cdk/aws-iam.CfnServiceLinkedRoleProps"
          }
        }
      ]
    },
    "@aws-cdk/aws-iam.CfnServiceLinkedRoleProps": {
      "assembly": "@aws-cdk/aws-iam",
      "datatype": true,
      "docs": {
        "comment": "Properties for defining a `AWS::IAM::ServiceLinkedRole`",
        "see": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-servicelinkedrole.html"
      },
      "fqn": "@aws-cdk/aws-iam.CfnServiceLinkedRoleProps",
      "kind": "interface",
      "name": "CfnServiceLinkedRoleProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "comment": "`AWS::IAM::ServiceLinkedRole.AWSServiceName`",
            "see": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-servicelinkedrole.html#cfn-iam-servicelinkedrole-awsservicename"
          },
          "immutable": true,
          "name": "awsServiceName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "`AWS::IAM::ServiceLinkedRole.CustomSuffix`",
            "see": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-servicelinkedrole.html#cfn-iam-servicelinkedrole-customsuffix"
          },
          "immutable": true,
          "name": "customSuffix",
          "type": {
            "optional": true,
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "`AWS::IAM::ServiceLinkedRole.Description`",
            "see": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-servicelinkedrole.html#cfn-iam-servicelinkedrole-description"
          },
          "immutable": true,
          "name": "description",
          "type": {
            "optional": true,
            "primitive": "string"
          }
        }
      ]
    },
    "@aws-cdk/aws-iam.CfnUser": {
      "assembly": "@aws-cdk/aws-iam",
      "base": {
        "fqn": "@aws-cdk/cdk.CfnResource"
      },
      "docs": {
        "cloudformationResource": "AWS::IAM::User",
        "comment": "A CloudFormation `AWS::IAM::User`",
        "see": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-user.html"
      },
      "fqn": "@aws-cdk/aws-iam.CfnUser",
      "initializer": {
        "docs": {
          "comment": "Create a new `AWS::IAM::User`."
        },
        "initializer": true,
        "parameters": [
          {
            "docs": {
              "comment": "- scope in which this resource is defined"
            },
            "name": "scope",
            "type": {
              "fqn": "@aws-cdk/cdk.Construct"
            }
          },
          {
            "docs": {
              "comment": "- scoped id of the resource"
            },
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "docs": {
              "comment": "- resource properties"
            },
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-iam.CfnUserProps",
              "optional": true
            }
          }
        ]
      },
      "kind": "class",
      "methods": [
        {
          "name": "renderProperties",
          "overrides": {
            "fqn": "@aws-cdk/cdk.CfnResource"
          },
          "parameters": [
            {
              "name": "properties",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "protected": true,
          "returns": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        }
      ],
      "name": "CfnUser",
      "properties": [
        {
          "const": true,
          "docs": {
            "comment": "The CloudFormation resource type name for this resource class."
          },
          "immutable": true,
          "name": "resourceTypeName",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "immutable": true,
          "name": "propertyOverrides",
          "type": {
            "fqn": "@aws-cdk/aws-iam.CfnUserProps"
          }
        },
        {
          "docs": {
            "cloudformationAttribute": "Arn"
          },
          "immutable": true,
          "name": "userArn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "immutable": true,
          "name": "userName",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "@aws-cdk/aws-iam.CfnUser.LoginProfileProperty": {
      "assembly": "@aws-cdk/aws-iam",
      "datatype": true,
      "docs": {
        "see": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-user-loginprofile.html"
      },
      "fqn": "@aws-cdk/aws-iam.CfnUser.LoginProfileProperty",
      "kind": "interface",
      "name": "LoginProfileProperty",
      "namespace": "CfnUser",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "comment": "`CfnUser.LoginProfileProperty.Password`",
            "see": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-user-loginprofile.html#cfn-iam-user-loginprofile-password"
          },
          "immutable": true,
          "name": "password",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "`CfnUser.LoginProfileProperty.PasswordResetRequired`",
            "see": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-user-loginprofile.html#cfn-iam-user-loginprofile-passwordresetrequired"
          },
          "immutable": true,
          "name": "passwordResetRequired",
          "type": {
            "optional": true,
            "union": {
              "types": [
                {
                  "primitive": "boolean"
                },
                {
                  "fqn": "@aws-cdk/cdk.Token"
                }
              ]
            }
          }
        }
      ]
    },
    "@aws-cdk/aws-iam.CfnUser.PolicyProperty": {
      "assembly": "@aws-cdk/aws-iam",
      "datatype": true,
      "docs": {
        "see": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-policy.html"
      },
      "fqn": "@aws-cdk/aws-iam.CfnUser.PolicyProperty",
      "kind": "interface",
      "name": "PolicyProperty",
      "namespace": "CfnUser",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "comment": "`CfnUser.PolicyProperty.PolicyDocument`",
            "see": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-policy.html#cfn-iam-policies-policydocument"
          },
          "immutable": true,
          "name": "policyDocument",
          "type": {
            "union": {
              "types": [
                {
                  "primitive": "json"
                },
                {
                  "fqn": "@aws-cdk/cdk.Token"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "`CfnUser.PolicyProperty.PolicyName`",
            "see": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-policy.html#cfn-iam-policies-policyname"
          },
          "immutable": true,
          "name": "policyName",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "@aws-cdk/aws-iam.CfnUserProps": {
      "assembly": "@aws-cdk/aws-iam",
      "datatype": true,
      "docs": {
        "comment": "Properties for defining a `AWS::IAM::User`",
        "see": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-user.html"
      },
      "fqn": "@aws-cdk/aws-iam.CfnUserProps",
      "kind": "interface",
      "name": "CfnUserProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "comment": "`AWS::IAM::User.Groups`",
            "see": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-user.html#cfn-iam-user-groups"
          },
          "immutable": true,
          "name": "groups",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            },
            "optional": true
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "`AWS::IAM::User.LoginProfile`",
            "see": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-user.html#cfn-iam-user-loginprofile"
          },
          "immutable": true,
          "name": "loginProfile",
          "type": {
            "optional": true,
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/cdk.Token"
                },
                {
                  "fqn": "@aws-cdk/aws-iam.CfnUser.LoginProfileProperty"
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "`AWS::IAM::User.ManagedPolicyArns`",
            "see": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-user.html#cfn-iam-user-managepolicyarns"
          },
          "immutable": true,
          "name": "managedPolicyArns",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            },
            "optional": true
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "`AWS::IAM::User.Path`",
            "see": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-user.html#cfn-iam-user-path"
          },
          "immutable": true,
          "name": "path",
          "type": {
            "optional": true,
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "`AWS::IAM::User.PermissionsBoundary`",
            "see": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-user.html#cfn-iam-user-permissionsboundary"
          },
          "immutable": true,
          "name": "permissionsBoundary",
          "type": {
            "optional": true,
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "`AWS::IAM::User.Policies`",
            "see": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-user.html#cfn-iam-user-policies"
          },
          "immutable": true,
          "name": "policies",
          "type": {
            "optional": true,
            "union": {
              "types": [
                {
                  "fqn": "@aws-cdk/cdk.Token"
                },
                {
                  "collection": {
                    "elementtype": {
                      "union": {
                        "types": [
                          {
                            "fqn": "@aws-cdk/cdk.Token"
                          },
                          {
                            "fqn": "@aws-cdk/aws-iam.CfnUser.PolicyProperty"
                          }
                        ]
                      }
                    },
                    "kind": "array"
                  }
                }
              ]
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "`AWS::IAM::User.UserName`",
            "see": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-user.html#cfn-iam-user-username"
          },
          "immutable": true,
          "name": "userName",
          "type": {
            "optional": true,
            "primitive": "string"
          }
        }
      ]
    },
    "@aws-cdk/aws-iam.CfnUserToGroupAddition": {
      "assembly": "@aws-cdk/aws-iam",
      "base": {
        "fqn": "@aws-cdk/cdk.CfnResource"
      },
      "docs": {
        "cloudformationResource": "AWS::IAM::UserToGroupAddition",
        "comment": "A CloudFormation `AWS::IAM::UserToGroupAddition`",
        "see": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-addusertogroup.html"
      },
      "fqn": "@aws-cdk/aws-iam.CfnUserToGroupAddition",
      "initializer": {
        "docs": {
          "comment": "Create a new `AWS::IAM::UserToGroupAddition`."
        },
        "initializer": true,
        "parameters": [
          {
            "docs": {
              "comment": "- scope in which this resource is defined"
            },
            "name": "scope",
            "type": {
              "fqn": "@aws-cdk/cdk.Construct"
            }
          },
          {
            "docs": {
              "comment": "- scoped id of the resource"
            },
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "docs": {
              "comment": "- resource properties"
            },
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-iam.CfnUserToGroupAdditionProps"
            }
          }
        ]
      },
      "kind": "class",
      "methods": [
        {
          "name": "renderProperties",
          "overrides": {
            "fqn": "@aws-cdk/cdk.CfnResource"
          },
          "parameters": [
            {
              "name": "properties",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "protected": true,
          "returns": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        }
      ],
      "name": "CfnUserToGroupAddition",
      "properties": [
        {
          "const": true,
          "docs": {
            "comment": "The CloudFormation resource type name for this resource class."
          },
          "immutable": true,
          "name": "resourceTypeName",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "immutable": true,
          "name": "propertyOverrides",
          "type": {
            "fqn": "@aws-cdk/aws-iam.CfnUserToGroupAdditionProps"
          }
        }
      ]
    },
    "@aws-cdk/aws-iam.CfnUserToGroupAdditionProps": {
      "assembly": "@aws-cdk/aws-iam",
      "datatype": true,
      "docs": {
        "comment": "Properties for defining a `AWS::IAM::UserToGroupAddition`",
        "see": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-addusertogroup.html"
      },
      "fqn": "@aws-cdk/aws-iam.CfnUserToGroupAdditionProps",
      "kind": "interface",
      "name": "CfnUserToGroupAdditionProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "comment": "`AWS::IAM::UserToGroupAddition.GroupName`",
            "see": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-addusertogroup.html#cfn-iam-addusertogroup-groupname"
          },
          "immutable": true,
          "name": "groupName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "`AWS::IAM::UserToGroupAddition.Users`",
            "see": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-addusertogroup.html#cfn-iam-addusertogroup-users"
          },
          "immutable": true,
          "name": "users",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        }
      ]
    },
    "@aws-cdk/aws-iam.CommonGrantOptions": {
      "assembly": "@aws-cdk/aws-iam",
      "datatype": true,
      "docs": {
        "comment": "Basic options for a grant operation"
      },
      "fqn": "@aws-cdk/aws-iam.CommonGrantOptions",
      "kind": "interface",
      "name": "CommonGrantOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "comment": "The actions to grant"
          },
          "immutable": true,
          "name": "actions",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "The principal to grant to",
            "default": "if principal is undefined, no work is done."
          },
          "immutable": true,
          "name": "grantee",
          "type": {
            "fqn": "@aws-cdk/aws-iam.IGrantable"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "The resource ARNs to grant to"
          },
          "immutable": true,
          "name": "resourceArns",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        }
      ]
    },
    "@aws-cdk/aws-iam.CompositePrincipal": {
      "assembly": "@aws-cdk/aws-iam",
      "base": {
        "fqn": "@aws-cdk/aws-iam.PrincipalBase"
      },
      "fqn": "@aws-cdk/aws-iam.CompositePrincipal",
      "initializer": {
        "initializer": true,
        "parameters": [
          {
            "name": "principal",
            "type": {
              "fqn": "@aws-cdk/aws-iam.PrincipalBase"
            }
          },
          {
            "name": "additionalPrincipals",
            "type": {
              "fqn": "@aws-cdk/aws-iam.PrincipalBase"
            },
            "variadic": true
          }
        ],
        "variadic": true
      },
      "kind": "class",
      "methods": [
        {
          "name": "addPrincipals",
          "parameters": [
            {
              "name": "principals",
              "type": {
                "fqn": "@aws-cdk/aws-iam.PrincipalBase"
              },
              "variadic": true
            }
          ],
          "returns": {
            "fqn": "@aws-cdk/aws-iam.CompositePrincipal"
          },
          "variadic": true
        },
        {
          "docs": {
            "comment": "Returns a string representation of an object."
          },
          "name": "toString",
          "overrides": {
            "fqn": "@aws-cdk/aws-iam.PrincipalBase"
          },
          "returns": {
            "primitive": "string"
          }
        }
      ],
      "name": "CompositePrincipal",
      "properties": [
        {
          "docs": {
            "comment": "When this Principal is used in an AssumeRole policy, the action to use."
          },
          "immutable": true,
          "name": "assumeRoleAction",
          "overrides": {
            "fqn": "@aws-cdk/aws-iam.PrincipalBase"
          },
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "comment": "Return the policy fragment that identifies this principal in a Policy."
          },
          "immutable": true,
          "name": "policyFragment",
          "overrides": {
            "fqn": "@aws-cdk/aws-iam.PrincipalBase"
          },
          "type": {
            "fqn": "@aws-cdk/aws-iam.PrincipalPolicyFragment"
          }
        }
      ]
    },
    "@aws-cdk/aws-iam.FederatedPrincipal": {
      "assembly": "@aws-cdk/aws-iam",
      "base": {
        "fqn": "@aws-cdk/aws-iam.PrincipalBase"
      },
      "fqn": "@aws-cdk/aws-iam.FederatedPrincipal",
      "initializer": {
        "initializer": true,
        "parameters": [
          {
            "name": "federated",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "conditions",
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              }
            }
          },
          {
            "name": "assumeRoleAction",
            "type": {
              "optional": true,
              "primitive": "string"
            }
          }
        ]
      },
      "kind": "class",
      "methods": [
        {
          "docs": {
            "comment": "Returns a string representation of an object."
          },
          "name": "toString",
          "overrides": {
            "fqn": "@aws-cdk/aws-iam.PrincipalBase"
          },
          "returns": {
            "primitive": "string"
          }
        }
      ],
      "name": "FederatedPrincipal",
      "properties": [
        {
          "docs": {
            "comment": "When this Principal is used in an AssumeRole policy, the action to use."
          },
          "immutable": true,
          "name": "assumeRoleAction",
          "overrides": {
            "fqn": "@aws-cdk/aws-iam.PrincipalBase"
          },
          "type": {
            "primitive": "string"
          }
        },
        {
          "immutable": true,
          "name": "conditions",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        },
        {
          "immutable": true,
          "name": "federated",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "comment": "Return the policy fragment that identifies this principal in a Policy."
          },
          "immutable": true,
          "name": "policyFragment",
          "overrides": {
            "fqn": "@aws-cdk/aws-iam.PrincipalBase"
          },
          "type": {
            "fqn": "@aws-cdk/aws-iam.PrincipalPolicyFragment"
          }
        }
      ]
    },
    "@aws-cdk/aws-iam.Grant": {
      "assembly": "@aws-cdk/aws-iam",
      "docs": {
        "comment": "Result of a grant() operation\n\nThis class is not instantiable by consumers on purpose, so that they will be\nrequired to call the Grant factory functions."
      },
      "fqn": "@aws-cdk/aws-iam.Grant",
      "kind": "class",
      "methods": [
        {
          "docs": {
            "comment": "Try to grant the given permissions to the given principal\n\nAbsence of a principal leads to a warning, but failing to add\nthe permissions to a present principal is not an error."
          },
          "name": "addToPrincipal",
          "parameters": [
            {
              "name": "options",
              "type": {
                "fqn": "@aws-cdk/aws-iam.GrantOnPrincipalOptions"
              }
            }
          ],
          "returns": {
            "fqn": "@aws-cdk/aws-iam.Grant"
          },
          "static": true
        },
        {
          "docs": {
            "comment": "Add a grant both on the principal and on the resource\n\nAs long as any principal is given, granting on the pricipal may fail (in\ncase of a non-identity principal), but granting on the resource will\nnever fail.\n\nStatement will be the resource statement."
          },
          "name": "addToPrincipalAndResource",
          "parameters": [
            {
              "name": "options",
              "type": {
                "fqn": "@aws-cdk/aws-iam.GrantOnPrincipalAndResourceOptions"
              }
            }
          ],
          "returns": {
            "fqn": "@aws-cdk/aws-iam.Grant"
          },
          "static": true
        },
        {
          "docs": {
            "comment": "Grant the given permissions to the principal\n\nThe permissions will be added to the principal policy primarily, falling\nback to the resource policy if necessary. The permissions must be granted\nsomewhere.\n\n- Trying to grant permissions to a principal that does not admit adding to\n   the principal policy while not providing a resource with a resource policy\n   is an error.\n- Trying to grant permissions to an absent principal (possible in the\n   case of imported resources) leads to a warning being added to the\n   resource construct."
          },
          "name": "addToPrincipalOrResource",
          "parameters": [
            {
              "name": "options",
              "type": {
                "fqn": "@aws-cdk/aws-iam.GrantWithResourceOptions"
              }
            }
          ],
          "returns": {
            "fqn": "@aws-cdk/aws-iam.Grant"
          },
          "static": true
        },
        {
          "docs": {
            "comment": "Throw an error if this grant wasn't successful"
          },
          "name": "assertSuccess"
        }
      ],
      "name": "Grant",
      "properties": [
        {
          "docs": {
            "comment": "Whether the grant operation was successful"
          },
          "immutable": true,
          "name": "success",
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "docs": {
            "comment": "The statement that was added to the principal's policy\n\nCan be accessed to (e.g.) add additional conditions to the statement."
          },
          "immutable": true,
          "name": "principalStatement",
          "type": {
            "fqn": "@aws-cdk/aws-iam.PolicyStatement",
            "optional": true
          }
        },
        {
          "docs": {
            "comment": "The statement that was added to the resource policy\n\nCan be accessed to (e.g.) add additional conditions to the statement."
          },
          "immutable": true,
          "name": "resourceStatement",
          "type": {
            "fqn": "@aws-cdk/aws-iam.PolicyStatement",
            "optional": true
          }
        }
      ]
    },
    "@aws-cdk/aws-iam.GrantOnPrincipalAndResourceOptions": {
      "assembly": "@aws-cdk/aws-iam",
      "datatype": true,
      "docs": {
        "comment": "Options for a grant operation to both identity and resource"
      },
      "fqn": "@aws-cdk/aws-iam.GrantOnPrincipalAndResourceOptions",
      "interfaces": [
        {
          "fqn": "@aws-cdk/aws-iam.CommonGrantOptions"
        }
      ],
      "kind": "interface",
      "name": "GrantOnPrincipalAndResourceOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "comment": "The resource with a resource policy\n\nThe statement will always be added to the resource policy."
          },
          "immutable": true,
          "name": "resource",
          "type": {
            "fqn": "@aws-cdk/aws-iam.IResourceWithPolicy"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "When referring to the resource in a resource policy, use this as ARN.\n\n(Depending on the resource type, this needs to be '*' in a resource policy).",
            "default": "Same as regular resource ARNs"
          },
          "immutable": true,
          "name": "resourceSelfArns",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            },
            "optional": true
          }
        }
      ]
    },
    "@aws-cdk/aws-iam.GrantOnPrincipalOptions": {
      "assembly": "@aws-cdk/aws-iam",
      "datatype": true,
      "docs": {
        "comment": "Options for a grant operation that only applies to principals"
      },
      "fqn": "@aws-cdk/aws-iam.GrantOnPrincipalOptions",
      "interfaces": [
        {
          "fqn": "@aws-cdk/aws-iam.CommonGrantOptions"
        }
      ],
      "kind": "interface",
      "name": "GrantOnPrincipalOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "comment": "Construct to report warnings on in case grant could not be registered"
          },
          "immutable": true,
          "name": "scope",
          "type": {
            "fqn": "@aws-cdk/cdk.IConstruct",
            "optional": true
          }
        }
      ]
    },
    "@aws-cdk/aws-iam.GrantWithResourceOptions": {
      "assembly": "@aws-cdk/aws-iam",
      "datatype": true,
      "docs": {
        "comment": "Options for a grant operation"
      },
      "fqn": "@aws-cdk/aws-iam.GrantWithResourceOptions",
      "interfaces": [
        {
          "fqn": "@aws-cdk/aws-iam.CommonGrantOptions"
        }
      ],
      "kind": "interface",
      "name": "GrantWithResourceOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "comment": "The resource with a resource policy\n\nThe statement will be added to the resource policy if it couldn't be\nadded to the principal policy."
          },
          "immutable": true,
          "name": "resource",
          "type": {
            "fqn": "@aws-cdk/aws-iam.IResourceWithPolicy"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "When referring to the resource in a resource policy, use this as ARN.\n\n(Depending on the resource type, this needs to be '*' in a resource policy).",
            "default": "Same as regular resource ARNs"
          },
          "immutable": true,
          "name": "resourceSelfArns",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            },
            "optional": true
          }
        }
      ]
    },
    "@aws-cdk/aws-iam.Group": {
      "assembly": "@aws-cdk/aws-iam",
      "base": {
        "fqn": "@aws-cdk/cdk.Construct"
      },
      "fqn": "@aws-cdk/aws-iam.Group",
      "initializer": {
        "initializer": true,
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "@aws-cdk/cdk.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-iam.GroupProps",
              "optional": true
            }
          }
        ]
      },
      "interfaces": [
        {
          "fqn": "@aws-cdk/aws-iam.IIdentity"
        }
      ],
      "kind": "class",
      "methods": [
        {
          "docs": {
            "comment": "Adds an IAM statement to the default policy."
          },
          "name": "addToPolicy",
          "overrides": {
            "fqn": "@aws-cdk/aws-iam.IPrincipal"
          },
          "parameters": [
            {
              "name": "statement",
              "type": {
                "fqn": "@aws-cdk/aws-iam.PolicyStatement"
              }
            }
          ],
          "returns": {
            "primitive": "boolean"
          }
        },
        {
          "docs": {
            "comment": "Adds a user to this group."
          },
          "name": "addUser",
          "parameters": [
            {
              "name": "user",
              "type": {
                "fqn": "@aws-cdk/aws-iam.User"
              }
            }
          ]
        },
        {
          "docs": {
            "comment": "Attaches a policy to this group."
          },
          "name": "attachInlinePolicy",
          "overrides": {
            "fqn": "@aws-cdk/aws-iam.IIdentity"
          },
          "parameters": [
            {
              "docs": {
                "comment": "The policy to attach."
              },
              "name": "policy",
              "type": {
                "fqn": "@aws-cdk/aws-iam.Policy"
              }
            }
          ]
        },
        {
          "docs": {
            "comment": "Attaches a managed policy to this group."
          },
          "name": "attachManagedPolicy",
          "overrides": {
            "fqn": "@aws-cdk/aws-iam.IIdentity"
          },
          "parameters": [
            {
              "docs": {
                "comment": "The ARN of the managed policy to attach."
              },
              "name": "arn",
              "type": {
                "primitive": "string"
              }
            }
          ]
        }
      ],
      "name": "Group",
      "properties": [
        {
          "docs": {
            "comment": "When this Principal is used in an AssumeRole policy, the action to use."
          },
          "immutable": true,
          "name": "assumeRoleAction",
          "overrides": {
            "fqn": "@aws-cdk/aws-iam.IPrincipal"
          },
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "comment": "The principal to grant permissions to"
          },
          "immutable": true,
          "name": "grantPrincipal",
          "overrides": {
            "fqn": "@aws-cdk/aws-iam.IGrantable"
          },
          "type": {
            "fqn": "@aws-cdk/aws-iam.IPrincipal"
          }
        },
        {
          "docs": {
            "comment": "The ARN of this group."
          },
          "immutable": true,
          "name": "groupArn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "comment": "The runtime name of this group."
          },
          "immutable": true,
          "name": "groupName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "comment": "Return the policy fragment that identifies this principal in a Policy."
          },
          "immutable": true,
          "name": "policyFragment",
          "overrides": {
            "fqn": "@aws-cdk/aws-iam.IPrincipal"
          },
          "type": {
            "fqn": "@aws-cdk/aws-iam.PrincipalPolicyFragment"
          }
        }
      ]
    },
    "@aws-cdk/aws-iam.GroupProps": {
      "assembly": "@aws-cdk/aws-iam",
      "datatype": true,
      "fqn": "@aws-cdk/aws-iam.GroupProps",
      "kind": "interface",
      "name": "GroupProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "comment": "A name for the IAM group. For valid values, see the GroupName parameter\nfor the CreateGroup action in the IAM API Reference. If you don't specify\na name, AWS CloudFormation generates a unique physical ID and uses that\nID for the group name.\n\nIf you specify a name, you must specify the CAPABILITY_NAMED_IAM value to\nacknowledge your template's capabilities. For more information, see\nAcknowledging IAM Resources in AWS CloudFormation Templates.",
            "default": "Generated by CloudFormation (recommended)"
          },
          "immutable": true,
          "name": "groupName",
          "type": {
            "optional": true,
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "A list of ARNs for managed policies associated with group.",
            "default": "No managed policies."
          },
          "immutable": true,
          "name": "managedPolicyArns",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "array"
            },
            "optional": true
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "The path to the group. For more information about paths, see [IAM\nIdentifiers](http://docs.aws.amazon.com/IAM/latest/UserGuide/index.html?Using_Identifiers.html)\nin the IAM User Guide."
          },
          "immutable": true,
          "name": "path",
          "type": {
            "optional": true,
            "primitive": "string"
          }
        }
      ]
    },
    "@aws-cdk/aws-iam.IGrantable": {
      "assembly": "@aws-cdk/aws-iam",
      "docs": {
        "comment": "Any object that has an associated principal that a permission can be granted to"
      },
      "fqn": "@aws-cdk/aws-iam.IGrantable",
      "kind": "interface",
      "name": "IGrantable",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "comment": "The principal to grant permissions to"
          },
          "immutable": true,
          "name": "grantPrincipal",
          "type": {
            "fqn": "@aws-cdk/aws-iam.IPrincipal"
          }
        }
      ]
    },
    "@aws-cdk/aws-iam.IIdentity": {
      "assembly": "@aws-cdk/aws-iam",
      "docs": {
        "comment": "A construct that represents an IAM principal, such as a user, group or role."
      },
      "fqn": "@aws-cdk/aws-iam.IIdentity",
      "interfaces": [
        {
          "fqn": "@aws-cdk/aws-iam.IPrincipal"
        },
        {
          "fqn": "@aws-cdk/cdk.IConstruct"
        }
      ],
      "kind": "interface",
      "methods": [
        {
          "abstract": true,
          "docs": {
            "comment": "Attaches an inline policy to this principal.\nThis is the same as calling `policy.addToXxx(principal)`."
          },
          "name": "attachInlinePolicy",
          "parameters": [
            {
              "docs": {
                "comment": "The policy resource to attach to this principal."
              },
              "name": "policy",
              "type": {
                "fqn": "@aws-cdk/aws-iam.Policy"
              }
            }
          ]
        },
        {
          "abstract": true,
          "docs": {
            "comment": "Attaches a managed policy to this principal."
          },
          "name": "attachManagedPolicy",
          "parameters": [
            {
              "docs": {
                "comment": "The ARN of the managed policy"
              },
              "name": "arn",
              "type": {
                "primitive": "string"
              }
            }
          ]
        }
      ],
      "name": "IIdentity"
    },
    "@aws-cdk/aws-iam.IPrincipal": {
      "assembly": "@aws-cdk/aws-iam",
      "docs": {
        "comment": "Represents a logical IAM principal.\n\nAn IPrincipal describes a logical entity that can perform AWS API calls\nagainst sets of resources, optionally under certain conditions.\n\nExamples of simple principals are IAM objects that you create, such\nas Users or Roles.\n\nAn example of a more complex principals is a `ServicePrincipal` (such as\n`new ServicePrincipal(\"sns.amazonaws.com\")`, which represents the Simple\nNotifications Service).\n\nA single logical Principal may also map to a set of physical principals.\nFor example, `new OrganizationPrincipal('o-1234')` represents all\nidentities that are part of the given AWS Organization."
      },
      "fqn": "@aws-cdk/aws-iam.IPrincipal",
      "interfaces": [
        {
          "fqn": "@aws-cdk/aws-iam.IGrantable"
        }
      ],
      "kind": "interface",
      "methods": [
        {
          "abstract": true,
          "docs": {
            "comment": "Add to the policy of this principal.",
            "return": "true if the statement was added, false if the principal in\nquestion does not have a policy document to add the statement to."
          },
          "name": "addToPolicy",
          "parameters": [
            {
              "name": "statement",
              "type": {
                "fqn": "@aws-cdk/aws-iam.PolicyStatement"
              }
            }
          ],
          "returns": {
            "primitive": "boolean"
          }
        }
      ],
      "name": "IPrincipal",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "comment": "When this Principal is used in an AssumeRole policy, the action to use."
          },
          "immutable": true,
          "name": "assumeRoleAction",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "Return the policy fragment that identifies this principal in a Policy."
          },
          "immutable": true,
          "name": "policyFragment",
          "type": {
            "fqn": "@aws-cdk/aws-iam.PrincipalPolicyFragment"
          }
        }
      ]
    },
    "@aws-cdk/aws-iam.IResourceWithPolicy": {
      "assembly": "@aws-cdk/aws-iam",
      "docs": {
        "comment": "A resource with a resource policy that can be added to"
      },
      "fqn": "@aws-cdk/aws-iam.IResourceWithPolicy",
      "interfaces": [
        {
          "fqn": "@aws-cdk/cdk.IConstruct"
        }
      ],
      "kind": "interface",
      "methods": [
        {
          "abstract": true,
          "docs": {
            "comment": "Add a statement to the resource's resource policy"
          },
          "name": "addToResourcePolicy",
          "parameters": [
            {
              "name": "statement",
              "type": {
                "fqn": "@aws-cdk/aws-iam.PolicyStatement"
              }
            }
          ]
        }
      ],
      "name": "IResourceWithPolicy"
    },
    "@aws-cdk/aws-iam.IRole": {
      "assembly": "@aws-cdk/aws-iam",
      "docs": {
        "comment": "A Role object"
      },
      "fqn": "@aws-cdk/aws-iam.IRole",
      "interfaces": [
        {
          "fqn": "@aws-cdk/aws-iam.IIdentity"
        }
      ],
      "kind": "interface",
      "methods": [
        {
          "abstract": true,
          "docs": {
            "comment": "Export this role to another stack."
          },
          "name": "export",
          "returns": {
            "fqn": "@aws-cdk/aws-iam.RoleImportProps"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "Grant the actions defined in actions to the identity Principal on this resource."
          },
          "name": "grant",
          "parameters": [
            {
              "name": "grantee",
              "type": {
                "fqn": "@aws-cdk/aws-iam.IPrincipal"
              }
            },
            {
              "name": "actions",
              "type": {
                "primitive": "string"
              },
              "variadic": true
            }
          ],
          "returns": {
            "fqn": "@aws-cdk/aws-iam.Grant"
          },
          "variadic": true
        },
        {
          "abstract": true,
          "docs": {
            "comment": "Grant permissions to the given principal to pass this role."
          },
          "name": "grantPassRole",
          "parameters": [
            {
              "name": "grantee",
              "type": {
                "fqn": "@aws-cdk/aws-iam.IPrincipal"
              }
            }
          ],
          "returns": {
            "fqn": "@aws-cdk/aws-iam.Grant"
          }
        }
      ],
      "name": "IRole",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "comment": "Returns the ARN of this role."
          },
          "immutable": true,
          "name": "roleArn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "Returns the stable and unique string identifying the role. For example,\nAIDAJQABLZS4A3QDU576Q."
          },
          "immutable": true,
          "name": "roleId",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "Returns the name of this role."
          },
          "immutable": true,
          "name": "roleName",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "@aws-cdk/aws-iam.ImportedResourcePrincipal": {
      "assembly": "@aws-cdk/aws-iam",
      "docs": {
        "comment": "A principal associated with an imported resource\n\nSome resources have roles associated with them which they assume, such as\nLambda Functions, CodeBuild projects, StepFunctions machines, etc.\n\nWhen those resources are imported, their actual roles are not always\nimported with them. When that happens, we use an instance of this class\ninstead, which will add user warnings when statements are attempted to be\nadded to it."
      },
      "fqn": "@aws-cdk/aws-iam.ImportedResourcePrincipal",
      "initializer": {
        "initializer": true,
        "parameters": [
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-iam.ImportedResourcePrincipalProps"
            }
          }
        ]
      },
      "interfaces": [
        {
          "fqn": "@aws-cdk/aws-iam.IPrincipal"
        }
      ],
      "kind": "class",
      "methods": [
        {
          "docs": {
            "comment": "Add to the policy of this principal."
          },
          "name": "addToPolicy",
          "overrides": {
            "fqn": "@aws-cdk/aws-iam.IPrincipal"
          },
          "parameters": [
            {
              "name": "statement",
              "type": {
                "fqn": "@aws-cdk/aws-iam.PolicyStatement"
              }
            }
          ],
          "returns": {
            "primitive": "boolean"
          }
        }
      ],
      "name": "ImportedResourcePrincipal",
      "properties": [
        {
          "docs": {
            "comment": "When this Principal is used in an AssumeRole policy, the action to use."
          },
          "immutable": true,
          "name": "assumeRoleAction",
          "overrides": {
            "fqn": "@aws-cdk/aws-iam.IPrincipal"
          },
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "comment": "The principal to grant permissions to"
          },
          "immutable": true,
          "name": "grantPrincipal",
          "overrides": {
            "fqn": "@aws-cdk/aws-iam.IGrantable"
          },
          "type": {
            "fqn": "@aws-cdk/aws-iam.IPrincipal"
          }
        },
        {
          "docs": {
            "comment": "Return the policy fragment that identifies this principal in a Policy."
          },
          "immutable": true,
          "name": "policyFragment",
          "overrides": {
            "fqn": "@aws-cdk/aws-iam.IPrincipal"
          },
          "type": {
            "fqn": "@aws-cdk/aws-iam.PrincipalPolicyFragment"
          }
        }
      ]
    },
    "@aws-cdk/aws-iam.ImportedResourcePrincipalProps": {
      "assembly": "@aws-cdk/aws-iam",
      "datatype": true,
      "docs": {
        "comment": "Properties for an ImportedResourcePrincipal"
      },
      "fqn": "@aws-cdk/aws-iam.ImportedResourcePrincipalProps",
      "kind": "interface",
      "name": "ImportedResourcePrincipalProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "comment": "The resource the role proxy is for"
          },
          "immutable": true,
          "name": "resource",
          "type": {
            "fqn": "@aws-cdk/cdk.IConstruct"
          }
        }
      ]
    },
    "@aws-cdk/aws-iam.LazyRole": {
      "assembly": "@aws-cdk/aws-iam",
      "base": {
        "fqn": "@aws-cdk/cdk.Construct"
      },
      "docs": {
        "comment": "An IAM role that only gets attached to the construct tree once it gets used, not before\n\nThis construct can be used to simplify logic in other constructs\nwhich need to create a role but only if certain configurations occur\n(such as when AutoScaling is configured). The role can be configured in one\nplace, but if it never gets used it doesn't get instantiated and will\nnot be synthesized or deployed."
      },
      "fqn": "@aws-cdk/aws-iam.LazyRole",
      "initializer": {
        "initializer": true,
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "@aws-cdk/cdk.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-iam.RoleProps"
            }
          }
        ]
      },
      "interfaces": [
        {
          "fqn": "@aws-cdk/aws-iam.IRole"
        }
      ],
      "kind": "class",
      "methods": [
        {
          "docs": {
            "comment": "Adds a permission to the role's default policy document.\nIf there is no default policy attached to this role, it will be created."
          },
          "name": "addToPolicy",
          "overrides": {
            "fqn": "@aws-cdk/aws-iam.IPrincipal"
          },
          "parameters": [
            {
              "name": "statement",
              "type": {
                "fqn": "@aws-cdk/aws-iam.PolicyStatement"
              }
            }
          ],
          "returns": {
            "primitive": "boolean"
          }
        },
        {
          "docs": {
            "comment": "Attaches a policy to this role."
          },
          "name": "attachInlinePolicy",
          "overrides": {
            "fqn": "@aws-cdk/aws-iam.IIdentity"
          },
          "parameters": [
            {
              "docs": {
                "comment": "The policy to attach"
              },
              "name": "policy",
              "type": {
                "fqn": "@aws-cdk/aws-iam.Policy"
              }
            }
          ]
        },
        {
          "docs": {
            "comment": "Attaches a managed policy to this role."
          },
          "name": "attachManagedPolicy",
          "overrides": {
            "fqn": "@aws-cdk/aws-iam.IIdentity"
          },
          "parameters": [
            {
              "docs": {
                "comment": "The ARN of the managed policy to attach."
              },
              "name": "arn",
              "type": {
                "primitive": "string"
              }
            }
          ]
        },
        {
          "docs": {
            "comment": "Export this role to another stack."
          },
          "name": "export",
          "overrides": {
            "fqn": "@aws-cdk/aws-iam.IRole"
          },
          "returns": {
            "fqn": "@aws-cdk/aws-iam.RoleImportProps"
          }
        },
        {
          "docs": {
            "comment": "Grant the actions defined in actions to the identity Principal on this resource."
          },
          "name": "grant",
          "overrides": {
            "fqn": "@aws-cdk/aws-iam.IRole"
          },
          "parameters": [
            {
              "name": "identity",
              "type": {
                "fqn": "@aws-cdk/aws-iam.IPrincipal"
              }
            },
            {
              "name": "actions",
              "type": {
                "primitive": "string"
              },
              "variadic": true
            }
          ],
          "returns": {
            "fqn": "@aws-cdk/aws-iam.Grant"
          },
          "variadic": true
        },
        {
          "docs": {
            "comment": "Grant permissions to the given principal to pass this role."
          },
          "name": "grantPassRole",
          "overrides": {
            "fqn": "@aws-cdk/aws-iam.IRole"
          },
          "parameters": [
            {
              "name": "identity",
              "type": {
                "fqn": "@aws-cdk/aws-iam.IPrincipal"
              }
            }
          ],
          "returns": {
            "fqn": "@aws-cdk/aws-iam.Grant"
          }
        }
      ],
      "name": "LazyRole",
      "properties": [
        {
          "docs": {
            "comment": "When this Principal is used in an AssumeRole policy, the action to use."
          },
          "immutable": true,
          "name": "assumeRoleAction",
          "overrides": {
            "fqn": "@aws-cdk/aws-iam.IPrincipal"
          },
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "comment": "The principal to grant permissions to"
          },
          "immutable": true,
          "name": "grantPrincipal",
          "overrides": {
            "fqn": "@aws-cdk/aws-iam.IGrantable"
          },
          "type": {
            "fqn": "@aws-cdk/aws-iam.IPrincipal"
          }
        },
        {
          "docs": {
            "comment": "Return the policy fragment that identifies this principal in a Policy."
          },
          "immutable": true,
          "name": "policyFragment",
          "overrides": {
            "fqn": "@aws-cdk/aws-iam.IPrincipal"
          },
          "type": {
            "fqn": "@aws-cdk/aws-iam.PrincipalPolicyFragment"
          }
        },
        {
          "immutable": true,
          "name": "props",
          "type": {
            "fqn": "@aws-cdk/aws-iam.RoleProps"
          }
        },
        {
          "docs": {
            "comment": "Returns the ARN of this role."
          },
          "immutable": true,
          "name": "roleArn",
          "overrides": {
            "fqn": "@aws-cdk/aws-iam.IRole"
          },
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "comment": "Returns the stable and unique string identifying the role. For example,\nAIDAJQABLZS4A3QDU576Q."
          },
          "immutable": true,
          "name": "roleId",
          "overrides": {
            "fqn": "@aws-cdk/aws-iam.IRole"
          },
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "comment": "Returns the name of this role."
          },
          "immutable": true,
          "name": "roleName",
          "overrides": {
            "fqn": "@aws-cdk/aws-iam.IRole"
          },
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "@aws-cdk/aws-iam.OrganizationPrincipal": {
      "assembly": "@aws-cdk/aws-iam",
      "base": {
        "fqn": "@aws-cdk/aws-iam.PrincipalBase"
      },
      "docs": {
        "comment": "A principal that represents an AWS Organization"
      },
      "fqn": "@aws-cdk/aws-iam.OrganizationPrincipal",
      "initializer": {
        "initializer": true,
        "parameters": [
          {
            "name": "organizationId",
            "type": {
              "primitive": "string"
            }
          }
        ]
      },
      "kind": "class",
      "methods": [
        {
          "docs": {
            "comment": "Returns a string representation of an object."
          },
          "name": "toString",
          "overrides": {
            "fqn": "@aws-cdk/aws-iam.PrincipalBase"
          },
          "returns": {
            "primitive": "string"
          }
        }
      ],
      "name": "OrganizationPrincipal",
      "properties": [
        {
          "immutable": true,
          "name": "organizationId",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "comment": "Return the policy fragment that identifies this principal in a Policy."
          },
          "immutable": true,
          "name": "policyFragment",
          "overrides": {
            "fqn": "@aws-cdk/aws-iam.PrincipalBase"
          },
          "type": {
            "fqn": "@aws-cdk/aws-iam.PrincipalPolicyFragment"
          }
        }
      ]
    },
    "@aws-cdk/aws-iam.Policy": {
      "assembly": "@aws-cdk/aws-iam",
      "base": {
        "fqn": "@aws-cdk/cdk.Construct"
      },
      "docs": {
        "comment": "The AWS::IAM::Policy resource associates an IAM policy with IAM users, roles,\nor groups. For more information about IAM policies, see [Overview of IAM\nPolicies](http://docs.aws.amazon.com/IAM/latest/UserGuide/policies_overview.html)\nin the IAM User Guide guide."
      },
      "fqn": "@aws-cdk/aws-iam.Policy",
      "initializer": {
        "initializer": true,
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "@aws-cdk/cdk.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-iam.PolicyProps",
              "optional": true
            }
          }
        ]
      },
      "kind": "class",
      "methods": [
        {
          "docs": {
            "comment": "Adds a statement to the policy document."
          },
          "name": "addStatement",
          "parameters": [
            {
              "name": "statement",
              "type": {
                "fqn": "@aws-cdk/aws-iam.PolicyStatement"
              }
            }
          ]
        },
        {
          "docs": {
            "comment": "Attaches this policy to a group."
          },
          "name": "attachToGroup",
          "parameters": [
            {
              "name": "group",
              "type": {
                "fqn": "@aws-cdk/aws-iam.Group"
              }
            }
          ]
        },
        {
          "docs": {
            "comment": "Attaches this policy to a role."
          },
          "name": "attachToRole",
          "parameters": [
            {
              "name": "role",
              "type": {
                "fqn": "@aws-cdk/aws-iam.IRole"
              }
            }
          ]
        },
        {
          "docs": {
            "comment": "Attaches this policy to a user."
          },
          "name": "attachToUser",
          "parameters": [
            {
              "name": "user",
              "type": {
                "fqn": "@aws-cdk/aws-iam.User"
              }
            }
          ]
        },
        {
          "docs": {
            "comment": "Validate the current construct.\n\nThis method can be implemented by derived constructs in order to perform\nvalidation logic. It is called on all constructs before synthesis."
          },
          "name": "validate",
          "overrides": {
            "fqn": "@aws-cdk/cdk.Construct"
          },
          "protected": true,
          "returns": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            }
          }
        }
      ],
      "name": "Policy",
      "properties": [
        {
          "docs": {
            "comment": "The policy document."
          },
          "immutable": true,
          "name": "document",
          "type": {
            "fqn": "@aws-cdk/aws-iam.PolicyDocument"
          }
        },
        {
          "docs": {
            "comment": "The name of this policy."
          },
          "immutable": true,
          "name": "policyName",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "@aws-cdk/aws-iam.PolicyDocument": {
      "assembly": "@aws-cdk/aws-iam",
      "base": {
        "fqn": "@aws-cdk/cdk.Token"
      },
      "fqn": "@aws-cdk/aws-iam.PolicyDocument",
      "initializer": {
        "docs": {
          "comment": "Creates a new IAM policy document."
        },
        "initializer": true,
        "parameters": [
          {
            "name": "baseDocument",
            "type": {
              "optional": true,
              "primitive": "any"
            }
          }
        ]
      },
      "kind": "class",
      "methods": [
        {
          "name": "addStatement",
          "parameters": [
            {
              "name": "statement",
              "type": {
                "fqn": "@aws-cdk/aws-iam.PolicyStatement"
              }
            }
          ],
          "returns": {
            "fqn": "@aws-cdk/aws-iam.PolicyDocument"
          }
        },
        {
          "name": "resolve",
          "overrides": {
            "fqn": "@aws-cdk/cdk.Token"
          },
          "parameters": [
            {
              "name": "_context",
              "type": {
                "fqn": "@aws-cdk/cdk.ResolveContext"
              }
            }
          ],
          "returns": {
            "primitive": "any"
          }
        }
      ],
      "name": "PolicyDocument",
      "properties": [
        {
          "immutable": true,
          "name": "isEmpty",
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "docs": {
            "comment": "The number of statements already added to this policy.\nCan be used, for example, to generate uniuqe \"sid\"s within the policy."
          },
          "immutable": true,
          "name": "statementCount",
          "type": {
            "primitive": "number"
          }
        },
        {
          "immutable": true,
          "name": "baseDocument",
          "type": {
            "optional": true,
            "primitive": "any"
          }
        }
      ]
    },
    "@aws-cdk/aws-iam.PolicyProps": {
      "assembly": "@aws-cdk/aws-iam",
      "datatype": true,
      "fqn": "@aws-cdk/aws-iam.PolicyProps",
      "kind": "interface",
      "name": "PolicyProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "comment": "Groups to attach this policy to.\nYou can also use `attachToGroup(group)` to attach this policy to a group."
          },
          "immutable": true,
          "name": "groups",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-iam.Group"
              },
              "kind": "array"
            },
            "optional": true
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "The name of the policy. If you specify multiple policies for an entity,\nspecify unique names. For example, if you specify a list of policies for\nan IAM role, each policy must have a unique name.",
            "default": "Uses the logical ID of the policy resource, which is ensured to\nbe unique within the stack."
          },
          "immutable": true,
          "name": "policyName",
          "type": {
            "optional": true,
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "Roles to attach this policy to.\nYou can also use `attachToRole(role)` to attach this policy to a role."
          },
          "immutable": true,
          "name": "roles",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-iam.IRole"
              },
              "kind": "array"
            },
            "optional": true
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "Initial set of permissions to add to this policy document.\nYou can also use `addPermission(statement)` to add permissions later."
          },
          "immutable": true,
          "name": "statements",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-iam.PolicyStatement"
              },
              "kind": "array"
            },
            "optional": true
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "Users to attach this policy to.\nYou can also use `attachToUser(user)` to attach this policy to a user."
          },
          "immutable": true,
          "name": "users",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-iam.User"
              },
              "kind": "array"
            },
            "optional": true
          }
        }
      ]
    },
    "@aws-cdk/aws-iam.PolicyStatement": {
      "assembly": "@aws-cdk/aws-iam",
      "base": {
        "fqn": "@aws-cdk/cdk.Token"
      },
      "docs": {
        "comment": "Represents a statement in an IAM policy document."
      },
      "fqn": "@aws-cdk/aws-iam.PolicyStatement",
      "initializer": {
        "initializer": true,
        "parameters": [
          {
            "name": "effect",
            "type": {
              "fqn": "@aws-cdk/aws-iam.PolicyStatementEffect",
              "optional": true
            }
          }
        ]
      },
      "kind": "class",
      "methods": [
        {
          "name": "addAccountRootPrincipal",
          "returns": {
            "fqn": "@aws-cdk/aws-iam.PolicyStatement"
          }
        },
        {
          "name": "addAction",
          "parameters": [
            {
              "name": "action",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "fqn": "@aws-cdk/aws-iam.PolicyStatement"
          }
        },
        {
          "name": "addActions",
          "parameters": [
            {
              "name": "actions",
              "type": {
                "primitive": "string"
              },
              "variadic": true
            }
          ],
          "returns": {
            "fqn": "@aws-cdk/aws-iam.PolicyStatement"
          },
          "variadic": true
        },
        {
          "docs": {
            "comment": "Adds a ``\"*\"`` resource to this statement."
          },
          "name": "addAllResources",
          "returns": {
            "fqn": "@aws-cdk/aws-iam.PolicyStatement"
          }
        },
        {
          "name": "addAnyPrincipal",
          "returns": {
            "fqn": "@aws-cdk/aws-iam.PolicyStatement"
          }
        },
        {
          "name": "addArnPrincipal",
          "parameters": [
            {
              "name": "arn",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "fqn": "@aws-cdk/aws-iam.PolicyStatement"
          }
        },
        {
          "name": "addAwsAccountPrincipal",
          "parameters": [
            {
              "name": "accountId",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "fqn": "@aws-cdk/aws-iam.PolicyStatement"
          }
        },
        {
          "name": "addAwsPrincipal",
          "parameters": [
            {
              "name": "arn",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "fqn": "@aws-cdk/aws-iam.PolicyStatement"
          }
        },
        {
          "name": "addCanonicalUserPrincipal",
          "parameters": [
            {
              "name": "canonicalUserId",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "fqn": "@aws-cdk/aws-iam.PolicyStatement"
          }
        },
        {
          "docs": {
            "comment": "Add a condition to the Policy"
          },
          "name": "addCondition",
          "parameters": [
            {
              "name": "key",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "value",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "fqn": "@aws-cdk/aws-iam.PolicyStatement"
          }
        },
        {
          "docs": {
            "comment": "Add multiple conditions to the Policy"
          },
          "name": "addConditions",
          "parameters": [
            {
              "name": "conditions",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "map"
                }
              }
            }
          ],
          "returns": {
            "fqn": "@aws-cdk/aws-iam.PolicyStatement"
          }
        },
        {
          "name": "addFederatedPrincipal",
          "parameters": [
            {
              "name": "federated",
              "type": {
                "primitive": "any"
              }
            },
            {
              "name": "conditions",
              "type": {
                "collection": {
                  "elementtype": {
                    "primitive": "any"
                  },
                  "kind": "map"
                }
              }
            }
          ],
          "returns": {
            "fqn": "@aws-cdk/aws-iam.PolicyStatement"
          }
        },
        {
          "name": "addPrincipal",
          "parameters": [
            {
              "name": "principal",
              "type": {
                "fqn": "@aws-cdk/aws-iam.IPrincipal"
              }
            }
          ],
          "returns": {
            "fqn": "@aws-cdk/aws-iam.PolicyStatement"
          }
        },
        {
          "name": "addResource",
          "parameters": [
            {
              "name": "arn",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "fqn": "@aws-cdk/aws-iam.PolicyStatement"
          }
        },
        {
          "name": "addResources",
          "parameters": [
            {
              "name": "arns",
              "type": {
                "primitive": "string"
              },
              "variadic": true
            }
          ],
          "returns": {
            "fqn": "@aws-cdk/aws-iam.PolicyStatement"
          },
          "variadic": true
        },
        {
          "docs": {
            "comment": "Adds a service principal to this policy statement."
          },
          "name": "addServicePrincipal",
          "parameters": [
            {
              "docs": {
                "comment": "the service name for which a service principal is requested (e.g: `s3.amazonaws.com`)."
              },
              "name": "service",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "opts",
              "type": {
                "fqn": "@aws-cdk/aws-iam.ServicePrincipalOpts",
                "optional": true
              }
            }
          ],
          "returns": {
            "fqn": "@aws-cdk/aws-iam.PolicyStatement"
          }
        },
        {
          "docs": {
            "comment": "Sets the permission effect to allow access to resources."
          },
          "name": "allow",
          "returns": {
            "fqn": "@aws-cdk/aws-iam.PolicyStatement"
          }
        },
        {
          "docs": {
            "comment": "Sets the permission effect to deny access to resources."
          },
          "name": "deny",
          "returns": {
            "fqn": "@aws-cdk/aws-iam.PolicyStatement"
          }
        },
        {
          "name": "describe",
          "parameters": [
            {
              "name": "sid",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "fqn": "@aws-cdk/aws-iam.PolicyStatement"
          }
        },
        {
          "name": "limitToAccount",
          "parameters": [
            {
              "name": "accountId",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "fqn": "@aws-cdk/aws-iam.PolicyStatement"
          }
        },
        {
          "name": "resolve",
          "overrides": {
            "fqn": "@aws-cdk/cdk.Token"
          },
          "parameters": [
            {
              "name": "_context",
              "type": {
                "fqn": "@aws-cdk/cdk.ResolveContext"
              }
            }
          ],
          "returns": {
            "primitive": "any"
          }
        },
        {
          "docs": {
            "comment": "Add a condition to the Policy.",
            "deprecated": "For backwards compatibility. Use addCondition() instead."
          },
          "name": "setCondition",
          "parameters": [
            {
              "name": "key",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "value",
              "type": {
                "primitive": "any"
              }
            }
          ],
          "returns": {
            "fqn": "@aws-cdk/aws-iam.PolicyStatement"
          }
        },
        {
          "name": "toJson",
          "returns": {
            "primitive": "any"
          }
        }
      ],
      "name": "PolicyStatement",
      "properties": [
        {
          "docs": {
            "comment": "Indicates if this permission has a \"Principal\" section."
          },
          "immutable": true,
          "name": "hasPrincipal",
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "docs": {
            "comment": "Indicates if this permission as at least one resource associated with it."
          },
          "immutable": true,
          "name": "hasResource",
          "type": {
            "primitive": "boolean"
          }
        }
      ]
    },
    "@aws-cdk/aws-iam.PolicyStatementEffect": {
      "assembly": "@aws-cdk/aws-iam",
      "fqn": "@aws-cdk/aws-iam.PolicyStatementEffect",
      "kind": "enum",
      "members": [
        {
          "name": "Allow"
        },
        {
          "name": "Deny"
        }
      ],
      "name": "PolicyStatementEffect"
    },
    "@aws-cdk/aws-iam.PrincipalBase": {
      "abstract": true,
      "assembly": "@aws-cdk/aws-iam",
      "docs": {
        "comment": "Base class for policy principals"
      },
      "fqn": "@aws-cdk/aws-iam.PrincipalBase",
      "initializer": {
        "initializer": true
      },
      "interfaces": [
        {
          "fqn": "@aws-cdk/aws-iam.IPrincipal"
        }
      ],
      "kind": "class",
      "methods": [
        {
          "docs": {
            "comment": "Add to the policy of this principal."
          },
          "name": "addToPolicy",
          "overrides": {
            "fqn": "@aws-cdk/aws-iam.IPrincipal"
          },
          "parameters": [
            {
              "name": "_statement",
              "type": {
                "fqn": "@aws-cdk/aws-iam.PolicyStatement"
              }
            }
          ],
          "returns": {
            "primitive": "boolean"
          }
        },
        {
          "name": "toJSON",
          "returns": {
            "collection": {
              "elementtype": {
                "collection": {
                  "elementtype": {
                    "primitive": "string"
                  },
                  "kind": "array"
                }
              },
              "kind": "map"
            }
          }
        },
        {
          "docs": {
            "comment": "Returns a string representation of an object."
          },
          "name": "toString",
          "returns": {
            "primitive": "string"
          }
        }
      ],
      "name": "PrincipalBase",
      "properties": [
        {
          "docs": {
            "comment": "When this Principal is used in an AssumeRole policy, the action to use."
          },
          "immutable": true,
          "name": "assumeRoleAction",
          "overrides": {
            "fqn": "@aws-cdk/aws-iam.IPrincipal"
          },
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "comment": "The principal to grant permissions to"
          },
          "immutable": true,
          "name": "grantPrincipal",
          "overrides": {
            "fqn": "@aws-cdk/aws-iam.IGrantable"
          },
          "type": {
            "fqn": "@aws-cdk/aws-iam.IPrincipal"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "Return the policy fragment that identifies this principal in a Policy."
          },
          "immutable": true,
          "name": "policyFragment",
          "overrides": {
            "fqn": "@aws-cdk/aws-iam.IPrincipal"
          },
          "type": {
            "fqn": "@aws-cdk/aws-iam.PrincipalPolicyFragment"
          }
        }
      ]
    },
    "@aws-cdk/aws-iam.PrincipalPolicyFragment": {
      "assembly": "@aws-cdk/aws-iam",
      "docs": {
        "comment": "A collection of the fields in a PolicyStatement that can be used to identify a principal.\n\nThis consists of the JSON used in the \"Principal\" field, and optionally a\nset of \"Condition\"s that need to be applied to the policy."
      },
      "fqn": "@aws-cdk/aws-iam.PrincipalPolicyFragment",
      "initializer": {
        "initializer": true,
        "parameters": [
          {
            "name": "principalJson",
            "type": {
              "collection": {
                "elementtype": {
                  "collection": {
                    "elementtype": {
                      "primitive": "string"
                    },
                    "kind": "array"
                  }
                },
                "kind": "map"
              }
            }
          },
          {
            "name": "conditions",
            "type": {
              "collection": {
                "elementtype": {
                  "primitive": "any"
                },
                "kind": "map"
              },
              "optional": true
            }
          }
        ]
      },
      "kind": "class",
      "name": "PrincipalPolicyFragment",
      "properties": [
        {
          "immutable": true,
          "name": "conditions",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "map"
            }
          }
        },
        {
          "immutable": true,
          "name": "principalJson",
          "type": {
            "collection": {
              "elementtype": {
                "collection": {
                  "elementtype": {
                    "primitive": "string"
                  },
                  "kind": "array"
                }
              },
              "kind": "map"
            }
          }
        }
      ]
    },
    "@aws-cdk/aws-iam.Role": {
      "assembly": "@aws-cdk/aws-iam",
      "base": {
        "fqn": "@aws-cdk/cdk.Construct"
      },
      "docs": {
        "comment": "IAM Role\n\nDefines an IAM role. The role is created with an assume policy document associated with\nthe specified AWS service principal defined in `serviceAssumeRole`."
      },
      "fqn": "@aws-cdk/aws-iam.Role",
      "initializer": {
        "initializer": true,
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "@aws-cdk/cdk.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-iam.RoleProps"
            }
          }
        ]
      },
      "interfaces": [
        {
          "fqn": "@aws-cdk/aws-iam.IRole"
        }
      ],
      "kind": "class",
      "methods": [
        {
          "docs": {
            "comment": "Import a role that already exists"
          },
          "name": "import",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "@aws-cdk/cdk.Construct"
              }
            },
            {
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "props",
              "type": {
                "fqn": "@aws-cdk/aws-iam.RoleImportProps"
              }
            }
          ],
          "returns": {
            "fqn": "@aws-cdk/aws-iam.IRole"
          },
          "static": true
        },
        {
          "docs": {
            "comment": "Adds a permission to the role's default policy document.\nIf there is no default policy attached to this role, it will be created."
          },
          "name": "addToPolicy",
          "overrides": {
            "fqn": "@aws-cdk/aws-iam.IPrincipal"
          },
          "parameters": [
            {
              "name": "statement",
              "type": {
                "fqn": "@aws-cdk/aws-iam.PolicyStatement"
              }
            }
          ],
          "returns": {
            "primitive": "boolean"
          }
        },
        {
          "docs": {
            "comment": "Attaches a policy to this role."
          },
          "name": "attachInlinePolicy",
          "overrides": {
            "fqn": "@aws-cdk/aws-iam.IIdentity"
          },
          "parameters": [
            {
              "docs": {
                "comment": "The policy to attach"
              },
              "name": "policy",
              "type": {
                "fqn": "@aws-cdk/aws-iam.Policy"
              }
            }
          ]
        },
        {
          "docs": {
            "comment": "Attaches a managed policy to this role."
          },
          "name": "attachManagedPolicy",
          "overrides": {
            "fqn": "@aws-cdk/aws-iam.IIdentity"
          },
          "parameters": [
            {
              "docs": {
                "comment": "The ARN of the managed policy to attach."
              },
              "name": "arn",
              "type": {
                "primitive": "string"
              }
            }
          ]
        },
        {
          "docs": {
            "comment": "Export this role to another stack."
          },
          "name": "export",
          "overrides": {
            "fqn": "@aws-cdk/aws-iam.IRole"
          },
          "returns": {
            "fqn": "@aws-cdk/aws-iam.RoleImportProps"
          }
        },
        {
          "docs": {
            "comment": "Grant the actions defined in actions to the identity Principal on this resource."
          },
          "name": "grant",
          "overrides": {
            "fqn": "@aws-cdk/aws-iam.IRole"
          },
          "parameters": [
            {
              "name": "grantee",
              "type": {
                "fqn": "@aws-cdk/aws-iam.IPrincipal"
              }
            },
            {
              "name": "actions",
              "type": {
                "primitive": "string"
              },
              "variadic": true
            }
          ],
          "returns": {
            "fqn": "@aws-cdk/aws-iam.Grant"
          },
          "variadic": true
        },
        {
          "docs": {
            "comment": "Grant permissions to the given principal to pass this role."
          },
          "name": "grantPassRole",
          "overrides": {
            "fqn": "@aws-cdk/aws-iam.IRole"
          },
          "parameters": [
            {
              "name": "identity",
              "type": {
                "fqn": "@aws-cdk/aws-iam.IPrincipal"
              }
            }
          ],
          "returns": {
            "fqn": "@aws-cdk/aws-iam.Grant"
          }
        }
      ],
      "name": "Role",
      "properties": [
        {
          "docs": {
            "comment": "When this Principal is used in an AssumeRole policy, the action to use."
          },
          "immutable": true,
          "name": "assumeRoleAction",
          "overrides": {
            "fqn": "@aws-cdk/aws-iam.IPrincipal"
          },
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "comment": "The principal to grant permissions to"
          },
          "immutable": true,
          "name": "grantPrincipal",
          "overrides": {
            "fqn": "@aws-cdk/aws-iam.IGrantable"
          },
          "type": {
            "fqn": "@aws-cdk/aws-iam.IPrincipal"
          }
        },
        {
          "docs": {
            "comment": "Returns the role."
          },
          "immutable": true,
          "name": "policyFragment",
          "overrides": {
            "fqn": "@aws-cdk/aws-iam.IPrincipal"
          },
          "type": {
            "fqn": "@aws-cdk/aws-iam.PrincipalPolicyFragment"
          }
        },
        {
          "docs": {
            "comment": "Returns the ARN of this role."
          },
          "immutable": true,
          "name": "roleArn",
          "overrides": {
            "fqn": "@aws-cdk/aws-iam.IRole"
          },
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "comment": "Returns the stable and unique string identifying the role. For example,\nAIDAJQABLZS4A3QDU576Q."
          },
          "immutable": true,
          "name": "roleId",
          "overrides": {
            "fqn": "@aws-cdk/aws-iam.IRole"
          },
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "comment": "Returns the name of the role."
          },
          "immutable": true,
          "name": "roleName",
          "overrides": {
            "fqn": "@aws-cdk/aws-iam.IRole"
          },
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "comment": "The assume role policy document associated with this role."
          },
          "immutable": true,
          "name": "assumeRolePolicy",
          "type": {
            "fqn": "@aws-cdk/aws-iam.PolicyDocument",
            "optional": true
          }
        }
      ]
    },
    "@aws-cdk/aws-iam.RoleImportProps": {
      "assembly": "@aws-cdk/aws-iam",
      "datatype": true,
      "docs": {
        "comment": "Properties to import a Role"
      },
      "fqn": "@aws-cdk/aws-iam.RoleImportProps",
      "kind": "interface",
      "name": "RoleImportProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "comment": "The role's ARN"
          },
          "immutable": true,
          "name": "roleArn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "The stable and unique string identifying the role. For example,\nAIDAJQABLZS4A3QDU576Q.",
            "default": "If \"roleId\" is not specified for an imported role, then\n`role.roleId` will throw an exception. In most cases, role ID is not really needed."
          },
          "immutable": true,
          "name": "roleId",
          "type": {
            "optional": true,
            "primitive": "string"
          }
        }
      ]
    },
    "@aws-cdk/aws-iam.RoleProps": {
      "assembly": "@aws-cdk/aws-iam",
      "datatype": true,
      "fqn": "@aws-cdk/aws-iam.RoleProps",
      "kind": "interface",
      "name": "RoleProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "comment": "The IAM principal (i.e. `new ServicePrincipal('sns.amazonaws.com')`)\nwhich can assume this role.\n\nYou can later modify the assume role policy document by accessing it via\nthe `assumeRolePolicy` property."
          },
          "immutable": true,
          "name": "assumedBy",
          "type": {
            "fqn": "@aws-cdk/aws-iam.IPrincipal"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "ID that the role assumer needs to provide when assuming this role\n\nIf the configured and provided external IDs do not match, the\nAssumeRole operation will fail.",
            "default": "No external ID required"
          },
          "immutable": true,
          "name": "externalId",
          "type": {
            "optional": true,
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "A list of named policies to inline into this role. These policies will be\ncreated with the role, whereas those added by ``addToPolicy`` are added\nusing a separate CloudFormation resource (allowing a way around circular\ndependencies that could otherwise be introduced).",
            "default": "No policy is inlined in the Role resource."
          },
          "immutable": true,
          "name": "inlinePolicies",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-iam.PolicyDocument"
              },
              "kind": "map"
            },
            "optional": true
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "A list of ARNs for managed policies associated with this role.\nYou can add managed policies later using `attachManagedPolicy(arn)`.",
            "default": "No managed policies."
          },
          "immutable": true,
          "name": "managedPolicyArns",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "array"
            },
            "optional": true
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "The maximum session duration (in seconds) that you want to set for the\nspecified role. If you do not specify a value for this setting, the\ndefault maximum of one hour is applied. This setting can have a value\nfrom 1 hour (3600sec) to 12 (43200sec) hours.\n\nAnyone who assumes the role from the AWS CLI or API can use the\nDurationSeconds API parameter or the duration-seconds CLI parameter to\nrequest a longer session. The MaxSessionDuration setting determines the\nmaximum duration that can be requested using the DurationSeconds\nparameter.\n\nIf users don't specify a value for the DurationSeconds parameter, their\nsecurity credentials are valid for one hour by default. This applies when\nyou use the AssumeRole* API operations or the assume-role* CLI operations\nbut does not apply when you use those operations to create a console URL.",
            "link": "https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html"
          },
          "immutable": true,
          "name": "maxSessionDurationSec",
          "type": {
            "optional": true,
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "The path associated with this role. For information about IAM paths, see\nFriendly Names and Paths in IAM User Guide."
          },
          "immutable": true,
          "name": "path",
          "type": {
            "optional": true,
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "A name for the IAM role. For valid values, see the RoleName parameter for\nthe CreateRole action in the IAM API Reference. If you don't specify a\nname, AWS CloudFormation generates a unique physical ID and uses that ID\nfor the group name.\n\nIMPORTANT: If you specify a name, you cannot perform updates that require\nreplacement of this resource. You can perform updates that require no or\nsome interruption. If you must replace the resource, specify a new name.\n\nIf you specify a name, you must specify the CAPABILITY_NAMED_IAM value to\nacknowledge your template's capabilities. For more information, see\nAcknowledging IAM Resources in AWS CloudFormation Templates."
          },
          "immutable": true,
          "name": "roleName",
          "type": {
            "optional": true,
            "primitive": "string"
          }
        }
      ]
    },
    "@aws-cdk/aws-iam.ServicePrincipal": {
      "assembly": "@aws-cdk/aws-iam",
      "base": {
        "fqn": "@aws-cdk/aws-iam.PrincipalBase"
      },
      "docs": {
        "comment": "An IAM principal that represents an AWS service (i.e. sqs.amazonaws.com)."
      },
      "fqn": "@aws-cdk/aws-iam.ServicePrincipal",
      "initializer": {
        "initializer": true,
        "parameters": [
          {
            "name": "service",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "opts",
            "type": {
              "fqn": "@aws-cdk/aws-iam.ServicePrincipalOpts",
              "optional": true
            }
          }
        ]
      },
      "kind": "class",
      "methods": [
        {
          "docs": {
            "comment": "Returns a string representation of an object."
          },
          "name": "toString",
          "overrides": {
            "fqn": "@aws-cdk/aws-iam.PrincipalBase"
          },
          "returns": {
            "primitive": "string"
          }
        }
      ],
      "name": "ServicePrincipal",
      "properties": [
        {
          "immutable": true,
          "name": "opts",
          "type": {
            "fqn": "@aws-cdk/aws-iam.ServicePrincipalOpts"
          }
        },
        {
          "docs": {
            "comment": "Return the policy fragment that identifies this principal in a Policy."
          },
          "immutable": true,
          "name": "policyFragment",
          "overrides": {
            "fqn": "@aws-cdk/aws-iam.PrincipalBase"
          },
          "type": {
            "fqn": "@aws-cdk/aws-iam.PrincipalPolicyFragment"
          }
        },
        {
          "immutable": true,
          "name": "service",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "@aws-cdk/aws-iam.ServicePrincipalOpts": {
      "assembly": "@aws-cdk/aws-iam",
      "datatype": true,
      "docs": {
        "comment": "Options for a service principal."
      },
      "fqn": "@aws-cdk/aws-iam.ServicePrincipalOpts",
      "kind": "interface",
      "name": "ServicePrincipalOpts",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "comment": "The region in which the service is operating.",
            "default": "the current Stack's region."
          },
          "immutable": true,
          "name": "region",
          "type": {
            "optional": true,
            "primitive": "string"
          }
        }
      ]
    },
    "@aws-cdk/aws-iam.User": {
      "assembly": "@aws-cdk/aws-iam",
      "base": {
        "fqn": "@aws-cdk/cdk.Construct"
      },
      "fqn": "@aws-cdk/aws-iam.User",
      "initializer": {
        "initializer": true,
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "@aws-cdk/cdk.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-iam.UserProps",
              "optional": true
            }
          }
        ]
      },
      "interfaces": [
        {
          "fqn": "@aws-cdk/aws-iam.IIdentity"
        }
      ],
      "kind": "class",
      "methods": [
        {
          "docs": {
            "comment": "Adds this user to a group."
          },
          "name": "addToGroup",
          "parameters": [
            {
              "name": "group",
              "type": {
                "fqn": "@aws-cdk/aws-iam.Group"
              }
            }
          ]
        },
        {
          "docs": {
            "comment": "Adds an IAM statement to the default policy.",
            "return": "true"
          },
          "name": "addToPolicy",
          "overrides": {
            "fqn": "@aws-cdk/aws-iam.IPrincipal"
          },
          "parameters": [
            {
              "name": "statement",
              "type": {
                "fqn": "@aws-cdk/aws-iam.PolicyStatement"
              }
            }
          ],
          "returns": {
            "primitive": "boolean"
          }
        },
        {
          "docs": {
            "comment": "Attaches a policy to this user."
          },
          "name": "attachInlinePolicy",
          "overrides": {
            "fqn": "@aws-cdk/aws-iam.IIdentity"
          },
          "parameters": [
            {
              "name": "policy",
              "type": {
                "fqn": "@aws-cdk/aws-iam.Policy"
              }
            }
          ]
        },
        {
          "docs": {
            "comment": "Attaches a managed policy to the user."
          },
          "name": "attachManagedPolicy",
          "overrides": {
            "fqn": "@aws-cdk/aws-iam.IIdentity"
          },
          "parameters": [
            {
              "docs": {
                "comment": "The ARN of the managed policy to attach."
              },
              "name": "arn",
              "type": {
                "primitive": "string"
              }
            }
          ]
        }
      ],
      "name": "User",
      "properties": [
        {
          "docs": {
            "comment": "When this Principal is used in an AssumeRole policy, the action to use."
          },
          "immutable": true,
          "name": "assumeRoleAction",
          "overrides": {
            "fqn": "@aws-cdk/aws-iam.IPrincipal"
          },
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "comment": "The principal to grant permissions to"
          },
          "immutable": true,
          "name": "grantPrincipal",
          "overrides": {
            "fqn": "@aws-cdk/aws-iam.IGrantable"
          },
          "type": {
            "fqn": "@aws-cdk/aws-iam.IPrincipal"
          }
        },
        {
          "docs": {
            "comment": "Return the policy fragment that identifies this principal in a Policy."
          },
          "immutable": true,
          "name": "policyFragment",
          "overrides": {
            "fqn": "@aws-cdk/aws-iam.IPrincipal"
          },
          "type": {
            "fqn": "@aws-cdk/aws-iam.PrincipalPolicyFragment"
          }
        },
        {
          "docs": {
            "comment": "An attribute that represents the user's ARN."
          },
          "immutable": true,
          "name": "userArn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "comment": "An attribute that represents the user name."
          },
          "immutable": true,
          "name": "userName",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "@aws-cdk/aws-iam.UserProps": {
      "assembly": "@aws-cdk/aws-iam",
      "datatype": true,
      "fqn": "@aws-cdk/aws-iam.UserProps",
      "kind": "interface",
      "name": "UserProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "comment": "Groups to add this user to. You can also use `addToGroup` to add this\nuser to a group."
          },
          "immutable": true,
          "name": "groups",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-iam.Group"
              },
              "kind": "array"
            },
            "optional": true
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "A list of ARNs for managed policies attacherd to this user.\nYou can use `addManagedPolicy(arn)` to attach a managed policy to this user.",
            "default": "No managed policies."
          },
          "immutable": true,
          "name": "managedPolicyArns",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "any"
              },
              "kind": "array"
            },
            "optional": true
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "The password for the user. This is required so the user can access the\nAWS Management Console.\n\nYou can use `SecretValue.plainText` to specify a password in plain text or\nuse `secretsmanager.Secret.import` to reference a secret in Secrets Manager.",
            "default": "User won't be able to access the management console without a password."
          },
          "immutable": true,
          "name": "password",
          "type": {
            "fqn": "@aws-cdk/cdk.SecretValue",
            "optional": true
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "Specifies whether the user is required to set a new password the next\ntime the user logs in to the AWS Management Console.\n\nIf this is set to 'true', you must also specify \"initialPassword\".",
            "default": "false"
          },
          "immutable": true,
          "name": "passwordResetRequired",
          "type": {
            "optional": true,
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "The path for the user name. For more information about paths, see IAM\nIdentifiers in the IAM User Guide."
          },
          "immutable": true,
          "name": "path",
          "type": {
            "optional": true,
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "A name for the IAM user. For valid values, see the UserName parameter for\nthe CreateUser action in the IAM API Reference. If you don't specify a\nname, AWS CloudFormation generates a unique physical ID and uses that ID\nfor the user name.\n\nIf you specify a name, you cannot perform updates that require\nreplacement of this resource. You can perform updates that require no or\nsome interruption. If you must replace the resource, specify a new name.\n\nIf you specify a name, you must specify the CAPABILITY_NAMED_IAM value to\nacknowledge your template's capabilities. For more information, see\nAcknowledging IAM Resources in AWS CloudFormation Templates.",
            "default": "Generated by CloudFormation (recommended)"
          },
          "immutable": true,
          "name": "userName",
          "type": {
            "optional": true,
            "primitive": "string"
          }
        }
      ]
    }
  },
  "version": "0.28.0",
  "fingerprint": "JUeIub54mDqMChRpr4yXeEkIDI8ooyge0JeQq3flBFs="
}
