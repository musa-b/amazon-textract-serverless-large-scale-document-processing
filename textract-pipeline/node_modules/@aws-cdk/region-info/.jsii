{
  "author": {
    "name": "Amazon Web Services",
    "organization": true,
    "roles": [
      "author"
    ],
    "url": "https://aws.amazon.com"
  },
  "description": "AWS region information, such as service principal names",
  "homepage": "https://github.com/awslabs/aws-cdk",
  "license": "Apache-2.0",
  "name": "@aws-cdk/region-info",
  "readme": {
    "markdown": "# AWS Region-Specific Information Directory\n## Usage\nSome information used in CDK Applications differs from one AWS region to\nanother, such as service principals used in IAM policies, S3 static website\nendpoints, ...\n\n### The `RegionInfo` class\nThe library offers a simple interface to obtain region specific information in\nthe form of the `RegionInfo` class. This is the preferred way to interact with\nthe regional information database:\n\n```ts\nimport { RegionInfo } from '@aws-cdk/region-info';\n\n// Get the information for \"eu-west-1\":\nconst region = RegionInfo.get('eu-west-1');\n\n// Access attributes:\nregion.s3StaticWebsiteEndpoint; // s3-website.eu-west-1.amazonaws.com\nregion.servicePrincipal('logs.amazonaws.com'); // logs.eu-west-1.amazonaws.com\n```\n\nThe `RegionInfo` layer is built on top of the Low-Level API, which is described\nbelow and can be used to register additional data, including user-defined facts\nthat are not available through the `RegionInfo` interface.\n\n### Low-Level API\nThis library offers a primitive database of such information so that CDK\nconstructs can easily access regional information. The `FactName` class provides\na list of known fact names, which can then be used with the `RegionInfo` to\nretrieve a particular value:\n\n```ts\nimport regionInfo = require('@aws-cdk/region-info');\n\nconst codeDeployPrincipal = regionInfo.Fact.find('us-east-1', regionInfo.FactName.servicePrincipal('codedeploy.amazonaws.com'));\n// => codedeploy.us-east-1.amazonaws.com\n\nconst staticWebsite = regionInfo.Fact.find('ap-northeast-1', regionInfo.FactName.s3StaticWebsiteEndpoint);\n// => s3-website-ap-northeast-1.amazonaws.com\n```\n\n## Supplying new or missing information\nAs new regions are released, it might happen that a particular fact you need is\nmissing from the library. In such cases, the `Fact.register` method can be used\nto inject FactName into the database:\n\n```ts\nregionInfo.Fact.register({\n  region: 'bermuda-triangle-1',\n  name: regionInfo.FactName.servicePrincipal('s3.amazonaws.com'),\n  value: 's3-website.bermuda-triangle-1.nowhere.com',\n});\n```\n\n## Overriding incorrect information\nIn the event information provided by the library is incorrect, it can be\noverridden using the same `Fact.register` method demonstrated above, simply\nadding an extra boolean argument:\n\n```ts\nregionInfo.Fact.register({\n  region: 'us-east-1',\n  name: regionInfo.FactName.servicePrincipal('service.amazonaws.com'),\n  value: 'the-correct-principal.amazonaws.com',\n}, true /* Allow overriding information */);\n```\n\nIf you happen to have stumbled upon incorrect data built into this library, it\nis always a good idea to report your findings in a [GitHub issue], so we can fix\nit for everyone else!\n\n[GitHub issue]: https://github.com/awslabs/aws-cdk/issues\n\n---\n\nThis module is part of the [AWS Cloud Development Kit](https://github.com/awslabs/aws-cdk) project.\n"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/awslabs/aws-cdk.git"
  },
  "schema": "jsii/1.0",
  "targets": {
    "dotnet": {
      "assemblyOriginatorKeyFile": "../../key.snk",
      "namespace": "Amazon.CDK.RegionInfo",
      "packageId": "Amazon.CDK.RegionInfo",
      "signAssembly": true
    },
    "java": {
      "maven": {
        "artifactId": "cdk-region-info",
        "groupId": "software.amazon.awscdk"
      },
      "package": "software.amazon.awscdk.regioninfo"
    },
    "js": {
      "npm": "@aws-cdk/region-info"
    },
    "python": {
      "distName": "aws-cdk.region-info",
      "module": "aws_cdk.region_info"
    }
  },
  "types": {
    "@aws-cdk/region-info.Default": {
      "assembly": "@aws-cdk/region-info",
      "docs": {
        "comment": "Provides default values for certain regional information points."
      },
      "fqn": "@aws-cdk/region-info.Default",
      "kind": "class",
      "methods": [
        {
          "docs": {
            "comment": "Computes a \"standard\" AWS Service principal for a given service, region and suffix. This is useful for example when\nyou need to compute a service principal name, but you do not have a synthesize-time region literal available (so\nall you have is `{ \"Ref\": \"AWS::Region\" }`). This way you get the same defaulting behavior that is normally used\nfor built-in data."
          },
          "name": "servicePrincipal",
          "parameters": [
            {
              "docs": {
                "comment": "the name of the service (s3, s3.amazonaws.com, ...)"
              },
              "name": "service",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "comment": "the region in which the service principal is needed."
              },
              "name": "region",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "comment": "the URL suffix for the partition in which the region is located."
              },
              "name": "urlSuffix",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "primitive": "string"
          },
          "static": true
        }
      ],
      "name": "Default"
    },
    "@aws-cdk/region-info.Fact": {
      "assembly": "@aws-cdk/region-info",
      "docs": {
        "comment": "A database of regional information."
      },
      "fqn": "@aws-cdk/region-info.Fact",
      "kind": "class",
      "methods": [
        {
          "docs": {
            "comment": "Retrieves a fact from this Fact database.",
            "return": "the fact value if it is known, and `undefined` otherwise."
          },
          "name": "find",
          "parameters": [
            {
              "docs": {
                "comment": "the name of the region (e.g: `us-east-1`)"
              },
              "name": "region",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "comment": "the name of the fact being looked up (see the `FactName` class for details)"
              },
              "name": "name",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "optional": true,
            "primitive": "string"
          },
          "static": true
        },
        {
          "docs": {
            "comment": "Registers a new fact in this Fact database."
          },
          "name": "register",
          "parameters": [
            {
              "docs": {
                "comment": "the new fact to be registered."
              },
              "name": "fact",
              "type": {
                "fqn": "@aws-cdk/region-info.IFact"
              }
            },
            {
              "docs": {
                "comment": "whether new facts can replace existing facts or not."
              },
              "name": "allowReplacing",
              "type": {
                "optional": true,
                "primitive": "boolean"
              }
            }
          ],
          "static": true
        },
        {
          "docs": {
            "comment": "Removes a fact from the database."
          },
          "name": "unregister",
          "parameters": [
            {
              "docs": {
                "comment": "the region for which the fact is to be removed."
              },
              "name": "region",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "comment": "the name of the fact to remove."
              },
              "name": "name",
              "type": {
                "primitive": "string"
              }
            },
            {
              "docs": {
                "comment": "the value that should be removed (removal will fail if the value is specified, but does not match the\ncurrent stored value)."
              },
              "name": "value",
              "type": {
                "optional": true,
                "primitive": "string"
              }
            }
          ],
          "static": true
        }
      ],
      "name": "Fact"
    },
    "@aws-cdk/region-info.FactName": {
      "assembly": "@aws-cdk/region-info",
      "docs": {
        "comment": "All standardized fact names."
      },
      "fqn": "@aws-cdk/region-info.FactName",
      "initializer": {
        "initializer": true
      },
      "kind": "class",
      "methods": [
        {
          "docs": {
            "comment": "The name of the regional service principal for a given service."
          },
          "name": "servicePrincipal",
          "parameters": [
            {
              "docs": {
                "comment": "the service name, either simple (e.g: `s3`, `codedeploy`) or qualified (e.g: `s3.amazonaws.com`).\nThe `.amazonaws.com` and `.amazonaws.com.cn` domains are stripped from service names, so they are\ncanonicalized in that respect."
              },
              "name": "service",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "primitive": "string"
          },
          "static": true
        }
      ],
      "name": "FactName",
      "properties": [
        {
          "const": true,
          "docs": {
            "comment": "Whether the AWS::CDK::Metadata CloudFormation Resource is available in-region or not. The value is a boolean\nmodelled as `YES` or `NO`."
          },
          "immutable": true,
          "name": "cdkMetadataResourceAvailable",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "const": true,
          "docs": {
            "comment": "The domain suffix for a region (e.g: 'amazonaws.com`)\n   *"
          },
          "immutable": true,
          "name": "domainSuffix",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "const": true,
          "docs": {
            "comment": "The name of the partition for a region (e.g: 'aws', 'aws-cn', ...)"
          },
          "immutable": true,
          "name": "partition",
          "static": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "const": true,
          "docs": {
            "comment": "The endpoint used for hosting S3 static websites"
          },
          "immutable": true,
          "name": "s3StaticWebsiteEndpoint",
          "static": true,
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "@aws-cdk/region-info.IFact": {
      "assembly": "@aws-cdk/region-info",
      "docs": {
        "comment": "A fact that can be registered about a particular region."
      },
      "fqn": "@aws-cdk/region-info.IFact",
      "kind": "interface",
      "name": "IFact",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "comment": "The name of this fact. Standardized values are provided by the `Facts` class."
          },
          "immutable": true,
          "name": "name",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "The region for which this fact applies."
          },
          "immutable": true,
          "name": "region",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "comment": "The value of this fact."
          },
          "immutable": true,
          "name": "value",
          "type": {
            "primitive": "string"
          }
        }
      ]
    },
    "@aws-cdk/region-info.RegionInfo": {
      "assembly": "@aws-cdk/region-info",
      "docs": {
        "comment": "Information pertaining to an AWS region."
      },
      "fqn": "@aws-cdk/region-info.RegionInfo",
      "kind": "class",
      "methods": [
        {
          "docs": {
            "comment": "Obtain region info for a given region name."
          },
          "name": "get",
          "parameters": [
            {
              "docs": {
                "comment": "the name of the region (e.g: us-east-1)"
              },
              "name": "name",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "fqn": "@aws-cdk/region-info.RegionInfo"
          },
          "static": true
        },
        {
          "docs": {
            "comment": "The name of the service principal for a given service in this region."
          },
          "name": "servicePrincipal",
          "parameters": [
            {
              "docs": {
                "comment": "the service name (e.g: s3.amazonaws.com)"
              },
              "name": "service",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "optional": true,
            "primitive": "string"
          }
        }
      ],
      "name": "RegionInfo",
      "properties": [
        {
          "docs": {
            "comment": "Whether the `AWS::CDK::Metadata` CloudFormation Resource is available in this region or not."
          },
          "immutable": true,
          "name": "cdkMetadataResourceAvailable",
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "immutable": true,
          "name": "name",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "comment": "The domain name suffix (e.g: amazonaws.com) for this region."
          },
          "immutable": true,
          "name": "domainSuffix",
          "type": {
            "optional": true,
            "primitive": "string"
          }
        },
        {
          "docs": {
            "comment": "The name of the ARN partition for this region (e.g: aws)."
          },
          "immutable": true,
          "name": "partition",
          "type": {
            "optional": true,
            "primitive": "string"
          }
        },
        {
          "docs": {
            "comment": "The endpoint used by S3 static website hosting in this region (e.g: s3-static-website-us-east-1.amazonaws.com)"
          },
          "immutable": true,
          "name": "s3StaticWebsiteEndpoint",
          "type": {
            "optional": true,
            "primitive": "string"
          }
        }
      ]
    }
  },
  "version": "0.28.0",
  "fingerprint": "OdkQ98ROmR4Z+LZO6wJAoCW89csYLgn4RckGZ9JwxXk="
}
