import iam = require('@aws-cdk/aws-iam');
import s3 = require('@aws-cdk/aws-s3');
import cdk = require('@aws-cdk/cdk');
/**
 * Defines the way an asset is packaged before it is uploaded to S3.
 */
export declare enum AssetPackaging {
    /**
     * Path refers to a directory on disk, the contents of the directory is
     * archived into a .zip.
     */
    ZipDirectory = "zip",
    /**
     * Path refers to a single file on disk. The file is uploaded as-is.
     */
    File = "file"
}
export interface GenericAssetProps {
    /**
     * The disk location of the asset.
     */
    readonly path: string;
    /**
     * The packaging type for this asset.
     */
    readonly packaging: AssetPackaging;
    /**
     * A list of principals that should be able to read this asset from S3.
     * You can use `asset.grantRead(principal)` to grant read permissions later.
     */
    readonly readers?: iam.IGrantable[];
}
/**
 * An asset represents a local file or directory, which is automatically uploaded to S3
 * and then can be referenced within a CDK application.
 */
export declare class Asset extends cdk.Construct {
    /**
     * Attribute that represents the name of the bucket this asset exists in.
     */
    readonly s3BucketName: string;
    /**
     * Attribute which represents the S3 object key of this asset.
     */
    readonly s3ObjectKey: string;
    /**
     * Attribute which represents the S3 URL of this asset.
     * @example https://s3.us-west-1.amazonaws.com/bucket/key
     */
    readonly s3Url: string;
    /**
     * Resolved full-path location of this asset.
     */
    readonly assetPath: string;
    /**
     * The S3 bucket in which this asset resides.
     */
    readonly bucket: s3.IBucket;
    /**
     * Indicates if this asset is a zip archive. Allows constructs to ensure that the
     * correct file type was used.
     */
    readonly isZipArchive: boolean;
    /**
     * The S3 prefix where all different versions of this asset are stored
     */
    private readonly s3Prefix;
    constructor(scope: cdk.Construct, id: string, props: GenericAssetProps);
    /**
     * Adds CloudFormation template metadata to the specified resource with
     * information that indicates which resource property is mapped to this local
     * asset. This can be used by tools such as SAM CLI to provide local
     * experience such as local invocation and debugging of Lambda functions.
     *
     * Asset metadata will only be included if the stack is synthesized with the
     * "aws:cdk:enable-asset-metadata" context key defined, which is the default
     * behavior when synthesizing via the CDK Toolkit.
     *
     * @see https://github.com/awslabs/aws-cdk/issues/1432
     *
     * @param resource The CloudFormation resource which is using this asset.
     * @param resourceProperty The property name where this asset is referenced
     * (e.g. "Code" for AWS::Lambda::Function)
     */
    addResourceMetadata(resource: cdk.CfnResource, resourceProperty: string): void;
    /**
     * Grants read permissions to the principal on the asset's S3 object.
     */
    grantRead(grantee: iam.IGrantable): void;
}
export interface FileAssetProps {
    /**
     * File path.
     */
    readonly path: string;
    /**
     * A list of principals that should be able to read this file asset from S3.
     * You can use `asset.grantRead(principal)` to grant read permissions later.
     */
    readonly readers?: iam.IGrantable[];
}
/**
 * An asset that represents a file on disk.
 */
export declare class FileAsset extends Asset {
    constructor(scope: cdk.Construct, id: string, props: FileAssetProps);
}
export interface ZipDirectoryAssetProps {
    /**
     * Path of the directory.
     */
    readonly path: string;
    /**
     * A list of principals that should be able to read this ZIP file from S3.
     * You can use `asset.grantRead(principal)` to grant read permissions later.
     */
    readonly readers?: iam.IGrantable[];
}
/**
 * An asset that represents a ZIP archive of a directory on disk.
 */
export declare class ZipDirectoryAsset extends Asset {
    constructor(scope: cdk.Construct, id: string, props: ZipDirectoryAssetProps);
}
