"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const iam = require("@aws-cdk/aws-iam");
const cdk = require("@aws-cdk/cdk");
const cognito_generated_1 = require("./cognito.generated");
/**
 * Standard attributes
 * Specified following the OpenID Connect spec
 * @see https://openid.net/specs/openid-connect-core-1_0.html#StandardClaims
 */
var UserPoolAttribute;
(function (UserPoolAttribute) {
    /**
     * End-User's preferred postal address.
     */
    UserPoolAttribute["Address"] = "address";
    /**
     * End-User's birthday, represented as an ISO 8601:2004 [ISO8601‑2004] YYYY-MM-DD format.
     * The year MAY be 0000, indicating that it is omitted.
     * To represent only the year, YYYY format is allowed.
     */
    UserPoolAttribute["Birthdate"] = "birthdate";
    /**
     * End-User's preferred e-mail address.
     * Its value MUST conform to the RFC 5322 [RFC5322] addr-spec syntax.
     */
    UserPoolAttribute["Email"] = "email";
    /**
     * Surname(s) or last name(s) of the End-User.
     * Note that in some cultures, people can have multiple family names or no family name;
     * all can be present, with the names being separated by space characters.
     */
    UserPoolAttribute["FamilyName"] = "family_name";
    /**
     * End-User's gender.
     */
    UserPoolAttribute["Gender"] = "gender";
    /**
     * Given name(s) or first name(s) of the End-User.
     * Note that in some cultures, people can have multiple given names;
     * all can be present, with the names being separated by space characters.
     */
    UserPoolAttribute["GivenName"] = "given_name";
    /**
     * End-User's locale, represented as a BCP47 [RFC5646] language tag.
     * This is typically an ISO 639-1 Alpha-2 [ISO639‑1] language code in lowercase
     * and an ISO 3166-1 Alpha-2 [ISO3166‑1] country code in uppercase, separated by a dash.
     * For example, en-US or fr-CA.
     */
    UserPoolAttribute["Locale"] = "locale";
    /**
     * Middle name(s) of the End-User.
     * Note that in some cultures, people can have multiple middle names;
     * all can be present, with the names being separated by space characters.
     * Also note that in some cultures, middle names are not used.
     */
    UserPoolAttribute["MiddleName"] = "middle_name";
    /**
     * End-User's full name in displayable form including all name parts,
     * possibly including titles and suffixes, ordered according to the End-User's locale and preferences.
     */
    UserPoolAttribute["Name"] = "name";
    /**
     * Casual name of the End-User that may or may not be the same as the given_name.
     * For instance, a nickname value of Mike might be returned alongside a given_name value of Michael.
     */
    UserPoolAttribute["Nickname"] = "nickname";
    /**
     * End-User's preferred telephone number.
     * E.164 [E.164] is RECOMMENDED as the format of this Claim, for example, +1 (425) 555-1212 or +56 (2) 687 2400.
     * If the phone number contains an extension, it is RECOMMENDED that the extension be represented using the
     * RFC 3966 [RFC3966] extension syntax, for example, +1 (604) 555-1234;ext=5678.
     */
    UserPoolAttribute["PhoneNumber"] = "phone_number";
    /**
     * URL of the End-User's profile picture.
     * This URL MUST refer to an image file (for example, a PNG, JPEG, or GIF image file),
     * rather than to a Web page containing an image.
     * Note that this URL SHOULD specifically reference a profile photo of the End-User
     * suitable for displaying when describing the End-User, rather than an arbitrary photo taken by the End-User
     */
    UserPoolAttribute["Picture"] = "picture";
    /**
     * Shorthand name by which the End-User wishes to be referred to.
     */
    UserPoolAttribute["PreferredUsername"] = "preferred_username";
    /**
     * URL of the End-User's profile page. The contents of this Web page SHOULD be about the End-User.
     */
    UserPoolAttribute["Profile"] = "profile";
    /**
     * The End-User's time zone
     */
    UserPoolAttribute["Timezone"] = "timezone";
    /**
     * Time the End-User's information was last updated.
     * Its value is a JSON number representing the number of seconds from 1970-01-01T0:0:0Z
     * as measured in UTC until the date/time.
     */
    UserPoolAttribute["UpdatedAt"] = "updated_at";
    /**
     * URL of the End-User's Web page or blog.
     * This Web page SHOULD contain information published by the End-User or an organization that the End-User is affiliated with.
     */
    UserPoolAttribute["Website"] = "website";
})(UserPoolAttribute = exports.UserPoolAttribute || (exports.UserPoolAttribute = {}));
/**
 * Methods of user sign-in
 */
var SignInType;
(function (SignInType) {
    /**
     * End-user will sign in with a username, with optional aliases
     */
    SignInType[SignInType["Username"] = 0] = "Username";
    /**
     * End-user will sign in using an email address
     */
    SignInType[SignInType["Email"] = 1] = "Email";
    /**
     * End-user will sign in using a phone number
     */
    SignInType[SignInType["Phone"] = 2] = "Phone";
    /**
     * End-user will sign in using either an email address or phone number
     */
    SignInType[SignInType["EmailOrPhone"] = 3] = "EmailOrPhone";
})(SignInType = exports.SignInType || (exports.SignInType = {}));
/**
 * Define a Cognito User Pool
 */
class UserPool extends cdk.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        this.triggers = {};
        let aliasAttributes;
        let usernameAttributes;
        if (props.usernameAliasAttributes != null && props.signInType !== SignInType.Username) {
            throw new Error(`'usernameAliasAttributes' can only be set with a signInType of 'USERNAME'`);
        }
        if (props.usernameAliasAttributes
            && !props.usernameAliasAttributes.every(a => {
                return a === UserPoolAttribute.Email || a === UserPoolAttribute.PhoneNumber || a === UserPoolAttribute.PreferredUsername;
            })) {
            throw new Error(`'usernameAliasAttributes' can only include EMAIL, PHONE_NUMBER, or PREFERRED_USERNAME`);
        }
        if (props.autoVerifiedAttributes
            && !props.autoVerifiedAttributes.every(a => a === UserPoolAttribute.Email || a === UserPoolAttribute.PhoneNumber)) {
            throw new Error(`'autoVerifiedAttributes' can only include EMAIL or PHONE_NUMBER`);
        }
        switch (props.signInType) {
            case SignInType.Username:
                aliasAttributes = props.usernameAliasAttributes;
                break;
            case SignInType.Email:
                usernameAttributes = [UserPoolAttribute.Email];
                break;
            case SignInType.Phone:
                usernameAttributes = [UserPoolAttribute.PhoneNumber];
                break;
            case SignInType.EmailOrPhone:
                usernameAttributes = [UserPoolAttribute.Email, UserPoolAttribute.PhoneNumber];
                break;
            default:
                aliasAttributes = props.usernameAliasAttributes;
                break;
        }
        if (props.lambdaTriggers) {
            for (const t of Object.keys(props.lambdaTriggers)) {
                const trigger = props.lambdaTriggers[t];
                if (trigger !== undefined) {
                    this.addLambdaPermission(trigger, t);
                    this.triggers[t] = trigger.functionArn;
                }
            }
        }
        const userPool = new cognito_generated_1.CfnUserPool(this, 'Resource', {
            userPoolName: props.poolName || this.node.uniqueId,
            usernameAttributes,
            aliasAttributes,
            autoVerifiedAttributes: props.autoVerifiedAttributes,
            lambdaConfig: new cdk.Token(() => this.triggers)
        });
        this.userPoolId = userPool.userPoolId;
        this.userPoolArn = userPool.userPoolArn;
        this.userPoolProviderName = userPool.userPoolProviderName;
        this.userPoolProviderUrl = userPool.userPoolProviderUrl;
    }
    /**
     * Import an existing user pool resource
     * @param scope Parent construct
     * @param id Construct ID
     * @param props Imported user pool properties
     */
    static import(scope, id, props) {
        return new ImportedUserPool(scope, id, props);
    }
    /**
     * Attach 'Create Auth Challenge' trigger
     * Grants access from cognito-idp.amazonaws.com to the lambda
     * @see https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-lambda-create-auth-challenge.html
     * @param fn the lambda function to attach
     */
    onCreateAuthChallenge(fn) {
        this.addLambdaPermission(fn, 'CreateAuthChallenge');
        this.triggers = Object.assign({}, this.triggers, { createAuthChallenge: fn.functionArn });
    }
    /**
     * Attach 'Custom Message' trigger
     * Grants access from cognito-idp.amazonaws.com to the lambda
     * @see https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-lambda-custom-message.html
     * @param fn the lambda function to attach
     */
    onCustomMessage(fn) {
        this.addLambdaPermission(fn, 'CustomMessage');
        this.triggers = Object.assign({}, this.triggers, { customMessage: fn.functionArn });
    }
    /**
     * Attach 'Define Auth Challenge' trigger
     * Grants access from cognito-idp.amazonaws.com to the lambda
     * @see https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-lambda-define-auth-challenge.html
     * @param fn the lambda function to attach
     */
    onDefineAuthChallenge(fn) {
        this.addLambdaPermission(fn, 'DefineAuthChallenge');
        this.triggers = Object.assign({}, this.triggers, { defineAuthChallenge: fn.functionArn });
    }
    /**
     * Attach 'Post Authentication' trigger
     * Grants access from cognito-idp.amazonaws.com to the lambda
     * @see https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-lambda-post-authentication.html
     * @param fn the lambda function to attach
     */
    onPostAuthentication(fn) {
        this.addLambdaPermission(fn, 'PostAuthentication');
        this.triggers = Object.assign({}, this.triggers, { postAuthentication: fn.functionArn });
    }
    /**
     * Attach 'Post Confirmation' trigger
     * Grants access from cognito-idp.amazonaws.com to the lambda
     * @see https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-lambda-post-confirmation.html
     * @param fn the lambda function to attach
     */
    onPostConfirmation(fn) {
        this.addLambdaPermission(fn, 'PostConfirmation');
        this.triggers = Object.assign({}, this.triggers, { postConfirmation: fn.functionArn });
    }
    /**
     * Attach 'Pre Authentication' trigger
     * Grants access from cognito-idp.amazonaws.com to the lambda
     * @see https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-lambda-pre-authentication.html
     * @param fn the lambda function to attach
     */
    onPreAuthentication(fn) {
        this.addLambdaPermission(fn, 'PreAuthentication');
        this.triggers = Object.assign({}, this.triggers, { preAuthentication: fn.functionArn });
    }
    /**
     * Attach 'Pre Sign Up' trigger
     * Grants access from cognito-idp.amazonaws.com to the lambda
     * @see https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-lambda-pre-sign-up.html
     * @param fn the lambda function to attach
     */
    onPreSignUp(fn) {
        this.addLambdaPermission(fn, 'PreSignUp');
        this.triggers = Object.assign({}, this.triggers, { preSignUp: fn.functionArn });
    }
    /**
     * Attach 'Verify Auth Challenge Response' trigger
     * Grants access from cognito-idp.amazonaws.com to the lambda
     * @see https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-lambda-verify-auth-challenge-response.html
     * @param fn the lambda function to attach
     */
    onVerifyAuthChallengeResponse(fn) {
        this.addLambdaPermission(fn, 'VerifyAuthChallengeResponse');
        this.triggers = Object.assign({}, this.triggers, { verifyAuthChallengeResponse: fn.functionArn });
    }
    export() {
        return {
            userPoolId: new cdk.CfnOutput(this, 'UserPoolId', { value: this.userPoolId }).makeImportValue().toString(),
            userPoolArn: new cdk.CfnOutput(this, 'UserPoolArn', { value: this.userPoolArn }).makeImportValue().toString(),
            userPoolProviderName: new cdk.CfnOutput(this, 'UserPoolProviderName', { value: this.userPoolProviderName }).makeImportValue().toString(),
            userPoolProviderUrl: new cdk.CfnOutput(this, 'UserPoolProviderUrl', { value: this.userPoolProviderUrl }).makeImportValue().toString()
        };
    }
    addLambdaPermission(fn, name) {
        const normalize = name.charAt(0).toUpperCase() + name.slice(1);
        fn.addPermission(`${normalize}Cognito`, {
            principal: new iam.ServicePrincipal('cognito-idp.amazonaws.com'),
            sourceArn: this.userPoolArn
        });
    }
}
exports.UserPool = UserPool;
/**
 * Define a user pool which has been declared in another stack
 */
class ImportedUserPool extends cdk.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        this.props = props;
        this.userPoolId = props.userPoolId;
        this.userPoolArn = props.userPoolArn;
        this.userPoolProviderName = props.userPoolProviderName;
        this.userPoolProviderUrl = props.userPoolProviderUrl;
    }
    export() {
        return this.props;
    }
}
//# sourceMappingURL=data:application/json;base64,