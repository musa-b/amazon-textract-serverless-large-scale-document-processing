"use strict";
const assert_1 = require("@aws-cdk/assert");
const lambda = require("@aws-cdk/aws-lambda");
const cdk = require("@aws-cdk/cdk");
const cognito = require("../lib");
module.exports = {
    'default setup'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        // WHEN
        new cognito.UserPool(stack, 'Pool', {
            poolName: 'myPool'
        });
        // THEN
        assert_1.expect(stack).to(assert_1.haveResourceLike('AWS::Cognito::UserPool', {
            UserPoolName: 'myPool'
        }));
        test.done();
    },
    'lambda triggers are defined'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        const fn = new lambda.Function(stack, 'MyLambda', {
            code: new lambda.InlineCode('foo'),
            handler: 'index.handler',
            runtime: lambda.Runtime.NodeJS610,
        });
        // WHEN
        const pool = new cognito.UserPool(stack, 'Pool', {
            lambdaTriggers: {
                preSignUp: fn
            }
        });
        pool.onCustomMessage(fn);
        // THEN
        assert_1.expect(stack).to(assert_1.haveResourceLike('AWS::Cognito::UserPool', {
            LambdaConfig: {
                PreSignUp: fn.node.resolve(fn.functionArn),
                CustomMessage: fn.node.resolve(fn.functionArn)
            }
        }));
        test.done();
    },
    'on* API correctly appends triggers'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        const fn = new lambda.Function(stack, 'MyLambda', {
            code: new lambda.InlineCode('foo'),
            handler: 'index.handler',
            runtime: lambda.Runtime.NodeJS610,
        });
        // WHEN
        const pool = new cognito.UserPool(stack, 'Pool', {});
        pool.onCreateAuthChallenge(fn);
        pool.onCustomMessage(fn);
        pool.onDefineAuthChallenge(fn);
        pool.onPostAuthentication(fn);
        pool.onPostConfirmation(fn);
        pool.onPreAuthentication(fn);
        pool.onPreSignUp(fn);
        pool.onVerifyAuthChallengeResponse(fn);
        // THEN
        assert_1.expect(stack).to(assert_1.haveResourceLike('AWS::Cognito::UserPool', {
            LambdaConfig: {
                CreateAuthChallenge: fn.node.resolve(fn.functionArn),
                CustomMessage: fn.node.resolve(fn.functionArn),
                DefineAuthChallenge: fn.node.resolve(fn.functionArn),
                PostAuthentication: fn.node.resolve(fn.functionArn),
                PostConfirmation: fn.node.resolve(fn.functionArn),
                PreAuthentication: fn.node.resolve(fn.functionArn),
                PreSignUp: fn.node.resolve(fn.functionArn),
                VerifyAuthChallengeResponse: fn.node.resolve(fn.functionArn)
            }
        }));
        test.done();
    },
    'lambdas are given cognito service grant'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        const fn = new lambda.Function(stack, 'MyLambda', {
            code: new lambda.InlineCode('foo'),
            handler: 'index.handler',
            runtime: lambda.Runtime.NodeJS610,
        });
        // WHEN
        new cognito.UserPool(stack, 'Pool', {
            lambdaTriggers: {
                preSignUp: fn
            }
        });
        // THEN
        assert_1.expect(stack).to(assert_1.haveResourceLike('AWS::Lambda::Permission', {
            FunctionName: fn.node.resolve(fn.functionArn),
            Principal: 'cognito-idp.amazonaws.com'
        }));
        test.done();
    },
    'set sign in type'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        // WHEN
        new cognito.UserPool(stack, 'Pool', {
            signInType: cognito.SignInType.Email,
            autoVerifiedAttributes: [cognito.UserPoolAttribute.Email]
        });
        // THEN
        assert_1.expect(stack).to(assert_1.haveResourceLike('AWS::Cognito::UserPool', {
            UsernameAttributes: ['email'],
            AutoVerifiedAttributes: ['email']
        }));
        test.done();
    },
    'usernameAliasAttributes require signInType of USERNAME'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        // WHEN
        const toThrow = () => {
            new cognito.UserPool(stack, 'Pool', {
                signInType: cognito.SignInType.Email,
                usernameAliasAttributes: [cognito.UserPoolAttribute.PreferredUsername]
            });
        };
        // THEN
        test.throws(() => toThrow(), /'usernameAliasAttributes' can only be set with a signInType of 'USERNAME'/);
        test.done();
    },
    'usernameAliasAttributes must be one or more of EMAIL, PHONE_NUMBER, or PREFERRED_USERNAME'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        // WHEN
        const toThrow = () => {
            new cognito.UserPool(stack, 'Pool', {
                signInType: cognito.SignInType.Username,
                usernameAliasAttributes: [cognito.UserPoolAttribute.GivenName]
            });
        };
        // THEN
        test.throws(() => toThrow(), /'usernameAliasAttributes' can only include EMAIL, PHONE_NUMBER, or PREFERRED_USERNAME/);
        test.done();
    },
    'autoVerifiedAttributes must be one or more of EMAIL or PHONE_NUMBER'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        // WHEN
        const toThrow = () => {
            new cognito.UserPool(stack, 'Pool', {
                signInType: cognito.SignInType.Email,
                autoVerifiedAttributes: [cognito.UserPoolAttribute.Email, cognito.UserPoolAttribute.Gender]
            });
        };
        // THEN
        test.throws(() => toThrow(), /'autoVerifiedAttributes' can only include EMAIL or PHONE_NUMBER/);
        test.done();
    }
};
//# sourceMappingURL=data:application/json;base64,