"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cdk = require("@aws-cdk/cdk");
const lambda_generated_1 = require("./lambda.generated");
/**
 * A reference to a Lambda Layer version.
 */
class LayerVersionBase extends cdk.Construct {
    grantUsage(id, grantee) {
        if (grantee.organizationId != null && grantee.accountId !== '*') {
            throw new Error(`OrganizationId can only be specified if AwsAccountId is '*', but it is ${grantee.accountId}`);
        }
        new lambda_generated_1.CfnLayerVersionPermission(this, id, {
            action: 'lambda:GetLayerVersion',
            layerVersionArn: this.layerVersionArn,
            principal: grantee.accountId,
            organizationId: grantee.organizationId,
        });
        return this;
    }
    export() {
        return {
            layerVersionArn: new cdk.CfnOutput(this, 'LayerVersionArn', { value: this.layerVersionArn }).makeImportValue().toString(),
            compatibleRuntimes: this.compatibleRuntimes,
        };
    }
}
exports.LayerVersionBase = LayerVersionBase;
/**
 * Defines a new Lambda Layer version.
 */
class LayerVersion extends LayerVersionBase {
    /**
     * Imports a Layer that has been defined externally.
     *
     * @param scope the parent Construct that will use the imported layer.
     * @param id    the id of the imported layer in the construct tree.
     * @param props the properties of the imported layer.
     */
    static import(scope, id, props) {
        return new ImportedLayerVersion(scope, id, props);
    }
    constructor(scope, id, props) {
        super(scope, id);
        if (props.compatibleRuntimes && props.compatibleRuntimes.length === 0) {
            throw new Error('Attempted to define a Lambda layer that supports no runtime!');
        }
        if (props.code.isInline) {
            throw new Error('Lambda layers cannot be created from inline code');
        }
        // Allow usage of the code in this context...
        props.code.bind(this);
        const resource = new lambda_generated_1.CfnLayerVersion(this, 'Resource', {
            compatibleRuntimes: props.compatibleRuntimes && props.compatibleRuntimes.map(r => r.name),
            content: new cdk.Token(() => props.code._toJSON(resource)),
            description: props.description,
            layerName: props.name,
            licenseInfo: props.license,
        });
        this.layerVersionArn = resource.layerVersionArn;
        this.compatibleRuntimes = props.compatibleRuntimes;
    }
}
exports.LayerVersion = LayerVersion;
class ImportedLayerVersion extends LayerVersionBase {
    constructor(parent, id, props) {
        super(parent, id);
        if (props.compatibleRuntimes && props.compatibleRuntimes.length === 0) {
            throw new Error('Attempted to import a Lambda layer that supports no runtime!');
        }
        this.layerVersionArn = props.layerVersionArn;
        this.compatibleRuntimes = props.compatibleRuntimes;
    }
}
/**
 * A Singleton Lambda Layer Version. The construct gurantees exactly one LayerVersion will be created in a given Stack
 * for the provided ``uuid``. It is recommended to use ``uuidgen`` to create a new ``uuid`` each time a new singleton
 * layer is created.
 */
class SingletonLayerVersion extends cdk.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        this.layerVersion = this.ensureLayerVersion(props);
    }
    get layerVersionArn() {
        return this.layerVersion.layerVersionArn;
    }
    get compatibleRuntimes() {
        return this.layerVersion.compatibleRuntimes;
    }
    export() {
        return {
            layerVersionArn: this.layerVersionArn,
            compatibleRuntimes: this.compatibleRuntimes,
        };
    }
    grantUsage(id, grantee) {
        this.layerVersion.grantUsage(id, grantee);
        return this;
    }
    ensureLayerVersion(props) {
        const singletonId = `SingletonLayer-${props.uuid}`;
        const existing = this.node.stack.node.tryFindChild(singletonId);
        if (existing) {
            return existing;
        }
        return new LayerVersion(this.node.stack, singletonId, props);
    }
}
exports.SingletonLayerVersion = SingletonLayerVersion;
//# sourceMappingURL=data:application/json;base64,