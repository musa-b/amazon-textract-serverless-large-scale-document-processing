"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assets = require("@aws-cdk/assets");
const fs = require("fs");
class Code {
    /**
     * @returns `LambdaS3Code` associated with the specified S3 object.
     * @param bucket The S3 bucket
     * @param key The object key
     * @param objectVersion Optional S3 object version
     */
    static bucket(bucket, key, objectVersion) {
        return new S3Code(bucket, key, objectVersion);
    }
    /**
     * @returns `LambdaInlineCode` with inline code.
     * @param code The actual handler code (limited to 4KiB)
     */
    static inline(code) {
        return new InlineCode(code);
    }
    /**
     * Loads the function code from a local disk asset.
     * @param path Either a directory with the Lambda code bundle or a .zip file
     */
    static asset(path) {
        return new AssetCode(path);
    }
    /**
     * @returns Zip archives the contents of a directory on disk and uses this
     * as the lambda handler's code.
     * @param directoryToZip The directory to zip
     * @deprecated use `lambda.Code.asset(path)` (no need to specify if it's a file or a directory)
     */
    static directory(directoryToZip) {
        return new AssetCode(directoryToZip, assets.AssetPackaging.ZipDirectory);
    }
    /**
     * @returns Uses a file on disk as a lambda handler's code.
     * @param filePath The file path
     * @deprecated use `lambda.Code.asset(path)` (no need to specify if it's a file or a directory)
     */
    static file(filePath) {
        return new AssetCode(filePath, assets.AssetPackaging.File);
    }
    /**
     * Called when the lambda or layer is initialized to allow this object to
     * bind to the stack, add resources and have fun.
     */
    bind(_construct) {
        return;
    }
}
exports.Code = Code;
/**
 * Lambda code from an S3 archive.
 */
class S3Code extends Code {
    constructor(bucket, key, objectVersion) {
        super();
        this.key = key;
        this.objectVersion = objectVersion;
        this.isInline = false;
        if (!bucket.bucketName) {
            throw new Error('bucketName is undefined for the provided bucket');
        }
        this.bucketName = bucket.bucketName;
    }
    /**
     * @internal
     */
    _toJSON(_) {
        return {
            s3Bucket: this.bucketName,
            s3Key: this.key,
            s3ObjectVersion: this.objectVersion
        };
    }
}
exports.S3Code = S3Code;
/**
 * Lambda code from an inline string (limited to 4KiB).
 */
class InlineCode extends Code {
    constructor(code) {
        super();
        this.code = code;
        this.isInline = true;
        if (code.length > 4096) {
            throw new Error("Lambda source is too large, must be <= 4096 but is " + code.length);
        }
    }
    bind(construct) {
        const runtime = construct.runtime;
        if (!runtime.supportsInlineCode) {
            throw new Error(`Inline source not allowed for ${runtime && runtime.name}`);
        }
    }
    /**
     * @internal
     */
    _toJSON(_) {
        return {
            zipFile: this.code
        };
    }
}
exports.InlineCode = InlineCode;
/**
 * Lambda code from a local directory.
 */
class AssetCode extends Code {
    /**
     * @param path The path to the asset file or directory.
     * @param packaging The asset packaging format (optional, determined automatically)
     */
    constructor(path, packaging) {
        super();
        this.path = path;
        this.isInline = false;
        if (packaging !== undefined) {
            this.packaging = packaging;
        }
        else {
            this.packaging = fs.lstatSync(path).isDirectory()
                ? assets.AssetPackaging.ZipDirectory
                : assets.AssetPackaging.File;
        }
    }
    bind(construct) {
        // If the same AssetCode is used multiple times, retain only the first instantiation.
        if (!this.asset) {
            this.asset = new assets.Asset(construct, 'Code', {
                path: this.path,
                packaging: this.packaging
            });
        }
        if (!this.asset.isZipArchive) {
            throw new Error(`Asset must be a .zip file or a directory (${this.path})`);
        }
    }
    /**
     * @internal
     */
    _toJSON(resource) {
        if (resource) {
            // https://github.com/awslabs/aws-cdk/issues/1432
            this.asset.addResourceMetadata(resource, 'Code');
        }
        return {
            s3Bucket: this.asset.s3BucketName,
            s3Key: this.asset.s3ObjectKey
        };
    }
}
exports.AssetCode = AssetCode;
//# sourceMappingURL=data:application/json;base64,