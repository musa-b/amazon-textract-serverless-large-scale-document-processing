"use strict";
/**
 * Generates patches into the spec-source/600_RefKinds_patch.json document for any resource not having one yet.
 *
 * It will prompt the user for the RefKind to be applied for any new resource class, and offers completion assis for all
 * the known (already used at least once) RefKind values. New values can be introduced but they will need to be typed
 * twice (for confirmation of the user's intention).
 */
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs-extra");
const path = require("path");
const readline = require("readline");
const lib_1 = require("../lib");
const patchFile = path.join(__dirname, '..', 'spec-source', '600_RefKinds_patch.json');
async function main() {
    // tslint:disable-next-line:no-var-requires
    const patches = require(patchFile);
    const knownKindsSet = new Set(Object.values(patches.ResourceTypes).map((patchSet) => patchSet.patch.operations[0].value));
    const knownKinds = [...knownKindsSet];
    const rl = readline.createInterface(process.stdin, process.stdout, (line) => {
        return [knownKinds.filter(kind => kind.startsWith(line)), line];
    });
    for (const namespace of lib_1.namespaces()) {
        const spec = lib_1.filteredSpecification(name => name.startsWith(namespace));
        for (const resource of Object.keys(spec.ResourceTypes)) {
            if (!(resource in patches.ResourceTypes)) {
                let value;
                while (!value) {
                    value = await new Promise(ok => rl.question(`RefKind of ${resource}: `, ok));
                    if (!knownKindsSet.has(value)) {
                        if (value !== '') {
                            const confirm = await new Promise(ok => rl.question('Type the same value again to confirm: ', ok));
                            if (confirm !== value) {
                                value = undefined;
                            }
                        }
                    }
                }
                patches.ResourceTypes[resource] = {
                    patch: {
                        operations: [{ op: 'add', path: '/RefKind', value }],
                        description: `Set RefKind of ${resource} to ${value}`,
                    },
                };
            }
        }
    }
    await new Promise(async (ok, ko) => {
        rl.once('close', () => fs.writeJson(patchFile, patches, { encoding: 'utf8', spaces: 2 }).then(ok).catch(ko));
        rl.close();
    });
}
main().catch(e => {
    // tslint:disable-next-line:no-console
    console.error(e);
    process.exit(-1);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRkLW1pc3NpbmctcmVma2luZHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJhZGQtbWlzc2luZy1yZWZraW5kcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7OztHQU1HOztBQUVILCtCQUFnQztBQUNoQyw2QkFBOEI7QUFDOUIscUNBQXNDO0FBQ3RDLGdDQUEyRDtBQUUzRCxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxJQUFJLEVBQUUsYUFBYSxFQUFFLHlCQUF5QixDQUFDLENBQUM7QUFFdkYsS0FBSyxVQUFVLElBQUk7SUFDakIsMkNBQTJDO0lBQzNDLE1BQU0sT0FBTyxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUNuQyxNQUFNLGFBQWEsR0FBRyxJQUFJLEdBQUcsQ0FBUyxNQUFNLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxRQUFhLEVBQUUsRUFBRSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDdkksTUFBTSxVQUFVLEdBQUcsQ0FBQyxHQUFHLGFBQWEsQ0FBQyxDQUFDO0lBRXRDLE1BQU0sRUFBRSxHQUFHLFFBQVEsQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBWSxFQUFFLEVBQUU7UUFDbEYsT0FBTyxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDbEUsQ0FBQyxDQUFDLENBQUM7SUFDSCxLQUFLLE1BQU0sU0FBUyxJQUFJLGdCQUFVLEVBQUUsRUFBRTtRQUNwQyxNQUFNLElBQUksR0FBRywyQkFBcUIsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztRQUN2RSxLQUFLLE1BQU0sUUFBUSxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxFQUFFO1lBQ3RELElBQUksQ0FBQyxDQUFDLFFBQVEsSUFBSSxPQUFPLENBQUMsYUFBYSxDQUFDLEVBQUU7Z0JBQ3hDLElBQUksS0FBeUIsQ0FBQztnQkFDOUIsT0FBTyxDQUFDLEtBQUssRUFBRTtvQkFDYixLQUFLLEdBQUcsTUFBTSxJQUFJLE9BQU8sQ0FBUyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsY0FBYyxRQUFRLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO29CQUNyRixJQUFJLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRTt3QkFDN0IsSUFBSSxLQUFLLEtBQUssRUFBRSxFQUFFOzRCQUNoQixNQUFNLE9BQU8sR0FBRyxNQUFNLElBQUksT0FBTyxDQUFTLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyx3Q0FBd0MsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDOzRCQUMzRyxJQUFJLE9BQU8sS0FBSyxLQUFLLEVBQUU7Z0NBQ3JCLEtBQUssR0FBRyxTQUFTLENBQUM7NkJBQ25CO3lCQUNGO3FCQUNGO2lCQUNGO2dCQUNELE9BQU8sQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLEdBQUc7b0JBQ2hDLEtBQUssRUFBRTt3QkFDTCxVQUFVLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsQ0FBQzt3QkFDcEQsV0FBVyxFQUFFLGtCQUFrQixRQUFRLE9BQU8sS0FBSyxFQUFFO3FCQUN0RDtpQkFDRixDQUFDO2FBQ0g7U0FDRjtLQUNGO0lBQ0QsTUFBTSxJQUFJLE9BQU8sQ0FBTyxLQUFLLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFO1FBQ3ZDLEVBQUUsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUMsU0FBUyxFQUFFLE9BQU8sRUFBRSxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQzdHLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUNiLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQztBQUVELElBQUksRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRTtJQUNmLHNDQUFzQztJQUN0QyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2pCLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNuQixDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogR2VuZXJhdGVzIHBhdGNoZXMgaW50byB0aGUgc3BlYy1zb3VyY2UvNjAwX1JlZktpbmRzX3BhdGNoLmpzb24gZG9jdW1lbnQgZm9yIGFueSByZXNvdXJjZSBub3QgaGF2aW5nIG9uZSB5ZXQuXG4gKlxuICogSXQgd2lsbCBwcm9tcHQgdGhlIHVzZXIgZm9yIHRoZSBSZWZLaW5kIHRvIGJlIGFwcGxpZWQgZm9yIGFueSBuZXcgcmVzb3VyY2UgY2xhc3MsIGFuZCBvZmZlcnMgY29tcGxldGlvbiBhc3NpcyBmb3IgYWxsXG4gKiB0aGUga25vd24gKGFscmVhZHkgdXNlZCBhdCBsZWFzdCBvbmNlKSBSZWZLaW5kIHZhbHVlcy4gTmV3IHZhbHVlcyBjYW4gYmUgaW50cm9kdWNlZCBidXQgdGhleSB3aWxsIG5lZWQgdG8gYmUgdHlwZWRcbiAqIHR3aWNlIChmb3IgY29uZmlybWF0aW9uIG9mIHRoZSB1c2VyJ3MgaW50ZW50aW9uKS5cbiAqL1xuXG5pbXBvcnQgZnMgPSByZXF1aXJlKCdmcy1leHRyYScpO1xuaW1wb3J0IHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG5pbXBvcnQgcmVhZGxpbmUgPSByZXF1aXJlKCdyZWFkbGluZScpO1xuaW1wb3J0IHsgZmlsdGVyZWRTcGVjaWZpY2F0aW9uLCBuYW1lc3BhY2VzIH0gZnJvbSAnLi4vbGliJztcblxuY29uc3QgcGF0Y2hGaWxlID0gcGF0aC5qb2luKF9fZGlybmFtZSwgJy4uJywgJ3NwZWMtc291cmNlJywgJzYwMF9SZWZLaW5kc19wYXRjaC5qc29uJyk7XG5cbmFzeW5jIGZ1bmN0aW9uIG1haW4oKSB7XG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby12YXItcmVxdWlyZXNcbiAgY29uc3QgcGF0Y2hlcyA9IHJlcXVpcmUocGF0Y2hGaWxlKTtcbiAgY29uc3Qga25vd25LaW5kc1NldCA9IG5ldyBTZXQ8c3RyaW5nPihPYmplY3QudmFsdWVzKHBhdGNoZXMuUmVzb3VyY2VUeXBlcykubWFwKChwYXRjaFNldDogYW55KSA9PiBwYXRjaFNldC5wYXRjaC5vcGVyYXRpb25zWzBdLnZhbHVlKSk7XG4gIGNvbnN0IGtub3duS2luZHMgPSBbLi4ua25vd25LaW5kc1NldF07XG5cbiAgY29uc3QgcmwgPSByZWFkbGluZS5jcmVhdGVJbnRlcmZhY2UocHJvY2Vzcy5zdGRpbiwgcHJvY2Vzcy5zdGRvdXQsIChsaW5lOiBzdHJpbmcpID0+IHtcbiAgICByZXR1cm4gW2tub3duS2luZHMuZmlsdGVyKGtpbmQgPT4ga2luZC5zdGFydHNXaXRoKGxpbmUpKSwgbGluZV07XG4gIH0pO1xuICBmb3IgKGNvbnN0IG5hbWVzcGFjZSBvZiBuYW1lc3BhY2VzKCkpIHtcbiAgICBjb25zdCBzcGVjID0gZmlsdGVyZWRTcGVjaWZpY2F0aW9uKG5hbWUgPT4gbmFtZS5zdGFydHNXaXRoKG5hbWVzcGFjZSkpO1xuICAgIGZvciAoY29uc3QgcmVzb3VyY2Ugb2YgT2JqZWN0LmtleXMoc3BlYy5SZXNvdXJjZVR5cGVzKSkge1xuICAgICAgaWYgKCEocmVzb3VyY2UgaW4gcGF0Y2hlcy5SZXNvdXJjZVR5cGVzKSkge1xuICAgICAgICBsZXQgdmFsdWU6IHN0cmluZyB8IHVuZGVmaW5lZDtcbiAgICAgICAgd2hpbGUgKCF2YWx1ZSkge1xuICAgICAgICAgIHZhbHVlID0gYXdhaXQgbmV3IFByb21pc2U8c3RyaW5nPihvayA9PiBybC5xdWVzdGlvbihgUmVmS2luZCBvZiAke3Jlc291cmNlfTogYCwgb2spKTtcbiAgICAgICAgICBpZiAoIWtub3duS2luZHNTZXQuaGFzKHZhbHVlKSkge1xuICAgICAgICAgICAgaWYgKHZhbHVlICE9PSAnJykge1xuICAgICAgICAgICAgICBjb25zdCBjb25maXJtID0gYXdhaXQgbmV3IFByb21pc2U8c3RyaW5nPihvayA9PiBybC5xdWVzdGlvbignVHlwZSB0aGUgc2FtZSB2YWx1ZSBhZ2FpbiB0byBjb25maXJtOiAnLCBvaykpO1xuICAgICAgICAgICAgICBpZiAoY29uZmlybSAhPT0gdmFsdWUpIHtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBwYXRjaGVzLlJlc291cmNlVHlwZXNbcmVzb3VyY2VdID0ge1xuICAgICAgICAgIHBhdGNoOiB7XG4gICAgICAgICAgICBvcGVyYXRpb25zOiBbeyBvcDogJ2FkZCcsIHBhdGg6ICcvUmVmS2luZCcsIHZhbHVlIH1dLFxuICAgICAgICAgICAgZGVzY3JpcHRpb246IGBTZXQgUmVmS2luZCBvZiAke3Jlc291cmNlfSB0byAke3ZhbHVlfWAsXG4gICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgYXdhaXQgbmV3IFByb21pc2U8dm9pZD4oYXN5bmMgKG9rLCBrbykgPT4ge1xuICAgIHJsLm9uY2UoJ2Nsb3NlJywgKCkgPT4gZnMud3JpdGVKc29uKHBhdGNoRmlsZSwgcGF0Y2hlcywgeyBlbmNvZGluZzogJ3V0ZjgnLCBzcGFjZXM6IDIgfSkudGhlbihvaykuY2F0Y2goa28pKTtcbiAgICBybC5jbG9zZSgpO1xuICB9KTtcbn1cblxubWFpbigpLmNhdGNoKGUgPT4ge1xuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tY29uc29sZVxuICBjb25zb2xlLmVycm9yKGUpO1xuICBwcm9jZXNzLmV4aXQoLTEpO1xufSk7XG4iXX0=