"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const path = require("path");
const util = require("util");
const readFile = util.promisify(fs.readFile);
const writeFile = util.promisify(fs.writeFile);
async function main() {
    const args = process.argv.slice(2);
    if (args.length < 2) {
        process.stderr.write(`Usage: set-refspec RESOURCE [RESOURCE] [...] KIND`);
        process.exit(1);
    }
    const kind = args[args.length - 1];
    const resources = args.slice(0, args.length - 1);
    const patchFile = path.join(__dirname, '..', 'spec-source', '600_RefKinds_patch.json');
    const patches = JSON.parse(await readFile(patchFile, { encoding: 'utf-8' }));
    for (const resource of resources) {
        patches.ResourceTypes[resource] = {
            patch: {
                operations: [
                    {
                        op: "add",
                        path: "/RefKind",
                        value: kind,
                    }
                ],
                description: `Set RefKind of ${resource} to ${kind}`
            }
        };
    }
    await writeFile(patchFile, JSON.stringify(patches, undefined, 2), { encoding: 'utf-8' });
}
main().catch(e => {
    // tslint:disable-next-line:no-console
    console.error(e);
    process.exit(1);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2V0LXJlZmtpbmQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJzZXQtcmVma2luZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHlCQUEwQjtBQUMxQiw2QkFBOEI7QUFDOUIsNkJBQThCO0FBRTlCLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQzdDLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBRS9DLEtBQUssVUFBVSxJQUFJO0lBQ2pCLE1BQU0sSUFBSSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRW5DLElBQUksSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7UUFDbkIsT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsbURBQW1ELENBQUMsQ0FBQztRQUMxRSxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQ2pCO0lBRUQsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDbkMsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztJQUVqRCxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxJQUFJLEVBQUUsYUFBYSxFQUFFLHlCQUF5QixDQUFDLENBQUM7SUFDdkYsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLFFBQVEsQ0FBQyxTQUFTLEVBQUUsRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBRTdFLEtBQUssTUFBTSxRQUFRLElBQUksU0FBUyxFQUFFO1FBQ2hDLE9BQU8sQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLEdBQUc7WUFDaEMsS0FBSyxFQUFFO2dCQUNMLFVBQVUsRUFBRTtvQkFDVjt3QkFDRSxFQUFFLEVBQUUsS0FBSzt3QkFDVCxJQUFJLEVBQUUsVUFBVTt3QkFDaEIsS0FBSyxFQUFFLElBQUk7cUJBQ1o7aUJBQ0Y7Z0JBQ0QsV0FBVyxFQUFFLGtCQUFrQixRQUFRLE9BQU8sSUFBSSxFQUFFO2FBQ3JEO1NBQ0YsQ0FBQztLQUNIO0lBRUQsTUFBTSxTQUFTLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxFQUFFLFNBQVMsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDO0FBQzNGLENBQUM7QUFFRCxJQUFJLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUU7SUFDZixzQ0FBc0M7SUFDdEMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNqQixPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2xCLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGZzID0gcmVxdWlyZSgnZnMnKTtcbmltcG9ydCBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuaW1wb3J0IHV0aWwgPSByZXF1aXJlKCd1dGlsJyk7XG5cbmNvbnN0IHJlYWRGaWxlID0gdXRpbC5wcm9taXNpZnkoZnMucmVhZEZpbGUpO1xuY29uc3Qgd3JpdGVGaWxlID0gdXRpbC5wcm9taXNpZnkoZnMud3JpdGVGaWxlKTtcblxuYXN5bmMgZnVuY3Rpb24gbWFpbigpIHtcbiAgY29uc3QgYXJncyA9IHByb2Nlc3MuYXJndi5zbGljZSgyKTtcblxuICBpZiAoYXJncy5sZW5ndGggPCAyKSB7XG4gICAgcHJvY2Vzcy5zdGRlcnIud3JpdGUoYFVzYWdlOiBzZXQtcmVmc3BlYyBSRVNPVVJDRSBbUkVTT1VSQ0VdIFsuLi5dIEtJTkRgKTtcbiAgICBwcm9jZXNzLmV4aXQoMSk7XG4gIH1cblxuICBjb25zdCBraW5kID0gYXJnc1thcmdzLmxlbmd0aCAtIDFdO1xuICBjb25zdCByZXNvdXJjZXMgPSBhcmdzLnNsaWNlKDAsIGFyZ3MubGVuZ3RoIC0gMSk7XG5cbiAgY29uc3QgcGF0Y2hGaWxlID0gcGF0aC5qb2luKF9fZGlybmFtZSwgJy4uJywgJ3NwZWMtc291cmNlJywgJzYwMF9SZWZLaW5kc19wYXRjaC5qc29uJyk7XG4gIGNvbnN0IHBhdGNoZXMgPSBKU09OLnBhcnNlKGF3YWl0IHJlYWRGaWxlKHBhdGNoRmlsZSwgeyBlbmNvZGluZzogJ3V0Zi04JyB9KSk7XG5cbiAgZm9yIChjb25zdCByZXNvdXJjZSBvZiByZXNvdXJjZXMpIHtcbiAgICBwYXRjaGVzLlJlc291cmNlVHlwZXNbcmVzb3VyY2VdID0ge1xuICAgICAgcGF0Y2g6IHtcbiAgICAgICAgb3BlcmF0aW9uczogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIG9wOiBcImFkZFwiLFxuICAgICAgICAgICAgcGF0aDogXCIvUmVmS2luZFwiLFxuICAgICAgICAgICAgdmFsdWU6IGtpbmQsXG4gICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBkZXNjcmlwdGlvbjogYFNldCBSZWZLaW5kIG9mICR7cmVzb3VyY2V9IHRvICR7a2luZH1gXG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIGF3YWl0IHdyaXRlRmlsZShwYXRjaEZpbGUsIEpTT04uc3RyaW5naWZ5KHBhdGNoZXMsIHVuZGVmaW5lZCwgMiksIHsgZW5jb2Rpbmc6ICd1dGYtOCcgfSk7XG59XG5cbm1haW4oKS5jYXRjaChlID0+IHtcbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWNvbnNvbGVcbiAgY29uc29sZS5lcnJvcihlKTtcbiAgcHJvY2Vzcy5leGl0KDEpO1xufSk7Il19