"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const kms = require("@aws-cdk/aws-kms");
const cdk = require("@aws-cdk/cdk");
const queue_base_1 = require("./queue-base");
const sqs_generated_1 = require("./sqs.generated");
const validate_props_1 = require("./validate-props");
/**
 * What kind of encryption to apply to this queue
 */
var QueueEncryption;
(function (QueueEncryption) {
    /**
     * Messages in the queue are not encrypted
     */
    QueueEncryption["Unencrypted"] = "NONE";
    /**
     * Server-side KMS encryption with a master key managed by SQS.
     */
    QueueEncryption["KmsManaged"] = "MANAGED";
    /**
     * Server-side encryption with a KMS key managed by the user.
     *
     * If `encryptionKey` is specified, this key will be used, otherwise, one will be defined.
     */
    QueueEncryption["Kms"] = "KMS";
})(QueueEncryption = exports.QueueEncryption || (exports.QueueEncryption = {}));
/**
 * A new Amazon SQS queue
 */
class Queue extends queue_base_1.QueueBase {
    constructor(scope, id, props = {}) {
        super(scope, id);
        this.autoCreatePolicy = true;
        validate_props_1.validateProps(props);
        const redrivePolicy = props.deadLetterQueue
            ? {
                deadLetterTargetArn: props.deadLetterQueue.queue.queueArn,
                maxReceiveCount: props.deadLetterQueue.maxReceiveCount
            }
            : undefined;
        const { encryptionMasterKey, encryptionProps } = _determineEncryptionProps.call(this);
        const queue = new sqs_generated_1.CfnQueue(this, 'Resource', Object.assign({ queueName: props.queueName }, this.determineFifoProps(props), encryptionProps, { redrivePolicy, delaySeconds: props.deliveryDelaySec, maximumMessageSize: props.maxMessageSizeBytes, messageRetentionPeriod: props.retentionPeriodSec, receiveMessageWaitTimeSeconds: props.receiveMessageWaitTimeSec, visibilityTimeout: props.visibilityTimeoutSec }));
        this.encryptionMasterKey = encryptionMasterKey;
        this.queueArn = queue.queueArn;
        this.queueName = queue.queueName;
        this.queueUrl = queue.ref;
        function _determineEncryptionProps() {
            let encryption = props.encryption || QueueEncryption.Unencrypted;
            if (encryption !== QueueEncryption.Kms && props.encryptionMasterKey) {
                encryption = QueueEncryption.Kms; // KMS is implied by specifying an encryption key
            }
            if (encryption === QueueEncryption.Unencrypted) {
                return { encryptionProps: {} };
            }
            if (encryption === QueueEncryption.KmsManaged) {
                const masterKey = kms.EncryptionKey.import(this, 'Key', {
                    keyArn: 'alias/aws/sqs'
                });
                return {
                    encryptionMasterKey: masterKey,
                    encryptionProps: {
                        kmsMasterKeyId: 'alias/aws/sqs',
                        kmsDataKeyReusePeriodSeconds: props.dataKeyReuseSec
                    }
                };
            }
            if (encryption === QueueEncryption.Kms) {
                const masterKey = props.encryptionMasterKey || new kms.EncryptionKey(this, 'Key', {
                    description: `Created by ${this.node.path}`
                });
                return {
                    encryptionMasterKey: masterKey,
                    encryptionProps: {
                        kmsMasterKeyId: masterKey.keyArn,
                        kmsDataKeyReusePeriodSeconds: props.dataKeyReuseSec
                    }
                };
            }
            throw new Error(`Unexpected 'encryptionType': ${encryption}`);
        }
    }
    /**
     * Import an existing queue
     */
    static import(scope, id, props) {
        return new ImportedQueue(scope, id, props);
    }
    /**
     * Export a queue
     */
    export() {
        return {
            queueArn: new cdk.CfnOutput(this, 'QueueArn', { value: this.queueArn }).makeImportValue().toString(),
            queueUrl: new cdk.CfnOutput(this, 'QueueUrl', { value: this.queueUrl }).makeImportValue().toString(),
            keyArn: this.encryptionMasterKey
                ? new cdk.CfnOutput(this, 'KeyArn', { value: this.encryptionMasterKey.keyArn }).makeImportValue().toString()
                : undefined
        };
    }
    /**
     * Look at the props, see if the FIFO props agree, and return the correct subset of props
     */
    determineFifoProps(props) {
        // Check if any of the signals that we have say that this is a FIFO queue.
        let fifoQueue = props.fifo;
        if (typeof fifoQueue === 'undefined' && typeof props.queueName === 'string' && props.queueName.endsWith('.fifo')) {
            fifoQueue = true;
        }
        if (typeof fifoQueue === 'undefined' && props.contentBasedDeduplication) {
            fifoQueue = true;
        }
        // If we have a name, see that it agrees with the FIFO setting
        if (typeof props.queueName === 'string') {
            if (fifoQueue && !props.queueName.endsWith('.fifo')) {
                throw new Error("FIFO queue names must end in '.fifo'");
            }
            if (!fifoQueue && props.queueName.endsWith('.fifo')) {
                throw new Error("Non-FIFO queue name may not end in '.fifo'");
            }
        }
        if (props.contentBasedDeduplication && !fifoQueue) {
            throw new Error('Content-based deduplication can only be defined for FIFO queues');
        }
        return {
            contentBasedDeduplication: props.contentBasedDeduplication,
            fifoQueue,
        };
    }
}
exports.Queue = Queue;
/**
 * A queue that has been imported
 */
class ImportedQueue extends queue_base_1.QueueBase {
    constructor(scope, id, props) {
        super(scope, id);
        this.props = props;
        this.autoCreatePolicy = false;
        this.queueArn = props.queueArn;
        this.queueUrl = props.queueUrl;
        this.queueName = this.node.stack.parseArn(props.queueArn).resource;
        if (props.keyArn) {
            this.encryptionMasterKey = kms.EncryptionKey.import(this, 'Key', {
                keyArn: props.keyArn
            });
        }
    }
    /**
     * Export a queue
     */
    export() {
        return this.props;
    }
}
//# sourceMappingURL=data:application/json;base64,