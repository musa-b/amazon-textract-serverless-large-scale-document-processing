"use strict";
const assert_1 = require("@aws-cdk/assert");
const cdk = require("@aws-cdk/cdk");
const stepfunctions = require("../lib");
module.exports = {
    'instantiate Activity'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        // WHEN
        new stepfunctions.Activity(stack, 'Activity');
        // THEN
        assert_1.expect(stack).to(assert_1.haveResource('AWS::StepFunctions::Activity', {
            Name: 'Activity'
        }));
        test.done();
    },
    'Activity can be used in a Task'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        // WHEN
        const activity = new stepfunctions.Activity(stack, 'Activity');
        const task = new stepfunctions.Task(stack, 'Task', {
            resource: activity
        });
        new stepfunctions.StateMachine(stack, 'SM', {
            definition: task
        });
        // THEN
        assert_1.expect(stack).to(assert_1.haveResource('AWS::StepFunctions::StateMachine', {
            DefinitionString: {
                "Fn::Join": ["", [
                        "{\"StartAt\":\"Task\",\"States\":{\"Task\":{\"End\":true,\"Type\":\"Task\",\"Resource\":\"",
                        { Ref: "Activity04690B0A" },
                        "\"}}}"
                    ]]
            },
        }));
        test.done();
    },
    'Activity exposes metrics'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        // WHEN
        const activity = new stepfunctions.Activity(stack, 'Activity');
        // THEN
        const sharedMetric = {
            periodSec: 300,
            namespace: 'AWS/States',
            dimensions: { ActivityArn: { Ref: 'Activity04690B0A' } },
        };
        test.deepEqual(stack.node.resolve(activity.metricRunTime()), Object.assign({}, sharedMetric, { metricName: 'ActivityRunTime', statistic: 'Average' }));
        test.deepEqual(stack.node.resolve(activity.metricFailed()), Object.assign({}, sharedMetric, { metricName: 'ActivitiesFailed', statistic: 'Sum' }));
        test.done();
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC5hY3Rpdml0eS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInRlc3QuYWN0aXZpdHkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLDRDQUF1RDtBQUN2RCxvQ0FBcUM7QUFFckMsd0NBQXlDO0FBRXpDLGlCQUFTO0lBQ0wsc0JBQXNCLENBQUMsSUFBVTtRQUM3QixRQUFRO1FBQ1IsTUFBTSxLQUFLLEdBQUcsSUFBSSxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUM7UUFFOUIsT0FBTztRQUNQLElBQUksYUFBYSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsVUFBVSxDQUFDLENBQUM7UUFFOUMsT0FBTztRQUNQLGVBQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMscUJBQVksQ0FBQyw4QkFBOEIsRUFBRTtZQUMxRCxJQUFJLEVBQUUsVUFBVTtTQUNuQixDQUFDLENBQUMsQ0FBQztRQUVKLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNoQixDQUFDO0lBRUQsZ0NBQWdDLENBQUMsSUFBVTtRQUN2QyxRQUFRO1FBQ1IsTUFBTSxLQUFLLEdBQUcsSUFBSSxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUM7UUFFOUIsT0FBTztRQUNQLE1BQU0sUUFBUSxHQUFHLElBQUksYUFBYSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsVUFBVSxDQUFDLENBQUM7UUFDL0QsTUFBTSxJQUFJLEdBQUcsSUFBSSxhQUFhLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxNQUFNLEVBQUU7WUFDL0MsUUFBUSxFQUFFLFFBQVE7U0FDckIsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxhQUFhLENBQUMsWUFBWSxDQUFDLEtBQUssRUFBRSxJQUFJLEVBQUU7WUFDeEMsVUFBVSxFQUFFLElBQUk7U0FDbkIsQ0FBQyxDQUFDO1FBRUgsT0FBTztRQUNQLGVBQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMscUJBQVksQ0FBQyxrQ0FBa0MsRUFBRTtZQUM5RCxnQkFBZ0IsRUFBRTtnQkFDZCxVQUFVLEVBQUUsQ0FBQyxFQUFFLEVBQUU7d0JBQ2IsNEZBQTRGO3dCQUM1RixFQUFFLEdBQUcsRUFBRSxrQkFBa0IsRUFBRTt3QkFDM0IsT0FBTztxQkFFVixDQUFDO2FBQ0w7U0FDSixDQUFDLENBQUMsQ0FBQztRQUVKLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNoQixDQUFDO0lBRUQsMEJBQTBCLENBQUMsSUFBVTtRQUNqQyxRQUFRO1FBQ1IsTUFBTSxLQUFLLEdBQUcsSUFBSSxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUM7UUFFOUIsT0FBTztRQUNQLE1BQU0sUUFBUSxHQUFHLElBQUksYUFBYSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsVUFBVSxDQUFDLENBQUM7UUFFL0QsT0FBTztRQUNQLE1BQU0sWUFBWSxHQUFHO1lBQ2pCLFNBQVMsRUFBRSxHQUFHO1lBQ2QsU0FBUyxFQUFFLFlBQVk7WUFDdkIsVUFBVSxFQUFFLEVBQUUsV0FBVyxFQUFFLEVBQUUsR0FBRyxFQUFFLGtCQUFrQixFQUFFLEVBQUM7U0FDMUQsQ0FBQztRQUNGLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLGFBQWEsRUFBRSxDQUFDLG9CQUNwRCxZQUFZLElBQ2YsVUFBVSxFQUFFLGlCQUFpQixFQUM3QixTQUFTLEVBQUUsU0FBUyxJQUN0QixDQUFDO1FBRUgsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsWUFBWSxFQUFFLENBQUMsb0JBQ25ELFlBQVksSUFDZixVQUFVLEVBQUUsa0JBQWtCLEVBQzlCLFNBQVMsRUFBRSxLQUFLLElBQ2xCLENBQUM7UUFFSCxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDaEIsQ0FBQztDQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBleHBlY3QsIGhhdmVSZXNvdXJjZSB9IGZyb20gJ0Bhd3MtY2RrL2Fzc2VydCc7XG5pbXBvcnQgY2RrID0gcmVxdWlyZSgnQGF3cy1jZGsvY2RrJyk7XG5pbXBvcnQgeyBUZXN0IH0gZnJvbSAnbm9kZXVuaXQnO1xuaW1wb3J0IHN0ZXBmdW5jdGlvbnMgPSByZXF1aXJlKCcuLi9saWInKTtcblxuZXhwb3J0ID0ge1xuICAgICdpbnN0YW50aWF0ZSBBY3Rpdml0eScodGVzdDogVGVzdCkge1xuICAgICAgICAvLyBHSVZFTlxuICAgICAgICBjb25zdCBzdGFjayA9IG5ldyBjZGsuU3RhY2soKTtcblxuICAgICAgICAvLyBXSEVOXG4gICAgICAgIG5ldyBzdGVwZnVuY3Rpb25zLkFjdGl2aXR5KHN0YWNrLCAnQWN0aXZpdHknKTtcblxuICAgICAgICAvLyBUSEVOXG4gICAgICAgIGV4cGVjdChzdGFjaykudG8oaGF2ZVJlc291cmNlKCdBV1M6OlN0ZXBGdW5jdGlvbnM6OkFjdGl2aXR5Jywge1xuICAgICAgICAgICAgTmFtZTogJ0FjdGl2aXR5J1xuICAgICAgICB9KSk7XG5cbiAgICAgICAgdGVzdC5kb25lKCk7XG4gICAgfSxcblxuICAgICdBY3Rpdml0eSBjYW4gYmUgdXNlZCBpbiBhIFRhc2snKHRlc3Q6IFRlc3QpIHtcbiAgICAgICAgLy8gR0lWRU5cbiAgICAgICAgY29uc3Qgc3RhY2sgPSBuZXcgY2RrLlN0YWNrKCk7XG5cbiAgICAgICAgLy8gV0hFTlxuICAgICAgICBjb25zdCBhY3Rpdml0eSA9IG5ldyBzdGVwZnVuY3Rpb25zLkFjdGl2aXR5KHN0YWNrLCAnQWN0aXZpdHknKTtcbiAgICAgICAgY29uc3QgdGFzayA9IG5ldyBzdGVwZnVuY3Rpb25zLlRhc2soc3RhY2ssICdUYXNrJywge1xuICAgICAgICAgICAgcmVzb3VyY2U6IGFjdGl2aXR5XG4gICAgICAgIH0pO1xuICAgICAgICBuZXcgc3RlcGZ1bmN0aW9ucy5TdGF0ZU1hY2hpbmUoc3RhY2ssICdTTScsIHtcbiAgICAgICAgICAgIGRlZmluaXRpb246IHRhc2tcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gVEhFTlxuICAgICAgICBleHBlY3Qoc3RhY2spLnRvKGhhdmVSZXNvdXJjZSgnQVdTOjpTdGVwRnVuY3Rpb25zOjpTdGF0ZU1hY2hpbmUnLCB7XG4gICAgICAgICAgICBEZWZpbml0aW9uU3RyaW5nOiB7XG4gICAgICAgICAgICAgICAgXCJGbjo6Sm9pblwiOiBbXCJcIiwgW1xuICAgICAgICAgICAgICAgICAgICBcIntcXFwiU3RhcnRBdFxcXCI6XFxcIlRhc2tcXFwiLFxcXCJTdGF0ZXNcXFwiOntcXFwiVGFza1xcXCI6e1xcXCJFbmRcXFwiOnRydWUsXFxcIlR5cGVcXFwiOlxcXCJUYXNrXFxcIixcXFwiUmVzb3VyY2VcXFwiOlxcXCJcIixcbiAgICAgICAgICAgICAgICAgICAgeyBSZWY6IFwiQWN0aXZpdHkwNDY5MEIwQVwiIH0sXG4gICAgICAgICAgICAgICAgICAgIFwiXFxcIn19fVwiXG5cbiAgICAgICAgICAgICAgICBdXVxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSkpO1xuXG4gICAgICAgIHRlc3QuZG9uZSgpO1xuICAgIH0sXG5cbiAgICAnQWN0aXZpdHkgZXhwb3NlcyBtZXRyaWNzJyh0ZXN0OiBUZXN0KSB7XG4gICAgICAgIC8vIEdJVkVOXG4gICAgICAgIGNvbnN0IHN0YWNrID0gbmV3IGNkay5TdGFjaygpO1xuXG4gICAgICAgIC8vIFdIRU5cbiAgICAgICAgY29uc3QgYWN0aXZpdHkgPSBuZXcgc3RlcGZ1bmN0aW9ucy5BY3Rpdml0eShzdGFjaywgJ0FjdGl2aXR5Jyk7XG5cbiAgICAgICAgLy8gVEhFTlxuICAgICAgICBjb25zdCBzaGFyZWRNZXRyaWMgPSB7XG4gICAgICAgICAgICBwZXJpb2RTZWM6IDMwMCxcbiAgICAgICAgICAgIG5hbWVzcGFjZTogJ0FXUy9TdGF0ZXMnLFxuICAgICAgICAgICAgZGltZW5zaW9uczogeyBBY3Rpdml0eUFybjogeyBSZWY6ICdBY3Rpdml0eTA0NjkwQjBBJyB9fSxcbiAgICAgICAgfTtcbiAgICAgICAgdGVzdC5kZWVwRXF1YWwoc3RhY2subm9kZS5yZXNvbHZlKGFjdGl2aXR5Lm1ldHJpY1J1blRpbWUoKSksIHtcbiAgICAgICAgICAgIC4uLnNoYXJlZE1ldHJpYyxcbiAgICAgICAgICAgIG1ldHJpY05hbWU6ICdBY3Rpdml0eVJ1blRpbWUnLFxuICAgICAgICAgICAgc3RhdGlzdGljOiAnQXZlcmFnZSdcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGVzdC5kZWVwRXF1YWwoc3RhY2subm9kZS5yZXNvbHZlKGFjdGl2aXR5Lm1ldHJpY0ZhaWxlZCgpKSwge1xuICAgICAgICAgICAgLi4uc2hhcmVkTWV0cmljLFxuICAgICAgICAgICAgbWV0cmljTmFtZTogJ0FjdGl2aXRpZXNGYWlsZWQnLFxuICAgICAgICAgICAgc3RhdGlzdGljOiAnU3VtJ1xuICAgICAgICB9KTtcblxuICAgICAgICB0ZXN0LmRvbmUoKTtcbiAgICB9XG59OyJdfQ==