"use strict";
const assert_1 = require("@aws-cdk/assert");
const events = require("@aws-cdk/aws-events");
const iam = require("@aws-cdk/aws-iam");
const cdk = require("@aws-cdk/cdk");
const stepfunctions = require("../lib");
class FakeResource {
    asStepFunctionsTaskResource(_callingTask) {
        const resourceArn = 'resource';
        return {
            resourceArn,
            policyStatements: [new iam.PolicyStatement()
                    .addAction('resource:Everything')
                    .addResource('resource')
            ],
            metricPrefixSingular: 'FakeResource',
            metricPrefixPlural: 'FakeResources',
            metricDimensions: { ResourceArn: resourceArn },
        };
    }
}
module.exports = {
    'Tasks can add permissions to the execution role'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        const task = new stepfunctions.Task(stack, 'Task', {
            resource: new FakeResource(),
        });
        // WHEN
        new stepfunctions.StateMachine(stack, 'SM', {
            definition: task
        });
        // THEN
        assert_1.expect(stack).to(assert_1.haveResource('AWS::IAM::Policy', {
            PolicyDocument: {
                Version: '2012-10-17',
                Statement: [
                    {
                        Action: "resource:Everything",
                        Effect: "Allow",
                        Resource: "resource"
                    }
                ],
            }
        }));
        test.done();
    },
    'Tasks hidden inside a Parallel state are also included'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        const task = new stepfunctions.Task(stack, 'Task', {
            resource: new FakeResource(),
        });
        const para = new stepfunctions.Parallel(stack, 'Para');
        para.branch(task);
        // WHEN
        new stepfunctions.StateMachine(stack, 'SM', {
            definition: para
        });
        // THEN
        assert_1.expect(stack).to(assert_1.haveResource('AWS::IAM::Policy', {
            PolicyDocument: {
                Version: '2012-10-17',
                Statement: [
                    {
                        Action: "resource:Everything",
                        Effect: "Allow",
                        Resource: "resource"
                    }
                ],
            }
        }));
        test.done();
    },
    'Task metrics use values returned from resource'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        // WHEN
        const task = new stepfunctions.Task(stack, 'Task', { resource: new FakeResource() });
        // THEN
        const sharedMetric = {
            periodSec: 300,
            namespace: 'AWS/States',
            dimensions: { ResourceArn: 'resource' },
        };
        test.deepEqual(stack.node.resolve(task.metricRunTime()), Object.assign({}, sharedMetric, { metricName: 'FakeResourceRunTime', statistic: 'Average' }));
        test.deepEqual(stack.node.resolve(task.metricFailed()), Object.assign({}, sharedMetric, { metricName: 'FakeResourcesFailed', statistic: 'Sum' }));
        test.done();
    },
    'Task should render InputPath / Parameters / OutputPath correctly'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        const task = new stepfunctions.Task(stack, 'Task', {
            resource: new FakeResource(),
            inputPath: "$",
            outputPath: "$.state",
            parameters: {
                "input.$": "$",
                "stringArgument": "inital-task",
                "numberArgument": 123,
                "booleanArgument": true,
                "arrayArgument": ["a", "b", "c"]
            }
        });
        // WHEN
        const taskState = task.toStateJson();
        // THEN
        test.deepEqual(taskState, { End: true,
            Retry: undefined,
            Catch: undefined,
            InputPath: '$',
            Parameters: { 'input.$': '$',
                'stringArgument': 'inital-task',
                'numberArgument': 123,
                'booleanArgument': true,
                'arrayArgument': ['a', 'b', 'c'] },
            OutputPath: '$.state',
            Type: 'Task',
            Comment: undefined,
            Resource: 'resource',
            ResultPath: undefined,
            TimeoutSeconds: undefined,
            HeartbeatSeconds: undefined
        });
        test.done();
    },
    'State machine can be used as Event Rule target'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        const rule = new events.EventRule(stack, 'Rule', {
            scheduleExpression: 'rate(1 minute)'
        });
        const stateMachine = new stepfunctions.StateMachine(stack, 'SM', {
            definition: new stepfunctions.Wait(stack, 'Hello', {})
        });
        // WHEN
        rule.addTarget(stateMachine, {
            jsonTemplate: { SomeParam: 'SomeValue' },
        });
        // THEN
        assert_1.expect(stack).to(assert_1.haveResourceLike('AWS::Events::Rule', {
            Targets: [
                {
                    InputTransformer: {
                        InputTemplate: "{\"SomeParam\":\"SomeValue\"}"
                    },
                }
            ]
        }));
        test.done();
    },
};
//# sourceMappingURL=data:application/json;base64,