"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cdk = require("@aws-cdk/cdk");
const stepfunctions = require("../lib");
class JobPollerStack extends cdk.Stack {
    constructor(scope, id, props = {}) {
        super(scope, id, props);
        const submitJobActivity = new stepfunctions.Activity(this, 'SubmitJob');
        const checkJobActivity = new stepfunctions.Activity(this, 'CheckJob');
        const submitJob = new stepfunctions.Task(this, 'Submit Job', {
            resource: submitJobActivity,
            resultPath: '$.guid',
        });
        const waitX = new stepfunctions.Wait(this, 'Wait X Seconds', { secondsPath: '$.wait_time' });
        const getStatus = new stepfunctions.Task(this, 'Get Job Status', {
            resource: checkJobActivity,
            inputPath: '$.guid',
            resultPath: '$.status',
        });
        const isComplete = new stepfunctions.Choice(this, 'Job Complete?');
        const jobFailed = new stepfunctions.Fail(this, 'Job Failed', {
            cause: 'AWS Batch Job Failed',
            error: 'DescribeJob returned FAILED',
        });
        const finalStatus = new stepfunctions.Task(this, 'Get Final Job Status', {
            resource: checkJobActivity,
            inputPath: '$.guid',
        });
        const chain = stepfunctions.Chain
            .start(submitJob)
            .next(waitX)
            .next(getStatus)
            .next(isComplete
            .when(stepfunctions.Condition.stringEquals('$.status', 'FAILED'), jobFailed)
            .when(stepfunctions.Condition.stringEquals('$.status', 'SUCCEEDED'), finalStatus)
            .otherwise(waitX));
        new stepfunctions.StateMachine(this, 'StateMachine', {
            definition: chain,
            timeoutSec: 30
        });
    }
}
const app = new cdk.App();
new JobPollerStack(app, 'aws-stepfunctions-integ');
app.run();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZWcuam9iLXBvbGxlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImludGVnLmpvYi1wb2xsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxvQ0FBc0M7QUFDdEMsd0NBQXlDO0FBRXpDLE1BQU0sY0FBZSxTQUFRLEdBQUcsQ0FBQyxLQUFLO0lBQ2xDLFlBQVksS0FBYyxFQUFFLEVBQVUsRUFBRSxRQUF3QixFQUFFO1FBQzlELEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBRXhCLE1BQU0saUJBQWlCLEdBQUcsSUFBSSxhQUFhLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxXQUFXLENBQUMsQ0FBQztRQUN4RSxNQUFNLGdCQUFnQixHQUFHLElBQUksYUFBYSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsVUFBVSxDQUFDLENBQUM7UUFFdEUsTUFBTSxTQUFTLEdBQUcsSUFBSSxhQUFhLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxZQUFZLEVBQUU7WUFDekQsUUFBUSxFQUFFLGlCQUFpQjtZQUMzQixVQUFVLEVBQUUsUUFBUTtTQUN2QixDQUFDLENBQUM7UUFDSCxNQUFNLEtBQUssR0FBRyxJQUFJLGFBQWEsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLGdCQUFnQixFQUFFLEVBQUUsV0FBVyxFQUFFLGFBQWEsRUFBRSxDQUFDLENBQUM7UUFDN0YsTUFBTSxTQUFTLEdBQUcsSUFBSSxhQUFhLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxnQkFBZ0IsRUFBRTtZQUM3RCxRQUFRLEVBQUUsZ0JBQWdCO1lBQzFCLFNBQVMsRUFBRSxRQUFRO1lBQ25CLFVBQVUsRUFBRSxVQUFVO1NBQ3pCLENBQUMsQ0FBQztRQUNILE1BQU0sVUFBVSxHQUFHLElBQUksYUFBYSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsZUFBZSxDQUFDLENBQUM7UUFDbkUsTUFBTSxTQUFTLEdBQUcsSUFBSSxhQUFhLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxZQUFZLEVBQUU7WUFDekQsS0FBSyxFQUFFLHNCQUFzQjtZQUM3QixLQUFLLEVBQUUsNkJBQTZCO1NBQ3ZDLENBQUMsQ0FBQztRQUNILE1BQU0sV0FBVyxHQUFHLElBQUksYUFBYSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsc0JBQXNCLEVBQUU7WUFDckUsUUFBUSxFQUFFLGdCQUFnQjtZQUMxQixTQUFTLEVBQUUsUUFBUTtTQUN0QixDQUFDLENBQUM7UUFFSCxNQUFNLEtBQUssR0FBRyxhQUFhLENBQUMsS0FBSzthQUM1QixLQUFLLENBQUMsU0FBUyxDQUFDO2FBQ2hCLElBQUksQ0FBQyxLQUFLLENBQUM7YUFDWCxJQUFJLENBQUMsU0FBUyxDQUFDO2FBQ2YsSUFBSSxDQUFDLFVBQVU7YUFDWCxJQUFJLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUMsVUFBVSxFQUFFLFFBQVEsQ0FBQyxFQUFFLFNBQVMsQ0FBQzthQUMzRSxJQUFJLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUMsVUFBVSxFQUFFLFdBQVcsQ0FBQyxFQUFFLFdBQVcsQ0FBQzthQUNoRixTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUUzQixJQUFJLGFBQWEsQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLGNBQWMsRUFBRTtZQUNqRCxVQUFVLEVBQUUsS0FBSztZQUNqQixVQUFVLEVBQUUsRUFBRTtTQUNqQixDQUFDLENBQUM7SUFDUCxDQUFDO0NBQ0o7QUFFRCxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUMxQixJQUFJLGNBQWMsQ0FBQyxHQUFHLEVBQUUseUJBQXlCLENBQUMsQ0FBQztBQUNuRCxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY2RrID0gcmVxdWlyZSggJ0Bhd3MtY2RrL2NkaycpO1xuaW1wb3J0IHN0ZXBmdW5jdGlvbnMgPSByZXF1aXJlKCcuLi9saWInKTtcblxuY2xhc3MgSm9iUG9sbGVyU3RhY2sgZXh0ZW5kcyBjZGsuU3RhY2sge1xuICAgIGNvbnN0cnVjdG9yKHNjb3BlOiBjZGsuQXBwLCBpZDogc3RyaW5nLCBwcm9wczogY2RrLlN0YWNrUHJvcHMgPSB7fSkge1xuICAgICAgICBzdXBlcihzY29wZSwgaWQsIHByb3BzKTtcblxuICAgICAgICBjb25zdCBzdWJtaXRKb2JBY3Rpdml0eSA9IG5ldyBzdGVwZnVuY3Rpb25zLkFjdGl2aXR5KHRoaXMsICdTdWJtaXRKb2InKTtcbiAgICAgICAgY29uc3QgY2hlY2tKb2JBY3Rpdml0eSA9IG5ldyBzdGVwZnVuY3Rpb25zLkFjdGl2aXR5KHRoaXMsICdDaGVja0pvYicpO1xuXG4gICAgICAgIGNvbnN0IHN1Ym1pdEpvYiA9IG5ldyBzdGVwZnVuY3Rpb25zLlRhc2sodGhpcywgJ1N1Ym1pdCBKb2InLCB7XG4gICAgICAgICAgICByZXNvdXJjZTogc3VibWl0Sm9iQWN0aXZpdHksXG4gICAgICAgICAgICByZXN1bHRQYXRoOiAnJC5ndWlkJyxcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IHdhaXRYID0gbmV3IHN0ZXBmdW5jdGlvbnMuV2FpdCh0aGlzLCAnV2FpdCBYIFNlY29uZHMnLCB7IHNlY29uZHNQYXRoOiAnJC53YWl0X3RpbWUnIH0pO1xuICAgICAgICBjb25zdCBnZXRTdGF0dXMgPSBuZXcgc3RlcGZ1bmN0aW9ucy5UYXNrKHRoaXMsICdHZXQgSm9iIFN0YXR1cycsIHtcbiAgICAgICAgICAgIHJlc291cmNlOiBjaGVja0pvYkFjdGl2aXR5LFxuICAgICAgICAgICAgaW5wdXRQYXRoOiAnJC5ndWlkJyxcbiAgICAgICAgICAgIHJlc3VsdFBhdGg6ICckLnN0YXR1cycsXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBpc0NvbXBsZXRlID0gbmV3IHN0ZXBmdW5jdGlvbnMuQ2hvaWNlKHRoaXMsICdKb2IgQ29tcGxldGU/Jyk7XG4gICAgICAgIGNvbnN0IGpvYkZhaWxlZCA9IG5ldyBzdGVwZnVuY3Rpb25zLkZhaWwodGhpcywgJ0pvYiBGYWlsZWQnLCB7XG4gICAgICAgICAgICBjYXVzZTogJ0FXUyBCYXRjaCBKb2IgRmFpbGVkJyxcbiAgICAgICAgICAgIGVycm9yOiAnRGVzY3JpYmVKb2IgcmV0dXJuZWQgRkFJTEVEJyxcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IGZpbmFsU3RhdHVzID0gbmV3IHN0ZXBmdW5jdGlvbnMuVGFzayh0aGlzLCAnR2V0IEZpbmFsIEpvYiBTdGF0dXMnLCB7XG4gICAgICAgICAgICByZXNvdXJjZTogY2hlY2tKb2JBY3Rpdml0eSxcbiAgICAgICAgICAgIGlucHV0UGF0aDogJyQuZ3VpZCcsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IGNoYWluID0gc3RlcGZ1bmN0aW9ucy5DaGFpblxuICAgICAgICAgICAgLnN0YXJ0KHN1Ym1pdEpvYilcbiAgICAgICAgICAgIC5uZXh0KHdhaXRYKVxuICAgICAgICAgICAgLm5leHQoZ2V0U3RhdHVzKVxuICAgICAgICAgICAgLm5leHQoaXNDb21wbGV0ZVxuICAgICAgICAgICAgICAgIC53aGVuKHN0ZXBmdW5jdGlvbnMuQ29uZGl0aW9uLnN0cmluZ0VxdWFscygnJC5zdGF0dXMnLCAnRkFJTEVEJyksIGpvYkZhaWxlZClcbiAgICAgICAgICAgICAgICAud2hlbihzdGVwZnVuY3Rpb25zLkNvbmRpdGlvbi5zdHJpbmdFcXVhbHMoJyQuc3RhdHVzJywgJ1NVQ0NFRURFRCcpLCBmaW5hbFN0YXR1cylcbiAgICAgICAgICAgICAgICAub3RoZXJ3aXNlKHdhaXRYKSk7XG5cbiAgICAgICAgbmV3IHN0ZXBmdW5jdGlvbnMuU3RhdGVNYWNoaW5lKHRoaXMsICdTdGF0ZU1hY2hpbmUnLCB7XG4gICAgICAgICAgICBkZWZpbml0aW9uOiBjaGFpbixcbiAgICAgICAgICAgIHRpbWVvdXRTZWM6IDMwXG4gICAgICAgIH0pO1xuICAgIH1cbn1cblxuY29uc3QgYXBwID0gbmV3IGNkay5BcHAoKTtcbm5ldyBKb2JQb2xsZXJTdGFjayhhcHAsICdhd3Mtc3RlcGZ1bmN0aW9ucy1pbnRlZycpO1xuYXBwLnJ1bigpOyJdfQ==