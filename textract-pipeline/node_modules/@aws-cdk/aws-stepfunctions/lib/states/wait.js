"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chain_1 = require("../chain");
const state_1 = require("./state");
/**
 * Define a Wait state in the state machine
 *
 * A Wait state can be used to delay execution of the state machine for a while.
 */
class Wait extends state_1.State {
    constructor(scope, id, props) {
        super(scope, id, props);
        this.seconds = props.seconds;
        this.timestamp = props.timestamp;
        this.secondsPath = props.secondsPath;
        this.timestampPath = props.timestampPath;
        this.endStates = [this];
    }
    /**
     * Continue normal execution with the given state
     */
    next(next) {
        super.makeNext(next.startState);
        return chain_1.Chain.sequence(this, next);
    }
    /**
     * Return the Amazon States Language object for this state
     */
    toStateJson() {
        return Object.assign({ Type: state_1.StateType.Wait, Comment: this.comment, Seconds: this.seconds, Timestamp: this.timestamp, SecondsPath: this.secondsPath, TimestampPath: this.timestampPath }, this.renderNextEnd());
    }
}
exports.Wait = Wait;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2FpdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIndhaXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQSxvQ0FBaUM7QUFFakMsbUNBQTJDO0FBZ0QzQzs7OztHQUlHO0FBQ0gsTUFBYSxJQUFLLFNBQVEsYUFBSztJQVEzQixZQUFZLEtBQW9CLEVBQUUsRUFBVSxFQUFFLEtBQWdCO1FBQzFELEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBRXhCLElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQztRQUM3QixJQUFJLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQyxTQUFTLENBQUM7UUFDakMsSUFBSSxDQUFDLFdBQVcsR0FBRyxLQUFLLENBQUMsV0FBVyxDQUFDO1FBQ3JDLElBQUksQ0FBQyxhQUFhLEdBQUcsS0FBSyxDQUFDLGFBQWEsQ0FBQztRQUV6QyxJQUFJLENBQUMsU0FBUyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDNUIsQ0FBQztJQUVEOztPQUVHO0lBQ0ksSUFBSSxDQUFDLElBQWdCO1FBQ3hCLEtBQUssQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ2hDLE9BQU8sYUFBSyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDdEMsQ0FBQztJQUVEOztPQUVHO0lBQ0ksV0FBVztRQUNkLHVCQUNJLElBQUksRUFBRSxpQkFBUyxDQUFDLElBQUksRUFDcEIsT0FBTyxFQUFFLElBQUksQ0FBQyxPQUFPLEVBQ3JCLE9BQU8sRUFBRSxJQUFJLENBQUMsT0FBTyxFQUNyQixTQUFTLEVBQUUsSUFBSSxDQUFDLFNBQVMsRUFDekIsV0FBVyxFQUFFLElBQUksQ0FBQyxXQUFXLEVBQzdCLGFBQWEsRUFBRSxJQUFJLENBQUMsYUFBYSxJQUM5QixJQUFJLENBQUMsYUFBYSxFQUFFLEVBQ3pCO0lBQ04sQ0FBQztDQUNKO0FBekNELG9CQXlDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjZGsgPSByZXF1aXJlKCdAYXdzLWNkay9jZGsnKTtcbmltcG9ydCB7IENoYWluIH0gZnJvbSAnLi4vY2hhaW4nO1xuaW1wb3J0IHsgSUNoYWluYWJsZSwgSU5leHRhYmxlIH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHsgU3RhdGUsIFN0YXRlVHlwZSB9IGZyb20gJy4vc3RhdGUnO1xuXG4vKipcbiAqIFByb3BlcnRpZXMgZm9yIGRlZmluaW5nIGEgV2FpdCBzdGF0ZVxuICovXG5leHBvcnQgaW50ZXJmYWNlIFdhaXRQcm9wcyB7XG4gICAgLyoqXG4gICAgICogQW4gb3B0aW9uYWwgZGVzY3JpcHRpb24gZm9yIHRoaXMgc3RhdGVcbiAgICAgKlxuICAgICAqIEBkZWZhdWx0IE5vIGNvbW1lbnRcbiAgICAgKi9cbiAgICByZWFkb25seSBjb21tZW50Pzogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogV2FpdCBhIGZpeGVkIG51bWJlciBvZiBzZWNvbmRzXG4gICAgICpcbiAgICAgKiBFeGFjdGx5IG9uZSBvZiBzZWNvbmRzLCBzZWNvbmRzUGF0aCwgdGltZXN0YW1wLCB0aW1lc3RhbXBQYXRoIG11c3QgYmUgc3VwcGxpZWQuXG4gICAgICovXG4gICAgcmVhZG9ubHkgc2Vjb25kcz86IG51bWJlcjtcblxuICAgIC8qKlxuICAgICAqIFdhaXQgdW50aWwgdGhlIGdpdmVuIElTTzg2MDEgdGltZXN0YW1wXG4gICAgICpcbiAgICAgKiBFeGFjdGx5IG9uZSBvZiBzZWNvbmRzLCBzZWNvbmRzUGF0aCwgdGltZXN0YW1wLCB0aW1lc3RhbXBQYXRoIG11c3QgYmUgc3VwcGxpZWQuXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZSAyMDE2LTAzLTE0VDAxOjU5OjAwWlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHRpbWVzdGFtcD86IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIFdhaXQgZm9yIGEgbnVtYmVyIG9mIHNlY29uZHMgc3RvcmVkIGluIHRoZSBzdGF0ZSBvYmplY3QuXG4gICAgICpcbiAgICAgKiBFeGFjdGx5IG9uZSBvZiBzZWNvbmRzLCBzZWNvbmRzUGF0aCwgdGltZXN0YW1wLCB0aW1lc3RhbXBQYXRoIG11c3QgYmUgc3VwcGxpZWQuXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZSAkLndhaXRTZWNvbmRzXG4gICAgICovXG4gICAgcmVhZG9ubHkgc2Vjb25kc1BhdGg/OiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBXYWl0IHVudGlsIGEgdGltZXN0YW1wIGZvdW5kIGluIHRoZSBzdGF0ZSBvYmplY3QuXG4gICAgICpcbiAgICAgKiBFeGFjdGx5IG9uZSBvZiBzZWNvbmRzLCBzZWNvbmRzUGF0aCwgdGltZXN0YW1wLCB0aW1lc3RhbXBQYXRoIG11c3QgYmUgc3VwcGxpZWQuXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZSAkLndhaXRUaW1lc3RhbXBcbiAgICAgKi9cbiAgICByZWFkb25seSB0aW1lc3RhbXBQYXRoPzogc3RyaW5nO1xufVxuXG4vKipcbiAqIERlZmluZSBhIFdhaXQgc3RhdGUgaW4gdGhlIHN0YXRlIG1hY2hpbmVcbiAqXG4gKiBBIFdhaXQgc3RhdGUgY2FuIGJlIHVzZWQgdG8gZGVsYXkgZXhlY3V0aW9uIG9mIHRoZSBzdGF0ZSBtYWNoaW5lIGZvciBhIHdoaWxlLlxuICovXG5leHBvcnQgY2xhc3MgV2FpdCBleHRlbmRzIFN0YXRlIGltcGxlbWVudHMgSU5leHRhYmxlIHtcbiAgICBwdWJsaWMgcmVhZG9ubHkgZW5kU3RhdGVzOiBJTmV4dGFibGVbXTtcblxuICAgIHByaXZhdGUgcmVhZG9ubHkgc2Vjb25kcz86IG51bWJlcjtcbiAgICBwcml2YXRlIHJlYWRvbmx5IHRpbWVzdGFtcD86IHN0cmluZztcbiAgICBwcml2YXRlIHJlYWRvbmx5IHNlY29uZHNQYXRoPzogc3RyaW5nO1xuICAgIHByaXZhdGUgcmVhZG9ubHkgdGltZXN0YW1wUGF0aD86IHN0cmluZztcblxuICAgIGNvbnN0cnVjdG9yKHNjb3BlOiBjZGsuQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogV2FpdFByb3BzKSB7XG4gICAgICAgIHN1cGVyKHNjb3BlLCBpZCwgcHJvcHMpO1xuXG4gICAgICAgIHRoaXMuc2Vjb25kcyA9IHByb3BzLnNlY29uZHM7XG4gICAgICAgIHRoaXMudGltZXN0YW1wID0gcHJvcHMudGltZXN0YW1wO1xuICAgICAgICB0aGlzLnNlY29uZHNQYXRoID0gcHJvcHMuc2Vjb25kc1BhdGg7XG4gICAgICAgIHRoaXMudGltZXN0YW1wUGF0aCA9IHByb3BzLnRpbWVzdGFtcFBhdGg7XG5cbiAgICAgICAgdGhpcy5lbmRTdGF0ZXMgPSBbdGhpc107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udGludWUgbm9ybWFsIGV4ZWN1dGlvbiB3aXRoIHRoZSBnaXZlbiBzdGF0ZVxuICAgICAqL1xuICAgIHB1YmxpYyBuZXh0KG5leHQ6IElDaGFpbmFibGUpOiBDaGFpbiB7XG4gICAgICAgIHN1cGVyLm1ha2VOZXh0KG5leHQuc3RhcnRTdGF0ZSk7XG4gICAgICAgIHJldHVybiBDaGFpbi5zZXF1ZW5jZSh0aGlzLCBuZXh0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm4gdGhlIEFtYXpvbiBTdGF0ZXMgTGFuZ3VhZ2Ugb2JqZWN0IGZvciB0aGlzIHN0YXRlXG4gICAgICovXG4gICAgcHVibGljIHRvU3RhdGVKc29uKCk6IG9iamVjdCB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBUeXBlOiBTdGF0ZVR5cGUuV2FpdCxcbiAgICAgICAgICAgIENvbW1lbnQ6IHRoaXMuY29tbWVudCxcbiAgICAgICAgICAgIFNlY29uZHM6IHRoaXMuc2Vjb25kcyxcbiAgICAgICAgICAgIFRpbWVzdGFtcDogdGhpcy50aW1lc3RhbXAsXG4gICAgICAgICAgICBTZWNvbmRzUGF0aDogdGhpcy5zZWNvbmRzUGF0aCxcbiAgICAgICAgICAgIFRpbWVzdGFtcFBhdGg6IHRoaXMudGltZXN0YW1wUGF0aCxcbiAgICAgICAgICAgIC4uLnRoaXMucmVuZGVyTmV4dEVuZCgpLFxuICAgICAgICB9O1xuICAgIH1cbn0iXX0=