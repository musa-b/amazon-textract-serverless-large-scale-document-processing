"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cdk = require("@aws-cdk/cdk");
const crypto = require("crypto");
const apigateway_generated_1 = require("./apigateway.generated");
/**
 * A Deployment of a REST API.
 *
 * An immutable representation of a RestApi resource that can be called by users
 * using Stages. A deployment must be associated with a Stage for it to be
 * callable over the Internet.
 *
 * Normally, you don't need to define deployments manually. The RestApi
 * construct manages a Deployment resource that represents the latest model. It
 * can be accessed through `restApi.latestDeployment` (unless `deploy: false` is
 * set when defining the `RestApi`).
 *
 * If you manually define this resource, you will need to know that since
 * deployments are immutable, as long as the resource's logical ID doesn't
 * change, the deployment will represent the snapshot in time in which the
 * resource was created. This means that if you modify the RestApi model (i.e.
 * add methods or resources), these changes will not be reflected unless a new
 * deployment resource is created.
 *
 * To achieve this behavior, the method `addToLogicalId(data)` can be used to
 * augment the logical ID generated for the deployment resource such that it
 * will include arbitrary data. This is done automatically for the
 * `restApi.latestDeployment` deployment.
 *
 * Furthermore, since a deployment does not reference any of the REST API
 * resources and methods, CloudFormation will likely provision it before these
 * resources are created, which means that it will represent a "half-baked"
 * model. Use the `node.addDependency(dep)` method to circumvent that. This is done
 * automatically for the `restApi.latestDeployment` deployment.
 */
class Deployment extends cdk.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        this.resource = new LatestDeploymentResource(this, 'Resource', {
            description: props.description,
            restApiId: props.api.restApiId,
        });
        if (props.retainDeployments) {
            this.resource.options.deletionPolicy = cdk.DeletionPolicy.Retain;
        }
        this.api = props.api;
        this.deploymentId = new cdk.Token(() => this.resource.deploymentId).toString();
    }
    /**
     * Adds a component to the hash that determines this Deployment resource's
     * logical ID.
     *
     * This should be called by constructs of the API Gateway model that want to
     * invalidate the deployment when their settings change. The component will
     * be resolve()ed during synthesis so tokens are welcome.
     */
    addToLogicalId(data) {
        this.resource.addToLogicalId(data);
    }
}
exports.Deployment = Deployment;
class LatestDeploymentResource extends apigateway_generated_1.CfnDeployment {
    constructor(scope, id, props) {
        super(scope, id, props);
        this.hashComponents = new Array();
        // from this point, don't allow accessing logical ID before synthesis
        this.lazyLogicalIdRequired = true;
        this.logicalIdToken = new cdk.Token(() => this.lazyLogicalId);
    }
    /**
     * Returns either the original or the custom logical ID of this resource.
     */
    get logicalId() {
        if (!this.lazyLogicalIdRequired) {
            return this.originalLogicalId;
        }
        return this.logicalIdToken.toString();
    }
    /**
     * Sets the logical ID of this resource.
     */
    set logicalId(v) {
        this.originalLogicalId = v;
    }
    /**
     * Returns a lazy reference to this resource (evaluated only upon synthesis).
     */
    get ref() {
        return new cdk.Token(() => ({ Ref: this.lazyLogicalId })).toString();
    }
    /**
     * Does nothing.
     */
    set ref(_v) {
        return;
    }
    /**
     * Allows adding arbitrary data to the hashed logical ID of this deployment.
     * This can be used to couple the deployment to the API Gateway model.
     */
    addToLogicalId(data) {
        // if the construct is locked, it means we are already synthesizing and then
        // we can't modify the hash because we might have already calculated it.
        if (this.node.locked) {
            throw new Error('Cannot modify the logical ID when the construct is locked');
        }
        this.hashComponents.push(data);
    }
    /**
     * Hooks into synthesis to calculate a logical ID that hashes all the components
     * add via `addToLogicalId`.
     */
    prepare() {
        // if hash components were added to the deployment, we use them to calculate
        // a logical ID for the deployment resource.
        if (this.hashComponents.length === 0) {
            this.lazyLogicalId = this.originalLogicalId;
        }
        else {
            const md5 = crypto.createHash('md5');
            this.hashComponents
                .map(c => this.node.resolve(c))
                .forEach(c => md5.update(JSON.stringify(c)));
            this.lazyLogicalId = this.originalLogicalId + md5.digest("hex");
        }
        super.prepare();
    }
}
//# sourceMappingURL=data:application/json;base64,