"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cdk_1 = require("@aws-cdk/cdk");
const util_1 = require("./util");
const vpn_1 = require("./vpn");
/**
 * The type of Subnet
 */
var SubnetType;
(function (SubnetType) {
    /**
     * Isolated Subnets do not route Outbound traffic
     *
     * This can be good for subnets with RDS or
     * Elasticache endpoints
     */
    SubnetType[SubnetType["Isolated"] = 1] = "Isolated";
    /**
     * Subnet that routes to the internet, but not vice versa.
     *
     * Instances in a private subnet can connect to the Internet, but will not
     * allow connections to be initiated from the Internet.
     *
     * Outbound traffic will be routed via a NAT Gateway. Preference being in
     * the same AZ, but if not available will use another AZ (control by
     * specifing `maxGateways` on VpcNetwork). This might be used for
     * experimental cost conscious accounts or accounts where HA outbound
     * traffic is not needed.
     */
    SubnetType[SubnetType["Private"] = 2] = "Private";
    /**
     * Subnet connected to the Internet
     *
     * Instances in a Public subnet can connect to the Internet and can be
     * connected to from the Internet as long as they are launched with public
     * IPs (controlled on the AutoScalingGroup or other constructs that launch
     * instances).
     *
     * Public subnets route outbound traffic via an Internet Gateway.
     */
    SubnetType[SubnetType["Public"] = 3] = "Public";
})(SubnetType = exports.SubnetType || (exports.SubnetType = {}));
/**
 * A new or imported VPC
 */
class VpcNetworkBase extends cdk_1.Construct {
    constructor() {
        super(...arguments);
        /**
         * Dependencies for internet connectivity
         */
        this.internetDependencies = new Array();
        /**
         * Dependencies for NAT connectivity
         */
        this.natDependencies = new Array();
    }
    /**
     * Returns IDs of selected subnets
     */
    subnetIds(selection = {}) {
        selection = reifySelectionDefaults(selection);
        const nets = this.subnets(selection);
        if (nets.length === 0) {
            throw new Error(`There are no ${describeSelection(selection)} in this VPC. Use a different VPC subnet selection.`);
        }
        return nets.map(n => n.subnetId);
    }
    /**
     * Return a dependable object representing internet connectivity for the given subnets
     */
    subnetInternetDependencies(selection = {}) {
        selection = reifySelectionDefaults(selection);
        const ret = new CompositeDependable();
        for (const subnet of this.subnets(selection)) {
            ret.add(subnet.internetConnectivityEstablished);
        }
        return ret;
    }
    /**
     * Adds a new VPN connection to this VPC
     */
    addVpnConnection(id, options) {
        return new vpn_1.VpnConnection(this, id, Object.assign({ vpc: this }, options));
    }
    /**
     * Return whether all of the given subnets are from the VPC's public subnets.
     */
    isPublicSubnets(subnetIds) {
        const pubIds = new Set(this.publicSubnets.map(n => n.subnetId));
        return subnetIds.every(pubIds.has.bind(pubIds));
    }
    /**
     * The region where this VPC is defined
     */
    get vpcRegion() {
        return this.node.stack.region;
    }
    /**
     * Return the subnets appropriate for the placement strategy
     */
    subnets(selection = {}) {
        selection = reifySelectionDefaults(selection);
        // Select by name
        if (selection.subnetName !== undefined) {
            const allSubnets = this.privateSubnets.concat(this.publicSubnets).concat(this.isolatedSubnets);
            const selectedSubnets = allSubnets.filter(s => util_1.subnetName(s) === selection.subnetName);
            if (selectedSubnets.length === 0) {
                throw new Error(`No subnets with name: ${selection.subnetName}`);
            }
            return selectedSubnets;
        }
        // Select by type
        if (selection.subnetType === undefined) {
            return this.privateSubnets;
        }
        return {
            [SubnetType.Isolated]: this.isolatedSubnets,
            [SubnetType.Private]: this.privateSubnets,
            [SubnetType.Public]: this.publicSubnets,
        }[selection.subnetType];
    }
}
exports.VpcNetworkBase = VpcNetworkBase;
/**
 * If the placement strategy is completely "default", reify the defaults so
 * consuming code doesn't have to reimplement the same analysis every time.
 *
 * Returns "private subnets" by default.
 */
function reifySelectionDefaults(placement) {
    if (placement.subnetType !== undefined && placement.subnetName !== undefined) {
        throw new Error('Only one of subnetType and subnetName can be supplied');
    }
    if (placement.subnetType === undefined && placement.subnetName === undefined) {
        return { subnetType: SubnetType.Private };
    }
    return placement;
}
/**
 * Describe the given placement strategy
 */
function describeSelection(placement) {
    if (placement.subnetType !== undefined) {
        return `'${util_1.DEFAULT_SUBNET_NAME[placement.subnetType]}' subnets`;
    }
    if (placement.subnetName !== undefined) {
        return `subnets named '${placement.subnetName}'`;
    }
    return JSON.stringify(placement);
}
class CompositeDependable {
    constructor() {
        this.dependables = new Array();
    }
    /**
     * Add a construct to the dependency roots
     */
    add(dep) {
        this.dependables.push(dep);
    }
    /**
     * Retrieve the current set of dependency roots
     */
    get dependencyRoots() {
        const ret = [];
        for (const dep of this.dependables) {
            ret.push(...dep.dependencyRoots);
        }
        return ret;
    }
}
//# sourceMappingURL=data:application/json;base64,