import cdk = require('@aws-cdk/cdk');
import { IDependable } from '@aws-cdk/cdk';
import { CfnInternetGateway, CfnNatGateway } from './ec2.generated';
import { CfnVPCGatewayAttachment } from './ec2.generated';
import { VpcNetworkProviderProps } from './vpc-network-provider';
import { IVpcNetwork, IVpcSubnet, SubnetSelection, SubnetType, VpcNetworkBase, VpcNetworkImportProps, VpcSubnetImportProps } from './vpc-ref';
import { VpnConnectionOptions } from './vpn';
/**
 * VpcNetworkProps allows you to specify configuration options for a VPC
 */
export interface VpcNetworkProps {
    /**
     * The CIDR range to use for the VPC (e.g. '10.0.0.0/16'). Should be a minimum of /28 and maximum size of /16.
     * The range will be split evenly into two subnets per Availability Zone (one public, one private).
     */
    readonly cidr?: string;
    /**
     * Indicates whether the instances launched in the VPC get public DNS hostnames.
     * If this attribute is true, instances in the VPC get public DNS hostnames,
     * but only if the enableDnsSupport attribute is also set to true.
     */
    readonly enableDnsHostnames?: boolean;
    /**
     * Indicates whether the DNS resolution is supported for the VPC. If this attribute
     * is false, the Amazon-provided DNS server in the VPC that resolves public DNS hostnames
     * to IP addresses is not enabled. If this attribute is true, queries to the Amazon
     * provided DNS server at the 169.254.169.253 IP address, or the reserved IP address
     * at the base of the VPC IPv4 network range plus two will succeed.
     */
    readonly enableDnsSupport?: boolean;
    /**
     * The default tenancy of instances launched into the VPC.
     * By default, instances will be launched with default (shared) tenancy.
     * By setting this to dedicated tenancy, instances will be launched on hardware dedicated
     * to a single AWS customer, unless specifically specified at instance launch time.
     * Please note, not all instance types are usable with Dedicated tenancy.
     */
    readonly defaultInstanceTenancy?: DefaultInstanceTenancy;
    /**
     * Define the maximum number of AZs to use in this region
     *
     * If the region has more AZs than you want to use (for example, because of EIP limits),
     * pick a lower number here. The AZs will be sorted and picked from the start of the list.
     *
     * If you pick a higher number than the number of AZs in the region, all AZs in
     * the region will be selected. To use "all AZs" available to your account, use a
     * high number (such as 99).
     *
     * @default 3
     */
    readonly maxAZs?: number;
    /**
     * The number of NAT Gateways to create.
     *
     * For example, if set this to 1 and your subnet configuration is for 3 Public subnets then only
     * one of the Public subnets will have a gateway and all Private subnets will route to this NAT Gateway.
     * @default maxAZs
     */
    readonly natGateways?: number;
    /**
     * Configures the subnets which will have NAT Gateways
     *
     * You can pick a specific group of subnets by specifying the group name;
     * the picked subnets must be public subnets.
     *
     * @default All public subnets
     */
    readonly natGatewaySubnets?: SubnetSelection;
    /**
     * Configure the subnets to build for each AZ
     *
     * The subnets are constructed in the context of the VPC so you only need
     * specify the configuration. The VPC details (VPC ID, specific CIDR,
     * specific AZ will be calculated during creation)
     *
     * For example if you want 1 public subnet, 1 private subnet, and 1 isolated
     * subnet in each AZ provide the following:
     * subnetConfiguration: [
     *    {
     *      cidrMask: 24,
     *      name: 'ingress',
     *      subnetType: SubnetType.Public,
     *    },
     *    {
     *      cidrMask: 24,
     *      name: 'application',
     *      subnetType: SubnetType.Private,
     *    },
     *    {
     *      cidrMask: 28,
     *      name: 'rds',
     *      subnetType: SubnetType.Isolated,
     *    }
     * ]
     *
     * `cidrMask` is optional and if not provided the IP space in the VPC will be
     * evenly divided between the requested subnets.
     *
     * @default the VPC CIDR will be evenly divided between 1 public and 1
     * private subnet per AZ
     */
    readonly subnetConfiguration?: SubnetConfiguration[];
    /**
     * Indicates whether a VPN gateway should be created and attached to this VPC.
     *
     * @default true when vpnGatewayAsn or vpnConnections is specified.
     */
    readonly vpnGateway?: boolean;
    /**
     * The private Autonomous System Number (ASN) for the VPN gateway.
     *
     * @default Amazon default ASN
     */
    readonly vpnGatewayAsn?: number;
    /**
     * VPN connections to this VPC.
     *
     * @default no connections
     */
    readonly vpnConnections?: {
        [id: string]: VpnConnectionOptions;
    };
    /**
     * Where to propagate VPN routes.
     *
     * @default on the route tables associated with private subnets
     */
    readonly vpnRoutePropagation?: SubnetType[];
}
/**
 * The default tenancy of instances launched into the VPC.
 */
export declare enum DefaultInstanceTenancy {
    /**
     * Instances can be launched with any tenancy.
     */
    Default = "default",
    /**
     * Any instance launched into the VPC automatically has dedicated tenancy, unless you launch it with the default tenancy.
     */
    Dedicated = "dedicated"
}
/**
 * Specify configuration parameters for a VPC to be built
 */
export interface SubnetConfiguration {
    /**
     * The CIDR Mask or the number of leading 1 bits in the routing mask
     *
     * Valid values are 16 - 28
     */
    readonly cidrMask?: number;
    /**
     * The type of Subnet to configure.
     *
     * The Subnet type will control the ability to route and connect to the
     * Internet.
     */
    readonly subnetType: SubnetType;
    /**
     * The common Logical Name for the `VpcSubnet`
     *
     * This name will be suffixed with an integer correlating to a specific
     * availability zone.
     */
    readonly name: string;
    /**
     * Controls if subnet IP space needs to be reserved.
     *
     * When true, the IP space for the subnet is reserved but no actual
     * resources are provisioned. This space is only dependent on the
     * number of availibility zones and on `cidrMask` - all other subnet
     * properties are ignored.
     *
     * @default false
     */
    readonly reserved?: boolean;
}
/**
 * VpcNetwork deploys an AWS VPC, with public and private subnets per Availability Zone.
 * For example:
 *
 * import { VpcNetwork } from '@aws-cdk/aws-ec2'
 *
 * const vpc = new VpcNetwork(this, {
 *   cidr: "10.0.0.0/16"
 * })
 *
 * // Iterate the public subnets
 * for (let subnet of vpc.publicSubnets) {
 *
 * }
 *
 * // Iterate the private subnets
 * for (let subnet of vpc.privateSubnets) {
 *
 * }
 */
export declare class VpcNetwork extends VpcNetworkBase {
    /**
     * @returns The IPv4 CidrBlock as returned by the VPC
     */
    readonly cidr: string;
    /**
     * The default CIDR range used when creating VPCs.
     * This can be overridden using VpcNetworkProps when creating a VPCNetwork resource.
     * e.g. new VpcResource(this, { cidr: '192.168.0.0./16' })
     */
    static readonly DEFAULT_CIDR_RANGE: string;
    /**
     * The default subnet configuration
     *
     * 1 Public and 1 Private subnet per AZ evenly split
     */
    static readonly DEFAULT_SUBNETS: SubnetConfiguration[];
    /**
     * Import an exported VPC
     */
    static import(scope: cdk.Construct, id: string, props: VpcNetworkImportProps): IVpcNetwork;
    /**
     * Import an existing VPC from context
     */
    static importFromContext(scope: cdk.Construct, id: string, props: VpcNetworkProviderProps): IVpcNetwork;
    /**
     * Identifier for this VPC
     */
    readonly vpcId: string;
    /**
     * List of public subnets in this VPC
     */
    readonly publicSubnets: IVpcSubnet[];
    /**
     * List of private subnets in this VPC
     */
    readonly privateSubnets: IVpcSubnet[];
    /**
     * List of isolated subnets in this VPC
     */
    readonly isolatedSubnets: IVpcSubnet[];
    /**
     * AZs for this VPC
     */
    readonly availabilityZones: string[];
    /**
     * Identifier for the VPN gateway
     */
    readonly vpnGatewayId?: string;
    /**
     * The VPC resource
     */
    private resource;
    /**
     * The NetworkBuilder
     */
    private networkBuilder;
    /**
     * Mapping of NatGateway by AZ
     */
    private natGatewayByAZ;
    /**
     * Subnet configurations for this VPC
     */
    private subnetConfiguration;
    /**
     * VpcNetwork creates a VPC that spans a whole region.
     * It will automatically divide the provided VPC CIDR range, and create public and private subnets per Availability Zone.
     * Network routing for the public subnets will be configured to allow outbound access directly via an Internet Gateway.
     * Network routing for the private subnets will be configured to allow outbound access via a set of resilient NAT Gateways (one per AZ).
     */
    constructor(scope: cdk.Construct, id: string, props?: VpcNetworkProps);
    /**
     * Export this VPC from the stack
     */
    export(): VpcNetworkImportProps;
    private createNatGateways;
    /**
     * createSubnets creates the subnets specified by the subnet configuration
     * array or creates the `DEFAULT_SUBNETS` configuration
     */
    private createSubnets;
    private createSubnetResources;
}
/**
 * Specify configuration parameters for a VPC subnet
 */
export interface VpcSubnetProps {
    /**
     * The availability zone for the subnet
     */
    readonly availabilityZone: string;
    /**
     * The VPC which this subnet is part of
     */
    readonly vpcId: string;
    /**
     * The CIDR notation for this subnet
     */
    readonly cidrBlock: string;
    /**
     * Controls if a public IP is associated to an instance at launch
     *
     * Defaults to true in Subnet.Public, false in Subnet.Private or Subnet.Isolated.
     */
    readonly mapPublicIpOnLaunch?: boolean;
}
/**
 * Represents a new VPC subnet resource
 */
export declare class VpcSubnet extends cdk.Construct implements IVpcSubnet {
    static import(scope: cdk.Construct, id: string, props: VpcSubnetImportProps): IVpcSubnet;
    /**
     * The Availability Zone the subnet is located in
     */
    readonly availabilityZone: string;
    /**
     * The subnetId for this particular subnet
     */
    readonly subnetId: string;
    /**
     * Parts of this VPC subnet
     */
    readonly dependencyElements: cdk.IDependable[];
    /**
     * The routeTableId attached to this subnet.
     */
    readonly routeTableId: string;
    private readonly internetDependencies;
    constructor(scope: cdk.Construct, id: string, props: VpcSubnetProps);
    export(): VpcSubnetImportProps;
    readonly internetConnectivityEstablished: IDependable;
    protected addDefaultRouteToNAT(natGatewayId: string): void;
    /**
     * Create a default route that points to a passed IGW, with a dependency
     * on the IGW's attachment to the VPC.
     */
    protected addDefaultRouteToIGW(gateway: CfnInternetGateway, gatewayAttachment: CfnVPCGatewayAttachment): void;
}
/**
 * Represents a public VPC subnet resource
 */
export declare class VpcPublicSubnet extends VpcSubnet {
    constructor(scope: cdk.Construct, id: string, props: VpcSubnetProps);
    /**
     * Create a default route that points to a passed IGW, with a dependency
     * on the IGW's attachment to the VPC.
     */
    addDefaultIGWRouteEntry(gateway: CfnInternetGateway, gatewayAttachment: CfnVPCGatewayAttachment): void;
    /**
     * Creates a new managed NAT gateway attached to this public subnet.
     * Also adds the EIP for the managed NAT.
     * @returns A ref to the the NAT Gateway ID
     */
    addNatGateway(): CfnNatGateway;
}
/**
 * Represents a private VPC subnet resource
 */
export declare class VpcPrivateSubnet extends VpcSubnet {
    constructor(scope: cdk.Construct, id: string, props: VpcSubnetProps);
    /**
     * Adds an entry to this subnets route table that points to the passed NATGatwayId
     */
    addDefaultNatRouteEntry(natGatewayId: string): void;
}
