"use strict";
const assert_1 = require("@aws-cdk/assert");
const cdk_1 = require("@aws-cdk/cdk");
const lib_1 = require("../lib");
module.exports = {
    'can add a vpn connection to a vpc with a vpn gateway'(test) {
        // GIVEN
        const stack = new cdk_1.Stack();
        // WHEN
        new lib_1.VpcNetwork(stack, 'VpcNetwork', {
            vpnConnections: {
                VpnConnection: {
                    asn: 65001,
                    ip: '192.0.2.1'
                }
            }
        });
        // THEN
        assert_1.expect(stack).to(assert_1.haveResource('AWS::EC2::CustomerGateway', {
            BgpAsn: 65001,
            IpAddress: '192.0.2.1',
            Type: 'ipsec.1'
        }));
        assert_1.expect(stack).to(assert_1.haveResource('AWS::EC2::VPNConnection', {
            CustomerGatewayId: {
                Ref: 'VpcNetworkVpnConnectionCustomerGateway8B56D9AF'
            },
            Type: 'ipsec.1',
            VpnGatewayId: {
                Ref: 'VpcNetworkVpnGateway501295FA'
            },
            StaticRoutesOnly: false,
        }));
        test.done();
    },
    'with static routing'(test) {
        // GIVEN
        const stack = new cdk_1.Stack();
        // WHEN
        new lib_1.VpcNetwork(stack, 'VpcNetwork', {
            vpnConnections: {
                static: {
                    ip: '192.0.2.1',
                    staticRoutes: [
                        '192.168.10.0/24',
                        '192.168.20.0/24'
                    ]
                }
            }
        });
        // THEN
        assert_1.expect(stack).to(assert_1.haveResource('AWS::EC2::VPNConnection', {
            CustomerGatewayId: {
                Ref: 'VpcNetworkstaticCustomerGatewayAF2651CC'
            },
            Type: 'ipsec.1',
            VpnGatewayId: {
                Ref: 'VpcNetworkVpnGateway501295FA'
            },
            StaticRoutesOnly: true,
        }));
        assert_1.expect(stack).to(assert_1.haveResource('AWS::EC2::VPNConnectionRoute', {
            DestinationCidrBlock: '192.168.10.0/24',
            VpnConnectionId: {
                Ref: 'VpcNetworkstaticE33EA98C'
            }
        }));
        assert_1.expect(stack).to(assert_1.haveResource('AWS::EC2::VPNConnectionRoute', {
            DestinationCidrBlock: '192.168.20.0/24',
            VpnConnectionId: {
                Ref: 'VpcNetworkstaticE33EA98C'
            }
        }));
        test.done();
    },
    'with tunnel options'(test) {
        // GIVEN
        const stack = new cdk_1.Stack();
        new lib_1.VpcNetwork(stack, 'VpcNetwork', {
            vpnConnections: {
                VpnConnection: {
                    ip: '192.0.2.1',
                    tunnelOptions: [
                        {
                            preSharedKey: 'secretkey1234',
                            tunnelInsideCidr: '169.254.10.0/30'
                        }
                    ]
                }
            }
        });
        assert_1.expect(stack).to(assert_1.haveResource('AWS::EC2::VPNConnection', {
            CustomerGatewayId: {
                Ref: 'VpcNetworkVpnConnectionCustomerGateway8B56D9AF'
            },
            Type: 'ipsec.1',
            VpnGatewayId: {
                Ref: 'VpcNetworkVpnGateway501295FA'
            },
            StaticRoutesOnly: false,
            VpnTunnelOptionsSpecifications: [
                {
                    PreSharedKey: 'secretkey1234',
                    TunnelInsideCidr: '169.254.10.0/30'
                }
            ]
        }));
        test.done();
    },
    'fails when vpc has no vpn gateway'(test) {
        // GIVEN
        const stack = new cdk_1.Stack();
        const vpc = new lib_1.VpcNetwork(stack, 'VpcNetwork');
        test.throws(() => vpc.addVpnConnection('VpnConnection', {
            asn: 65000,
            ip: '192.0.2.1'
        }), /VPN gateway/);
        test.done();
    },
    'fails when ip is invalid'(test) {
        // GIVEN
        const stack = new cdk_1.Stack();
        test.throws(() => new lib_1.VpcNetwork(stack, 'VpcNetwork', {
            vpnConnections: {
                VpnConnection: {
                    ip: '192.0.2.256'
                }
            }
        }), /`ip`.+IPv4/);
        test.done();
    },
    'fails when specifying more than two tunnel options'(test) {
        // GIVEN
        const stack = new cdk_1.Stack();
        test.throws(() => new lib_1.VpcNetwork(stack, 'VpcNetwork', {
            vpnConnections: {
                VpnConnection: {
                    ip: '192.0.2.1',
                    tunnelOptions: [
                        {
                            preSharedKey: 'secretkey1234',
                        },
                        {
                            preSharedKey: 'secretkey1234',
                        },
                        {
                            preSharedKey: 'secretkey1234',
                        }
                    ]
                }
            }
        }), /two.+`tunnelOptions`/);
        test.done();
    },
    'fails with duplicate tunnel inside cidr'(test) {
        // GIVEN
        const stack = new cdk_1.Stack();
        test.throws(() => new lib_1.VpcNetwork(stack, 'VpcNetwork', {
            vpnConnections: {
                VpnConnection: {
                    ip: '192.0.2.1',
                    tunnelOptions: [
                        {
                            tunnelInsideCidr: '169.254.10.0/30',
                        },
                        {
                            tunnelInsideCidr: '169.254.10.0/30',
                        }
                    ]
                }
            }
        }), /`tunnelInsideCidr`.+both tunnels/);
        test.done();
    },
    'fails when specifying an invalid pre-shared key'(test) {
        // GIVEN
        const stack = new cdk_1.Stack();
        test.throws(() => new lib_1.VpcNetwork(stack, 'VpcNetwork', {
            vpnConnections: {
                VpnConnection: {
                    ip: '192.0.2.1',
                    tunnelOptions: [
                        {
                            preSharedKey: '0invalid',
                        }
                    ]
                }
            }
        }), /`preSharedKey`/);
        test.done();
    },
    'fails when specifying a reserved tunnel inside cidr'(test) {
        // GIVEN
        const stack = new cdk_1.Stack();
        test.throws(() => new lib_1.VpcNetwork(stack, 'VpcNetwork', {
            vpnConnections: {
                VpnConnection: {
                    ip: '192.0.2.1',
                    tunnelOptions: [
                        {
                            tunnelInsideCidr: '169.254.1.0/30',
                        }
                    ]
                }
            }
        }), /`tunnelInsideCidr`.+reserved/);
        test.done();
    },
    'fails when specifying an invalid tunnel inside cidr'(test) {
        // GIVEN
        const stack = new cdk_1.Stack();
        test.throws(() => new lib_1.VpcNetwork(stack, 'VpcNetwork', {
            vpnConnections: {
                VpnConnection: {
                    ip: '192.0.2.1',
                    tunnelOptions: [
                        {
                            tunnelInsideCidr: '169.200.10.0/30',
                        }
                    ]
                }
            }
        }), /`tunnelInsideCidr`.+size/);
        test.done();
    },
    'can use metricTunnelState on a vpn connection'(test) {
        // GIVEN
        const stack = new cdk_1.Stack();
        const vpc = new lib_1.VpcNetwork(stack, 'VpcNetwork', {
            vpnGateway: true
        });
        const vpn = vpc.addVpnConnection('Vpn', {
            ip: '192.0.2.1'
        });
        // THEN
        test.deepEqual(stack.node.resolve(vpn.metricTunnelState()), {
            dimensions: { VpnId: { Ref: 'VpcNetworkVpnA476C58D' } },
            namespace: 'AWS/VPN',
            metricName: 'TunnelState',
            periodSec: 300,
            statistic: 'Average'
        });
        test.done();
    },
    'can use metricAllTunnelDataOut'(test) {
        // GIVEN
        const stack = new cdk_1.Stack();
        // THEN
        test.deepEqual(stack.node.resolve(lib_1.VpnConnection.metricAllTunnelDataOut()), {
            namespace: 'AWS/VPN',
            metricName: 'TunnelDataOut',
            periodSec: 300,
            statistic: 'Sum'
        });
        test.done();
    }
};
//# sourceMappingURL=data:application/json;base64,