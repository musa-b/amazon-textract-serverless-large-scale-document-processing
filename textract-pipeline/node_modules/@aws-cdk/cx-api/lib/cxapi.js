"use strict";
/**
 * File with definitions for the interface between the Cloud Executable and the CDK toolkit.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Bump this to the library version if and only if the CX protocol changes.
 *
 * We could also have used 1, 2, 3, ... here to indicate protocol versions, but
 * those then still need to be mapped to software versions to be useful. So we
 * might as well use the software version as protocol version and immediately
 * generate a useful error message from this.
 *
 * Note the following:
 *
 * - The versions are not compared in a semver way, they are used as
 *    opaque ordered tokens.
 * - The version needs to be set to the NEXT releasable version when it's
 *   updated (as the current verison in package.json has already been released!)
 * - The request does not have versioning yet, only the response.
 */
exports.PROTO_RESPONSE_VERSION = '0.19.0';
/**
 * The name of the root manifest file of the assembly.
 */
exports.MANIFEST_FILE = 'manifest.json';
/**
 * The name of the root file with build instructions.
 */
exports.BUILD_FILE = 'build.json';
exports.OUTDIR_ENV = 'CDK_OUTDIR';
exports.CONTEXT_ENV = 'CDK_CONTEXT_JSON';
/**
 * Context parameter for the default AWS account to use if a stack's environment is not set.
 */
exports.DEFAULT_ACCOUNT_CONTEXT_KEY = 'aws:cdk:toolkit:default-account';
/**
 * Context parameter for the default AWS region to use if a stack's environment is not set.
 */
exports.DEFAULT_REGION_CONTEXT_KEY = 'aws:cdk:toolkit:default-region';
/**
 * Metadata key used to print INFO-level messages by the toolkit when an app is syntheized.
 */
exports.INFO_METADATA_KEY = 'aws:cdk:info';
/**
 * Metadata key used to print WARNING-level messages by the toolkit when an app is syntheized.
 */
exports.WARNING_METADATA_KEY = 'aws:cdk:warning';
/**
 * Metadata key used to print ERROR-level messages by the toolkit when an app is syntheized.
 */
exports.ERROR_METADATA_KEY = 'aws:cdk:error';
/**
 * The key used when CDK path is embedded in **CloudFormation template**
 * metadata.
 */
exports.PATH_METADATA_KEY = 'aws:cdk:path';
/**
 * Enables the embedding of the "aws:cdk:path" in CloudFormation template metadata.
 */
exports.PATH_METADATA_ENABLE_CONTEXT = 'aws:cdk:enable-path-metadata';
/**
 * Disables the emission of `cdk.out`
 */
exports.DISABLE_LEGACY_MANIFEST_CONTEXT = 'aws:cdk:disable-legacy-manifest';
/**
 * The name of the pre 0.25.0 manifest file. Will only be emitted if
 * aws:cdk:disable-legacy-manifest is not defined.
 *
 * @deprecated Use `MANIFEST_FILE`
 */
exports.OUTFILE_NAME = 'cdk.out';
/**
 * Disable the collection and reporting of version information.
 */
exports.DISABLE_VERSION_REPORTING = 'aws:cdk:disable-version-reporting';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3hhcGkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjeGFwaS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7O0dBRUc7O0FBS0g7Ozs7Ozs7Ozs7Ozs7OztHQWVHO0FBQ1UsUUFBQSxzQkFBc0IsR0FBRyxRQUFRLENBQUM7QUFFL0M7O0dBRUc7QUFDVSxRQUFBLGFBQWEsR0FBRyxlQUFlLENBQUM7QUFFN0M7O0dBRUc7QUFDVSxRQUFBLFVBQVUsR0FBRyxZQUFZLENBQUM7QUFFMUIsUUFBQSxVQUFVLEdBQUcsWUFBWSxDQUFDO0FBQzFCLFFBQUEsV0FBVyxHQUFHLGtCQUFrQixDQUFDO0FBMEY5Qzs7R0FFRztBQUNVLFFBQUEsMkJBQTJCLEdBQUcsaUNBQWlDLENBQUM7QUFFN0U7O0dBRUc7QUFDVSxRQUFBLDBCQUEwQixHQUFHLGdDQUFnQyxDQUFDO0FBRTNFOztHQUVHO0FBQ1UsUUFBQSxpQkFBaUIsR0FBRyxjQUFjLENBQUM7QUFFaEQ7O0dBRUc7QUFDVSxRQUFBLG9CQUFvQixHQUFHLGlCQUFpQixDQUFDO0FBRXREOztHQUVHO0FBQ1UsUUFBQSxrQkFBa0IsR0FBRyxlQUFlLENBQUM7QUFFbEQ7OztHQUdHO0FBQ1UsUUFBQSxpQkFBaUIsR0FBRyxjQUFjLENBQUM7QUFFaEQ7O0dBRUc7QUFDVSxRQUFBLDRCQUE0QixHQUFHLDhCQUE4QixDQUFDO0FBRTNFOztHQUVHO0FBQ1UsUUFBQSwrQkFBK0IsR0FBRyxpQ0FBaUMsQ0FBQztBQUVqRjs7Ozs7R0FLRztBQUNVLFFBQUEsWUFBWSxHQUFHLFNBQVMsQ0FBQztBQUV0Qzs7R0FFRztBQUNVLFFBQUEseUJBQXlCLEdBQUcsbUNBQW1DLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEZpbGUgd2l0aCBkZWZpbml0aW9ucyBmb3IgdGhlIGludGVyZmFjZSBiZXR3ZWVuIHRoZSBDbG91ZCBFeGVjdXRhYmxlIGFuZCB0aGUgQ0RLIHRvb2xraXQuXG4gKi9cblxuaW1wb3J0IHsgQXJ0aWZhY3QgfSBmcm9tICcuL2FydGlmYWN0cyc7XG5pbXBvcnQgeyBFbnZpcm9ubWVudCB9IGZyb20gJy4vZW52aXJvbm1lbnQnO1xuXG4vKipcbiAqIEJ1bXAgdGhpcyB0byB0aGUgbGlicmFyeSB2ZXJzaW9uIGlmIGFuZCBvbmx5IGlmIHRoZSBDWCBwcm90b2NvbCBjaGFuZ2VzLlxuICpcbiAqIFdlIGNvdWxkIGFsc28gaGF2ZSB1c2VkIDEsIDIsIDMsIC4uLiBoZXJlIHRvIGluZGljYXRlIHByb3RvY29sIHZlcnNpb25zLCBidXRcbiAqIHRob3NlIHRoZW4gc3RpbGwgbmVlZCB0byBiZSBtYXBwZWQgdG8gc29mdHdhcmUgdmVyc2lvbnMgdG8gYmUgdXNlZnVsLiBTbyB3ZVxuICogbWlnaHQgYXMgd2VsbCB1c2UgdGhlIHNvZnR3YXJlIHZlcnNpb24gYXMgcHJvdG9jb2wgdmVyc2lvbiBhbmQgaW1tZWRpYXRlbHlcbiAqIGdlbmVyYXRlIGEgdXNlZnVsIGVycm9yIG1lc3NhZ2UgZnJvbSB0aGlzLlxuICpcbiAqIE5vdGUgdGhlIGZvbGxvd2luZzpcbiAqXG4gKiAtIFRoZSB2ZXJzaW9ucyBhcmUgbm90IGNvbXBhcmVkIGluIGEgc2VtdmVyIHdheSwgdGhleSBhcmUgdXNlZCBhc1xuICogICAgb3BhcXVlIG9yZGVyZWQgdG9rZW5zLlxuICogLSBUaGUgdmVyc2lvbiBuZWVkcyB0byBiZSBzZXQgdG8gdGhlIE5FWFQgcmVsZWFzYWJsZSB2ZXJzaW9uIHdoZW4gaXQnc1xuICogICB1cGRhdGVkIChhcyB0aGUgY3VycmVudCB2ZXJpc29uIGluIHBhY2thZ2UuanNvbiBoYXMgYWxyZWFkeSBiZWVuIHJlbGVhc2VkISlcbiAqIC0gVGhlIHJlcXVlc3QgZG9lcyBub3QgaGF2ZSB2ZXJzaW9uaW5nIHlldCwgb25seSB0aGUgcmVzcG9uc2UuXG4gKi9cbmV4cG9ydCBjb25zdCBQUk9UT19SRVNQT05TRV9WRVJTSU9OID0gJzAuMTkuMCc7XG5cbi8qKlxuICogVGhlIG5hbWUgb2YgdGhlIHJvb3QgbWFuaWZlc3QgZmlsZSBvZiB0aGUgYXNzZW1ibHkuXG4gKi9cbmV4cG9ydCBjb25zdCBNQU5JRkVTVF9GSUxFID0gJ21hbmlmZXN0Lmpzb24nO1xuXG4vKipcbiAqIFRoZSBuYW1lIG9mIHRoZSByb290IGZpbGUgd2l0aCBidWlsZCBpbnN0cnVjdGlvbnMuXG4gKi9cbmV4cG9ydCBjb25zdCBCVUlMRF9GSUxFID0gJ2J1aWxkLmpzb24nO1xuXG5leHBvcnQgY29uc3QgT1VURElSX0VOViA9ICdDREtfT1VURElSJztcbmV4cG9ydCBjb25zdCBDT05URVhUX0VOViA9ICdDREtfQ09OVEVYVF9KU09OJztcblxuLyoqXG4gKiBSZXByZXNlbnRzIGEgbWlzc2luZyBwaWVjZSBvZiBjb250ZXh0LlxuICovXG5leHBvcnQgaW50ZXJmYWNlIE1pc3NpbmdDb250ZXh0IHtcbiAgcmVhZG9ubHkgcHJvdmlkZXI6IHN0cmluZztcbiAgcmVhZG9ubHkgcHJvcHM6IHtcbiAgICBhY2NvdW50Pzogc3RyaW5nO1xuICAgIHJlZ2lvbj86IHN0cmluZztcbiAgICBba2V5OiBzdHJpbmddOiBhbnk7XG4gIH07XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQXNzZW1ibHlNYW5pZmVzdCB7XG4gIC8qKlxuICAgKiBQcm90b2NvbCB2ZXJzaW9uXG4gICAqL1xuICByZWFkb25seSB2ZXJzaW9uOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBzZXQgb2YgYXJ0aWZhY3RzIGluIHRoaXMgYXNzZW1ibHkuXG4gICAqL1xuICByZWFkb25seSBhcnRpZmFjdHM/OiB7IFtpZDogc3RyaW5nXTogQXJ0aWZhY3QgfTtcblxuICAvKipcbiAgICogUnVudGltZSBpbmZvcm1hdGlvbi5cbiAgICovXG4gIHJlYWRvbmx5IHJ1bnRpbWU/OiBBcHBSdW50aW1lO1xufVxuXG4vKipcbiAqIEBkZXByZWNhdGVkIHVzZSBgQXNzZW1ibHlNYW5pZmVzdGBcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBTeW50aGVzaXplUmVzcG9uc2UgZXh0ZW5kcyBBc3NlbWJseU1hbmlmZXN0IHtcbiAgcmVhZG9ubHkgc3RhY2tzOiBTeW50aGVzaXplZFN0YWNrW107XG59XG5cbi8qKlxuICogQSBjb21wbGV0ZSBzeW50aGVzaXplZCBzdGFja1xuICovXG5leHBvcnQgaW50ZXJmYWNlIFN5bnRoZXNpemVkU3RhY2sge1xuICByZWFkb25seSBuYW1lOiBzdHJpbmc7XG4gIHJlYWRvbmx5IGVudmlyb25tZW50OiBFbnZpcm9ubWVudDtcbiAgcmVhZG9ubHkgbWlzc2luZz86IHsgW2tleTogc3RyaW5nXTogTWlzc2luZ0NvbnRleHQgfTtcbiAgcmVhZG9ubHkgbWV0YWRhdGE6IFN0YWNrTWV0YWRhdGE7XG4gIHJlYWRvbmx5IHRlbXBsYXRlOiBhbnk7XG4gIHJlYWRvbmx5IGF1dG9EZXBsb3k/OiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBPdGhlciBzdGFja3MgdGhpcyBzdGFjayBkZXBlbmRzIG9uXG4gICAqL1xuICByZWFkb25seSBkZXBlbmRzT24/OiBzdHJpbmdbXTtcbn1cblxuLyoqXG4gKiBBbiBtZXRhZGF0YSBlbnRyeSBpbiB0aGUgY29uc3RydWN0LlxuICovXG5leHBvcnQgaW50ZXJmYWNlIE1ldGFkYXRhRW50cnkge1xuICAvKipcbiAgICogVGhlIHR5cGUgb2YgdGhlIG1ldGFkYXRhIGVudHJ5LlxuICAgKi9cbiAgcmVhZG9ubHkgdHlwZTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgZGF0YS5cbiAgICovXG4gIHJlYWRvbmx5IGRhdGE/OiBhbnk7XG5cbiAgLyoqXG4gICAqIEEgc3RhY2sgdHJhY2UgZm9yIHdoZW4gdGhlIGVudHJ5IHdhcyBjcmVhdGVkLlxuICAgKi9cbiAgcmVhZG9ubHkgdHJhY2U6IHN0cmluZ1tdO1xufVxuXG4vKipcbiAqIE1ldGFkYXRhIGFzc29jaWF0ZWQgd2l0aCB0aGUgb2JqZWN0cyBpbiB0aGUgc3RhY2sncyBDb25zdHJ1Y3QgdHJlZVxuICovXG5leHBvcnQgdHlwZSBTdGFja01ldGFkYXRhID0geyBbcGF0aDogc3RyaW5nXTogTWV0YWRhdGFFbnRyeVtdIH07XG5cbi8qKlxuICogSW5mb3JtYXRpb24gYWJvdXQgdGhlIGFwcGxpY2F0aW9uJ3MgcnVudGltZSBjb21wb25lbnRzLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIEFwcFJ1bnRpbWUge1xuICAvKipcbiAgICogVGhlIGxpc3Qgb2YgbGlicmFyaWVzIGxvYWRlZCBpbiB0aGUgYXBwbGljYXRpb24sIGFzc29jaWF0ZWQgd2l0aCB0aGVpciB2ZXJzaW9ucy5cbiAgICovXG4gIHJlYWRvbmx5IGxpYnJhcmllczogeyBbbmFtZTogc3RyaW5nXTogc3RyaW5nIH07XG59XG5cbi8qKlxuICogQ29udGV4dCBwYXJhbWV0ZXIgZm9yIHRoZSBkZWZhdWx0IEFXUyBhY2NvdW50IHRvIHVzZSBpZiBhIHN0YWNrJ3MgZW52aXJvbm1lbnQgaXMgbm90IHNldC5cbiAqL1xuZXhwb3J0IGNvbnN0IERFRkFVTFRfQUNDT1VOVF9DT05URVhUX0tFWSA9ICdhd3M6Y2RrOnRvb2xraXQ6ZGVmYXVsdC1hY2NvdW50JztcblxuLyoqXG4gKiBDb250ZXh0IHBhcmFtZXRlciBmb3IgdGhlIGRlZmF1bHQgQVdTIHJlZ2lvbiB0byB1c2UgaWYgYSBzdGFjaydzIGVudmlyb25tZW50IGlzIG5vdCBzZXQuXG4gKi9cbmV4cG9ydCBjb25zdCBERUZBVUxUX1JFR0lPTl9DT05URVhUX0tFWSA9ICdhd3M6Y2RrOnRvb2xraXQ6ZGVmYXVsdC1yZWdpb24nO1xuXG4vKipcbiAqIE1ldGFkYXRhIGtleSB1c2VkIHRvIHByaW50IElORk8tbGV2ZWwgbWVzc2FnZXMgYnkgdGhlIHRvb2xraXQgd2hlbiBhbiBhcHAgaXMgc3ludGhlaXplZC5cbiAqL1xuZXhwb3J0IGNvbnN0IElORk9fTUVUQURBVEFfS0VZID0gJ2F3czpjZGs6aW5mbyc7XG5cbi8qKlxuICogTWV0YWRhdGEga2V5IHVzZWQgdG8gcHJpbnQgV0FSTklORy1sZXZlbCBtZXNzYWdlcyBieSB0aGUgdG9vbGtpdCB3aGVuIGFuIGFwcCBpcyBzeW50aGVpemVkLlxuICovXG5leHBvcnQgY29uc3QgV0FSTklOR19NRVRBREFUQV9LRVkgPSAnYXdzOmNkazp3YXJuaW5nJztcblxuLyoqXG4gKiBNZXRhZGF0YSBrZXkgdXNlZCB0byBwcmludCBFUlJPUi1sZXZlbCBtZXNzYWdlcyBieSB0aGUgdG9vbGtpdCB3aGVuIGFuIGFwcCBpcyBzeW50aGVpemVkLlxuICovXG5leHBvcnQgY29uc3QgRVJST1JfTUVUQURBVEFfS0VZID0gJ2F3czpjZGs6ZXJyb3InO1xuXG4vKipcbiAqIFRoZSBrZXkgdXNlZCB3aGVuIENESyBwYXRoIGlzIGVtYmVkZGVkIGluICoqQ2xvdWRGb3JtYXRpb24gdGVtcGxhdGUqKlxuICogbWV0YWRhdGEuXG4gKi9cbmV4cG9ydCBjb25zdCBQQVRIX01FVEFEQVRBX0tFWSA9ICdhd3M6Y2RrOnBhdGgnO1xuXG4vKipcbiAqIEVuYWJsZXMgdGhlIGVtYmVkZGluZyBvZiB0aGUgXCJhd3M6Y2RrOnBhdGhcIiBpbiBDbG91ZEZvcm1hdGlvbiB0ZW1wbGF0ZSBtZXRhZGF0YS5cbiAqL1xuZXhwb3J0IGNvbnN0IFBBVEhfTUVUQURBVEFfRU5BQkxFX0NPTlRFWFQgPSAnYXdzOmNkazplbmFibGUtcGF0aC1tZXRhZGF0YSc7XG5cbi8qKlxuICogRGlzYWJsZXMgdGhlIGVtaXNzaW9uIG9mIGBjZGsub3V0YFxuICovXG5leHBvcnQgY29uc3QgRElTQUJMRV9MRUdBQ1lfTUFOSUZFU1RfQ09OVEVYVCA9ICdhd3M6Y2RrOmRpc2FibGUtbGVnYWN5LW1hbmlmZXN0JztcblxuLyoqXG4gKiBUaGUgbmFtZSBvZiB0aGUgcHJlIDAuMjUuMCBtYW5pZmVzdCBmaWxlLiBXaWxsIG9ubHkgYmUgZW1pdHRlZCBpZlxuICogYXdzOmNkazpkaXNhYmxlLWxlZ2FjeS1tYW5pZmVzdCBpcyBub3QgZGVmaW5lZC5cbiAqXG4gKiBAZGVwcmVjYXRlZCBVc2UgYE1BTklGRVNUX0ZJTEVgXG4gKi9cbmV4cG9ydCBjb25zdCBPVVRGSUxFX05BTUUgPSAnY2RrLm91dCc7XG5cbi8qKlxuICogRGlzYWJsZSB0aGUgY29sbGVjdGlvbiBhbmQgcmVwb3J0aW5nIG9mIHZlcnNpb24gaW5mb3JtYXRpb24uXG4gKi9cbmV4cG9ydCBjb25zdCBESVNBQkxFX1ZFUlNJT05fUkVQT1JUSU5HID0gJ2F3czpjZGs6ZGlzYWJsZS12ZXJzaW9uLXJlcG9ydGluZyc7XG4iXX0=