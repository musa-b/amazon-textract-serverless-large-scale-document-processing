"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cloudwatch = require("@aws-cdk/aws-cloudwatch");
const iam = require("@aws-cdk/aws-iam");
const cdk = require("@aws-cdk/cdk");
const log_stream_1 = require("./log-stream");
const logs_generated_1 = require("./logs.generated");
const metric_filter_1 = require("./metric-filter");
const pattern_1 = require("./pattern");
const subscription_filter_1 = require("./subscription-filter");
/**
 * An CloudWatch Log Group
 */
class LogGroupBase extends cdk.Construct {
    /**
     * Create a new Log Stream for this Log Group
     *
     * @param scope Parent construct
     * @param id Unique identifier for the construct in its parent
     * @param props Properties for creating the LogStream
     */
    newStream(scope, id, props = {}) {
        return new log_stream_1.LogStream(scope, id, Object.assign({ logGroup: this }, props));
    }
    /**
     * Create a new Subscription Filter on this Log Group
     *
     * @param scope Parent construct
     * @param id Unique identifier for the construct in its parent
     * @param props Properties for creating the SubscriptionFilter
     */
    newSubscriptionFilter(scope, id, props) {
        return new subscription_filter_1.SubscriptionFilter(scope, id, Object.assign({ logGroup: this }, props));
    }
    /**
     * Create a new Metric Filter on this Log Group
     *
     * @param scope Parent construct
     * @param id Unique identifier for the construct in its parent
     * @param props Properties for creating the MetricFilter
     */
    newMetricFilter(scope, id, props) {
        return new metric_filter_1.MetricFilter(scope, id, Object.assign({ logGroup: this }, props));
    }
    /**
     * Extract a metric from structured log events in the LogGroup
     *
     * Creates a MetricFilter on this LogGroup that will extract the value
     * of the indicated JSON field in all records where it occurs.
     *
     * The metric will be available in CloudWatch Metrics under the
     * indicated namespace and name.
     *
     * @param jsonField JSON field to extract (example: '$.myfield')
     * @param metricNamespace Namespace to emit the metric under
     * @param metricName Name to emit the metric under
     * @returns A Metric object representing the extracted metric
     */
    extractMetric(jsonField, metricNamespace, metricName) {
        new metric_filter_1.MetricFilter(this, `${metricNamespace}_${metricName}`, {
            logGroup: this,
            metricNamespace,
            metricName,
            filterPattern: pattern_1.FilterPattern.exists(jsonField),
            metricValue: jsonField
        });
        return new cloudwatch.Metric({ metricName, namespace: metricNamespace });
    }
    /**
     * Give permissions to write to create and write to streams in this log group
     */
    grantWrite(grantee) {
        return this.grant(grantee, 'logs:CreateLogStream', 'logs:PutLogEvents');
    }
    /**
     * Give the indicated permissions on this log group and all streams
     */
    grant(grantee, ...actions) {
        return iam.Grant.addToPrincipal({
            grantee,
            actions,
            // A LogGroup ARN out of CloudFormation already includes a ':*' at the end to include the log streams under the group.
            // See https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-logs-loggroup.html#w2ab1c21c10c63c43c11
            resourceArns: [this.logGroupArn],
            scope: this,
        });
    }
}
exports.LogGroupBase = LogGroupBase;
/**
 * How long, in days, the log contents will be retained.
 */
var RetentionDays;
(function (RetentionDays) {
    /**
     * 1 day
     */
    RetentionDays[RetentionDays["OneDay"] = 1] = "OneDay";
    /**
     * 3 days
     */
    RetentionDays[RetentionDays["ThreeDays"] = 3] = "ThreeDays";
    /**
     * 5 days
     */
    RetentionDays[RetentionDays["FiveDays"] = 5] = "FiveDays";
    /**
     * 1 week
     */
    RetentionDays[RetentionDays["OneWeek"] = 7] = "OneWeek";
    /**
     * 2 weeks
     */
    RetentionDays[RetentionDays["TwoWeeks"] = 14] = "TwoWeeks";
    /**
     * 1 month
     */
    RetentionDays[RetentionDays["OneMonth"] = 30] = "OneMonth";
    /**
     * 2 months
     */
    RetentionDays[RetentionDays["TwoMonths"] = 60] = "TwoMonths";
    /**
     * 3 months
     */
    RetentionDays[RetentionDays["ThreeMonths"] = 90] = "ThreeMonths";
    /**
     * 4 months
     */
    RetentionDays[RetentionDays["FourMonths"] = 120] = "FourMonths";
    /**
     * 5 months
     */
    RetentionDays[RetentionDays["FiveMonths"] = 150] = "FiveMonths";
    /**
     * 6 months
     */
    RetentionDays[RetentionDays["SixMonths"] = 180] = "SixMonths";
    /**
     * 1 year
     */
    RetentionDays[RetentionDays["OneYear"] = 365] = "OneYear";
    /**
     * 13 months
     */
    RetentionDays[RetentionDays["ThirteenMonths"] = 400] = "ThirteenMonths";
    /**
     * 18 months
     */
    RetentionDays[RetentionDays["EighteenMonths"] = 545] = "EighteenMonths";
    /**
     * 2 years
     */
    RetentionDays[RetentionDays["TwoYears"] = 731] = "TwoYears";
    /**
     * 5 years
     */
    RetentionDays[RetentionDays["FiveYears"] = 1827] = "FiveYears";
    /**
     * 10 years
     */
    RetentionDays[RetentionDays["TenYears"] = 3653] = "TenYears";
})(RetentionDays = exports.RetentionDays || (exports.RetentionDays = {}));
/**
 * Define a CloudWatch Log Group
 */
class LogGroup extends LogGroupBase {
    /**
     * Import an existing LogGroup
     */
    static import(scope, id, props) {
        return new ImportedLogGroup(scope, id, props);
    }
    constructor(scope, id, props = {}) {
        super(scope, id);
        let retentionInDays = props.retentionDays;
        if (retentionInDays === undefined) {
            retentionInDays = RetentionDays.TwoYears;
        }
        if (retentionInDays === Infinity) {
            retentionInDays = undefined;
        }
        if (retentionInDays !== undefined && retentionInDays <= 0) {
            throw new Error(`retentionInDays must be positive, got ${retentionInDays}`);
        }
        const resource = new logs_generated_1.CfnLogGroup(this, 'Resource', {
            logGroupName: props.logGroupName,
            retentionInDays,
        });
        if (props.retainLogGroup !== false) {
            cdk.applyRemovalPolicy(resource, cdk.RemovalPolicy.Orphan);
        }
        this.logGroupArn = resource.logGroupArn;
        this.logGroupName = resource.logGroupName;
    }
    /**
     * Export this LogGroup
     */
    export() {
        return {
            logGroupArn: new cdk.CfnOutput(this, 'LogGroupArn', { value: this.logGroupArn }).makeImportValue().toString()
        };
    }
}
exports.LogGroup = LogGroup;
/**
 * An imported CloudWatch Log Group
 */
class ImportedLogGroup extends LogGroupBase {
    constructor(scope, id, props) {
        super(scope, id);
        this.props = props;
        this.logGroupArn = props.logGroupArn;
        this.logGroupName = this.node.stack.parseArn(props.logGroupArn, ':').resourceName;
    }
    /**
     * Export this LogGroup
     */
    export() {
        return this.props;
    }
}
//# sourceMappingURL=data:application/json;base64,